/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '3', '2', 9, 0,
  /* 12 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '3', '2', 9, 0,
  /* 26 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '3', '2', 9, 0,
  /* 38 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '3', '2', 9, 0,
  /* 52 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '3', '2', 9, 0,
  /* 65 */ 's', 'h', 'a', '1', 'c', '.', '3', '2', 9, 0,
  /* 75 */ 's', 'h', 'a', '1', 'h', '.', '3', '2', 9, 0,
  /* 85 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '3', '2', 9, 0,
  /* 97 */ 's', 'h', 'a', '1', 'm', '.', '3', '2', 9, 0,
  /* 107 */ 's', 'h', 'a', '1', 'p', '.', '3', '2', 9, 0,
  /* 117 */ 'v', 'c', 'v', 't', 'a', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 132 */ 'v', 'c', 'v', 't', 'm', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 147 */ 'v', 'c', 'v', 't', 'n', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 162 */ 'v', 'c', 'v', 't', 'p', '.', 's', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 177 */ 'v', 'c', 'v', 't', 'a', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 192 */ 'v', 'c', 'v', 't', 'm', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 207 */ 'v', 'c', 'v', 't', 'n', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 222 */ 'v', 'c', 'v', 't', 'p', '.', 'u', '3', '2', '.', 'f', '3', '2', 9, 0,
  /* 237 */ 'v', 'r', 'i', 'n', 't', 'a', '.', 'f', '3', '2', 9, 0,
  /* 249 */ 'v', 's', 'e', 'l', 'g', 'e', '.', 'f', '3', '2', 9, 0,
  /* 261 */ 'v', 'm', 'i', 'n', 'n', 'm', '.', 'f', '3', '2', 9, 0,
  /* 273 */ 'v', 'm', 'a', 'x', 'n', 'm', '.', 'f', '3', '2', 9, 0,
  /* 285 */ 'v', 'r', 'i', 'n', 't', 'm', '.', 'f', '3', '2', 9, 0,
  /* 297 */ 'v', 'r', 'i', 'n', 't', 'n', '.', 'f', '3', '2', 9, 0,
  /* 309 */ 'v', 'r', 'i', 'n', 't', 'p', '.', 'f', '3', '2', 9, 0,
  /* 321 */ 'v', 's', 'e', 'l', 'e', 'q', '.', 'f', '3', '2', 9, 0,
  /* 333 */ 'v', 's', 'e', 'l', 'v', 's', '.', 'f', '3', '2', 9, 0,
  /* 345 */ 'v', 's', 'e', 'l', 'g', 't', '.', 'f', '3', '2', 9, 0,
  /* 357 */ 'v', 'r', 'i', 'n', 't', 'x', '.', 'f', '3', '2', 9, 0,
  /* 369 */ 'v', 'r', 'i', 'n', 't', 'z', '.', 'f', '3', '2', 9, 0,
  /* 381 */ 'l', 'd', 'c', '2', 9, 0,
  /* 387 */ 'm', 'r', 'c', '2', 9, 0,
  /* 393 */ 'm', 'r', 'r', 'c', '2', 9, 0,
  /* 400 */ 's', 't', 'c', '2', 9, 0,
  /* 406 */ 'c', 'd', 'p', '2', 9, 0,
  /* 412 */ 'm', 'c', 'r', '2', 9, 0,
  /* 418 */ 'm', 'c', 'r', 'r', '2', 9, 0,
  /* 425 */ 'v', 'c', 'v', 't', 'a', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 440 */ 'v', 'c', 'v', 't', 'm', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 455 */ 'v', 'c', 'v', 't', 'n', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 470 */ 'v', 'c', 'v', 't', 'p', '.', 's', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 485 */ 'v', 'c', 'v', 't', 'a', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 500 */ 'v', 'c', 'v', 't', 'm', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 515 */ 'v', 'c', 'v', 't', 'n', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 530 */ 'v', 'c', 'v', 't', 'p', '.', 'u', '3', '2', '.', 'f', '6', '4', 9, 0,
  /* 545 */ 'v', 'r', 'i', 'n', 't', 'a', '.', 'f', '6', '4', 9, 0,
  /* 557 */ 'v', 's', 'e', 'l', 'g', 'e', '.', 'f', '6', '4', 9, 0,
  /* 569 */ 'v', 'm', 'i', 'n', 'n', 'm', '.', 'f', '6', '4', 9, 0,
  /* 581 */ 'v', 'm', 'a', 'x', 'n', 'm', '.', 'f', '6', '4', 9, 0,
  /* 593 */ 'v', 'r', 'i', 'n', 't', 'm', '.', 'f', '6', '4', 9, 0,
  /* 605 */ 'v', 'r', 'i', 'n', 't', 'n', '.', 'f', '6', '4', 9, 0,
  /* 617 */ 'v', 'r', 'i', 'n', 't', 'p', '.', 'f', '6', '4', 9, 0,
  /* 629 */ 'v', 's', 'e', 'l', 'e', 'q', '.', 'f', '6', '4', 9, 0,
  /* 641 */ 'v', 's', 'e', 'l', 'v', 's', '.', 'f', '6', '4', 9, 0,
  /* 653 */ 'v', 's', 'e', 'l', 'g', 't', '.', 'f', '6', '4', 9, 0,
  /* 665 */ 'v', 'm', 'u', 'l', 'l', '.', 'p', '6', '4', 9, 0,
  /* 676 */ 'v', 'c', 'v', 't', 'a', '.', 's', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 691 */ 'v', 'c', 'v', 't', 'm', '.', 's', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 706 */ 'v', 'c', 'v', 't', 'n', '.', 's', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 721 */ 'v', 'c', 'v', 't', 'p', '.', 's', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 736 */ 'v', 'c', 'v', 't', 'a', '.', 'u', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 751 */ 'v', 'c', 'v', 't', 'm', '.', 'u', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 766 */ 'v', 'c', 'v', 't', 'n', '.', 'u', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 781 */ 'v', 'c', 'v', 't', 'p', '.', 'u', '1', '6', '.', 'f', '1', '6', 9, 0,
  /* 796 */ 'v', 'r', 'i', 'n', 't', 'a', '.', 'f', '1', '6', 9, 0,
  /* 808 */ 'v', 'm', 'i', 'n', 'n', 'm', '.', 'f', '1', '6', 9, 0,
  /* 820 */ 'v', 'm', 'a', 'x', 'n', 'm', '.', 'f', '1', '6', 9, 0,
  /* 832 */ 'v', 'r', 'i', 'n', 't', 'm', '.', 'f', '1', '6', 9, 0,
  /* 844 */ 'v', 'r', 'i', 'n', 't', 'n', '.', 'f', '1', '6', 9, 0,
  /* 856 */ 'v', 'r', 'i', 'n', 't', 'p', '.', 'f', '1', '6', 9, 0,
  /* 868 */ 'v', 'r', 'i', 'n', 't', 'x', '.', 'f', '1', '6', 9, 0,
  /* 880 */ 'v', 'r', 'i', 'n', 't', 'z', '.', 'f', '1', '6', 9, 0,
  /* 892 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '8', 9, 0,
  /* 902 */ 'a', 'e', 's', 'm', 'c', '.', '8', 9, 0,
  /* 911 */ 'a', 'e', 's', 'd', '.', '8', 9, 0,
  /* 919 */ 'a', 'e', 's', 'e', '.', '8', 9, 0,
  /* 927 */ 'r', 'f', 'e', 'd', 'a', 9, 0,
  /* 934 */ 'r', 'f', 'e', 'i', 'a', 9, 0,
  /* 941 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 949 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 958 */ 'r', 'f', 'e', 'd', 'b', 9, 0,
  /* 965 */ 'r', 'f', 'e', 'i', 'b', 9, 0,
  /* 972 */ 'd', 'm', 'b', 9, 0,
  /* 977 */ 'd', 's', 'b', 9, 0,
  /* 982 */ 'i', 's', 'b', 9, 0,
  /* 987 */ 'h', 'v', 'c', 9, 0,
  /* 992 */ 'p', 'l', 'd', 9, 0,
  /* 997 */ 's', 'e', 't', 'e', 'n', 'd', 9, 0,
  /* 1005 */ 'u', 'd', 'f', 9, 0,
  /* 1010 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 1018 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 1027 */ 'p', 'l', 'i', 9, 0,
  /* 1032 */ 'l', 'd', 'c', '2', 'l', 9, 0,
  /* 1039 */ 's', 't', 'c', '2', 'l', 9, 0,
  /* 1046 */ 'b', 'l', 9, 0,
  /* 1050 */ 's', 'e', 't', 'p', 'a', 'n', 9, 0,
  /* 1058 */ 'c', 'p', 's', 9, 0,
  /* 1063 */ 'm', 'o', 'v', 's', 9, 0,
  /* 1069 */ 'h', 'l', 't', 9, 0,
  /* 1074 */ 'b', 'k', 'p', 't', 9, 0,
  /* 1080 */ 'h', 'v', 'c', '.', 'w', 9, 0,
  /* 1087 */ 'u', 'd', 'f', '.', 'w', 9, 0,
  /* 1094 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 1102 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 1111 */ 'p', 'l', 'd', 'w', 9, 0,
  /* 1117 */ 'b', 'x', 9, 0,
  /* 1121 */ 'b', 'l', 'x', 9, 0,
  /* 1126 */ 'c', 'b', 'z', 9, 0,
  /* 1131 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 1137 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 1149 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 1161 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 1173 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 1185 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', ',', 32, 0,
  /* 1196 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', ',', 32, 0,
  /* 1207 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', ',', 32, 0,
  /* 1218 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', ',', 32, 0,
  /* 1229 */ 'v', 'l', 'd', '1', 0,
  /* 1234 */ 'd', 'c', 'p', 's', '1', 0,
  /* 1240 */ 'v', 's', 't', '1', 0,
  /* 1245 */ 'v', 'r', 'e', 'v', '3', '2', 0,
  /* 1252 */ 'l', 'd', 'c', '2', 0,
  /* 1257 */ 'm', 'r', 'c', '2', 0,
  /* 1262 */ 'm', 'r', 'r', 'c', '2', 0,
  /* 1268 */ 's', 't', 'c', '2', 0,
  /* 1273 */ 'v', 'l', 'd', '2', 0,
  /* 1278 */ 'c', 'd', 'p', '2', 0,
  /* 1283 */ 'm', 'c', 'r', '2', 0,
  /* 1288 */ 'm', 'c', 'r', 'r', '2', 0,
  /* 1294 */ 'd', 'c', 'p', 's', '2', 0,
  /* 1300 */ 'v', 's', 't', '2', 0,
  /* 1305 */ 'v', 'l', 'd', '3', 0,
  /* 1310 */ 'd', 'c', 'p', 's', '3', 0,
  /* 1316 */ 'v', 's', 't', '3', 0,
  /* 1321 */ 'v', 'r', 'e', 'v', '6', '4', 0,
  /* 1328 */ 'v', 'l', 'd', '4', 0,
  /* 1333 */ 'v', 's', 't', '4', 0,
  /* 1338 */ 's', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 1346 */ 'u', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 1354 */ 's', 'x', 't', 'b', '1', '6', 0,
  /* 1361 */ 'u', 'x', 't', 'b', '1', '6', 0,
  /* 1368 */ 's', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 1376 */ 'u', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 1384 */ 'u', 'q', 's', 'u', 'b', '1', '6', 0,
  /* 1392 */ 's', 's', 'u', 'b', '1', '6', 0,
  /* 1399 */ 'u', 's', 'u', 'b', '1', '6', 0,
  /* 1406 */ 's', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 1414 */ 'u', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 1422 */ 'u', 'q', 'a', 'd', 'd', '1', '6', 0,
  /* 1430 */ 's', 'a', 'd', 'd', '1', '6', 0,
  /* 1437 */ 'u', 'a', 'd', 'd', '1', '6', 0,
  /* 1444 */ 's', 's', 'a', 't', '1', '6', 0,
  /* 1451 */ 'u', 's', 'a', 't', '1', '6', 0,
  /* 1458 */ 'v', 'r', 'e', 'v', '1', '6', 0,
  /* 1465 */ 'u', 's', 'a', 'd', 'a', '8', 0,
  /* 1472 */ 's', 'h', 's', 'u', 'b', '8', 0,
  /* 1479 */ 'u', 'h', 's', 'u', 'b', '8', 0,
  /* 1486 */ 'u', 'q', 's', 'u', 'b', '8', 0,
  /* 1493 */ 's', 's', 'u', 'b', '8', 0,
  /* 1499 */ 'u', 's', 'u', 'b', '8', 0,
  /* 1505 */ 'u', 's', 'a', 'd', '8', 0,
  /* 1511 */ 's', 'h', 'a', 'd', 'd', '8', 0,
  /* 1518 */ 'u', 'h', 'a', 'd', 'd', '8', 0,
  /* 1525 */ 'u', 'q', 'a', 'd', 'd', '8', 0,
  /* 1532 */ 's', 'a', 'd', 'd', '8', 0,
  /* 1538 */ 'u', 'a', 'd', 'd', '8', 0,
  /* 1544 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1557 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1564 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1574 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1589 */ 'v', 'a', 'b', 'a', 0,
  /* 1594 */ 'l', 'd', 'a', 0,
  /* 1598 */ 'l', 'd', 'm', 'd', 'a', 0,
  /* 1604 */ 's', 't', 'm', 'd', 'a', 0,
  /* 1610 */ 'r', 'f', 'e', 'i', 'a', 0,
  /* 1616 */ 'v', 'l', 'd', 'm', 'i', 'a', 0,
  /* 1623 */ 'v', 's', 't', 'm', 'i', 'a', 0,
  /* 1630 */ 's', 'r', 's', 'i', 'a', 0,
  /* 1636 */ 's', 'm', 'm', 'l', 'a', 0,
  /* 1642 */ 'v', 'n', 'm', 'l', 'a', 0,
  /* 1648 */ 'v', 'm', 'l', 'a', 0,
  /* 1653 */ 'v', 'f', 'm', 'a', 0,
  /* 1658 */ 'v', 'f', 'n', 'm', 'a', 0,
  /* 1664 */ 'v', 'r', 's', 'r', 'a', 0,
  /* 1670 */ 'v', 's', 'r', 'a', 0,
  /* 1675 */ 'l', 'd', 'a', 'b', 0,
  /* 1680 */ 's', 'x', 't', 'a', 'b', 0,
  /* 1686 */ 'u', 'x', 't', 'a', 'b', 0,
  /* 1692 */ 's', 'm', 'l', 'a', 'b', 'b', 0,
  /* 1699 */ 's', 'm', 'l', 'a', 'l', 'b', 'b', 0,
  /* 1707 */ 's', 'm', 'u', 'l', 'b', 'b', 0,
  /* 1714 */ 't', 'b', 'b', 0,
  /* 1718 */ 'r', 'f', 'e', 'd', 'b', 0,
  /* 1724 */ 'v', 'l', 'd', 'm', 'd', 'b', 0,
  /* 1731 */ 'v', 's', 't', 'm', 'd', 'b', 0,
  /* 1738 */ 's', 'r', 's', 'd', 'b', 0,
  /* 1744 */ 'l', 'd', 'm', 'i', 'b', 0,
  /* 1750 */ 's', 't', 'm', 'i', 'b', 0,
  /* 1756 */ 's', 't', 'l', 'b', 0,
  /* 1761 */ 'd', 'm', 'b', 0,
  /* 1765 */ 's', 'w', 'p', 'b', 0,
  /* 1770 */ 'l', 'd', 'r', 'b', 0,
  /* 1775 */ 's', 't', 'r', 'b', 0,
  /* 1780 */ 'd', 's', 'b', 0,
  /* 1784 */ 'i', 's', 'b', 0,
  /* 1788 */ 'l', 'd', 'r', 's', 'b', 0,
  /* 1794 */ 's', 'm', 'l', 'a', 't', 'b', 0,
  /* 1801 */ 'p', 'k', 'h', 't', 'b', 0,
  /* 1807 */ 's', 'm', 'l', 'a', 'l', 't', 'b', 0,
  /* 1815 */ 's', 'm', 'u', 'l', 't', 'b', 0,
  /* 1822 */ 'v', 'c', 'v', 't', 'b', 0,
  /* 1828 */ 's', 'x', 't', 'b', 0,
  /* 1833 */ 'u', 'x', 't', 'b', 0,
  /* 1838 */ 'q', 'd', 's', 'u', 'b', 0,
  /* 1844 */ 'v', 'h', 's', 'u', 'b', 0,
  /* 1850 */ 'v', 'q', 's', 'u', 'b', 0,
  /* 1856 */ 'v', 's', 'u', 'b', 0,
  /* 1861 */ 's', 'm', 'l', 'a', 'w', 'b', 0,
  /* 1868 */ 's', 'm', 'u', 'l', 'w', 'b', 0,
  /* 1875 */ 'l', 'd', 'a', 'e', 'x', 'b', 0,
  /* 1882 */ 's', 't', 'l', 'e', 'x', 'b', 0,
  /* 1889 */ 'l', 'd', 'r', 'e', 'x', 'b', 0,
  /* 1896 */ 's', 't', 'r', 'e', 'x', 'b', 0,
  /* 1903 */ 's', 'b', 'c', 0,
  /* 1907 */ 'a', 'd', 'c', 0,
  /* 1911 */ 'l', 'd', 'c', 0,
  /* 1915 */ 'b', 'f', 'c', 0,
  /* 1919 */ 'v', 'b', 'i', 'c', 0,
  /* 1924 */ 's', 'm', 'c', 0,
  /* 1928 */ 'm', 'r', 'c', 0,
  /* 1932 */ 'm', 'r', 'r', 'c', 0,
  /* 1937 */ 'r', 's', 'c', 0,
  /* 1941 */ 's', 't', 'c', 0,
  /* 1945 */ 's', 'v', 'c', 0,
  /* 1949 */ 's', 'm', 'l', 'a', 'd', 0,
  /* 1955 */ 's', 'm', 'u', 'a', 'd', 0,
  /* 1961 */ 'v', 'a', 'b', 'd', 0,
  /* 1966 */ 'q', 'd', 'a', 'd', 'd', 0,
  /* 1972 */ 'v', 'r', 'h', 'a', 'd', 'd', 0,
  /* 1979 */ 'v', 'h', 'a', 'd', 'd', 0,
  /* 1985 */ 'v', 'p', 'a', 'd', 'd', 0,
  /* 1991 */ 'v', 'q', 'a', 'd', 'd', 0,
  /* 1997 */ 'v', 'a', 'd', 'd', 0,
  /* 2002 */ 's', 'm', 'l', 'a', 'l', 'd', 0,
  /* 2009 */ 'p', 'l', 'd', 0,
  /* 2013 */ 's', 'm', 'l', 's', 'l', 'd', 0,
  /* 2020 */ 'v', 'a', 'n', 'd', 0,
  /* 2025 */ 'l', 'd', 'r', 'd', 0,
  /* 2030 */ 's', 't', 'r', 'd', 0,
  /* 2035 */ 's', 'm', 'l', 's', 'd', 0,
  /* 2041 */ 's', 'm', 'u', 's', 'd', 0,
  /* 2047 */ 'l', 'd', 'a', 'e', 'x', 'd', 0,
  /* 2054 */ 's', 't', 'l', 'e', 'x', 'd', 0,
  /* 2061 */ 'l', 'd', 'r', 'e', 'x', 'd', 0,
  /* 2068 */ 's', 't', 'r', 'e', 'x', 'd', 0,
  /* 2075 */ 'v', 'a', 'c', 'g', 'e', 0,
  /* 2081 */ 'v', 'c', 'g', 'e', 0,
  /* 2086 */ 'v', 'c', 'l', 'e', 0,
  /* 2091 */ 'v', 'r', 'e', 'c', 'p', 'e', 0,
  /* 2098 */ 'v', 'c', 'm', 'p', 'e', 0,
  /* 2104 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 0,
  /* 2112 */ 'v', 'b', 'i', 'f', 0,
  /* 2117 */ 'd', 'b', 'g', 0,
  /* 2121 */ 'v', 'q', 'n', 'e', 'g', 0,
  /* 2127 */ 'v', 'n', 'e', 'g', 0,
  /* 2132 */ 'l', 'd', 'a', 'h', 0,
  /* 2137 */ 'v', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 0,
  /* 2146 */ 's', 'x', 't', 'a', 'h', 0,
  /* 2152 */ 'u', 'x', 't', 'a', 'h', 0,
  /* 2158 */ 't', 'b', 'h', 0,
  /* 2162 */ 's', 't', 'l', 'h', 0,
  /* 2167 */ 'v', 'q', 'd', 'm', 'u', 'l', 'h', 0,
  /* 2175 */ 'v', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 0,
  /* 2184 */ 'l', 'd', 'r', 'h', 0,
  /* 2189 */ 's', 't', 'r', 'h', 0,
  /* 2194 */ 'v', 'q', 'r', 'd', 'm', 'l', 's', 'h', 0,
  /* 2203 */ 'l', 'd', 'r', 's', 'h', 0,
  /* 2209 */ 'p', 'u', 's', 'h', 0,
  /* 2214 */ 'r', 'e', 'v', 's', 'h', 0,
  /* 2220 */ 's', 'x', 't', 'h', 0,
  /* 2225 */ 'u', 'x', 't', 'h', 0,
  /* 2230 */ 'l', 'd', 'a', 'e', 'x', 'h', 0,
  /* 2237 */ 's', 't', 'l', 'e', 'x', 'h', 0,
  /* 2244 */ 'l', 'd', 'r', 'e', 'x', 'h', 0,
  /* 2251 */ 's', 't', 'r', 'e', 'x', 'h', 0,
  /* 2258 */ 'b', 'f', 'i', 0,
  /* 2262 */ 'p', 'l', 'i', 0,
  /* 2266 */ 'v', 's', 'l', 'i', 0,
  /* 2271 */ 'v', 's', 'r', 'i', 0,
  /* 2276 */ 'b', 'x', 'j', 0,
  /* 2280 */ 'l', 'd', 'c', '2', 'l', 0,
  /* 2286 */ 's', 't', 'c', '2', 'l', 0,
  /* 2292 */ 'u', 'm', 'a', 'a', 'l', 0,
  /* 2298 */ 'v', 'a', 'b', 'a', 'l', 0,
  /* 2304 */ 'v', 'p', 'a', 'd', 'a', 'l', 0,
  /* 2311 */ 'v', 'q', 'd', 'm', 'l', 'a', 'l', 0,
  /* 2319 */ 's', 'm', 'l', 'a', 'l', 0,
  /* 2325 */ 'u', 'm', 'l', 'a', 'l', 0,
  /* 2331 */ 'v', 'm', 'l', 'a', 'l', 0,
  /* 2337 */ 'v', 't', 'b', 'l', 0,
  /* 2342 */ 'v', 's', 'u', 'b', 'l', 0,
  /* 2348 */ 'l', 'd', 'c', 'l', 0,
  /* 2353 */ 's', 't', 'c', 'l', 0,
  /* 2358 */ 'v', 'a', 'b', 'd', 'l', 0,
  /* 2364 */ 'v', 'p', 'a', 'd', 'd', 'l', 0,
  /* 2371 */ 'v', 'a', 'd', 'd', 'l', 0,
  /* 2377 */ 's', 'e', 'l', 0,
  /* 2381 */ 'v', 'q', 's', 'h', 'l', 0,
  /* 2387 */ 'v', 'q', 'r', 's', 'h', 'l', 0,
  /* 2394 */ 'v', 'r', 's', 'h', 'l', 0,
  /* 2400 */ 'v', 's', 'h', 'l', 0,
  /* 2405 */ 'v', 's', 'h', 'l', 'l', 0,
  /* 2411 */ 'v', 'q', 'd', 'm', 'u', 'l', 'l', 0,
  /* 2419 */ 's', 'm', 'u', 'l', 'l', 0,
  /* 2425 */ 'u', 'm', 'u', 'l', 'l', 0,
  /* 2431 */ 'v', 'm', 'u', 'l', 'l', 0,
  /* 2437 */ 'v', 'b', 's', 'l', 0,
  /* 2442 */ 'v', 'q', 'd', 'm', 'l', 's', 'l', 0,
  /* 2450 */ 'v', 'm', 'l', 's', 'l', 0,
  /* 2456 */ 's', 't', 'l', 0,
  /* 2460 */ 's', 'm', 'm', 'u', 'l', 0,
  /* 2466 */ 'v', 'n', 'm', 'u', 'l', 0,
  /* 2472 */ 'v', 'm', 'u', 'l', 0,
  /* 2477 */ 'v', 'm', 'o', 'v', 'l', 0,
  /* 2483 */ 'l', 'd', 'm', 0,
  /* 2487 */ 's', 't', 'm', 0,
  /* 2491 */ 'v', 'r', 's', 'u', 'b', 'h', 'n', 0,
  /* 2499 */ 'v', 's', 'u', 'b', 'h', 'n', 0,
  /* 2506 */ 'v', 'r', 'a', 'd', 'd', 'h', 'n', 0,
  /* 2514 */ 'v', 'a', 'd', 'd', 'h', 'n', 0,
  /* 2521 */ 'v', 'p', 'm', 'i', 'n', 0,
  /* 2527 */ 'v', 'm', 'i', 'n', 0,
  /* 2532 */ 'c', 'm', 'n', 0,
  /* 2536 */ 'v', 'q', 's', 'h', 'r', 'n', 0,
  /* 2543 */ 'v', 'q', 'r', 's', 'h', 'r', 'n', 0,
  /* 2551 */ 'v', 'r', 's', 'h', 'r', 'n', 0,
  /* 2558 */ 'v', 's', 'h', 'r', 'n', 0,
  /* 2564 */ 'v', 'o', 'r', 'n', 0,
  /* 2569 */ 'v', 't', 'r', 'n', 0,
  /* 2574 */ 'v', 'q', 's', 'h', 'r', 'u', 'n', 0,
  /* 2582 */ 'v', 'q', 'r', 's', 'h', 'r', 'u', 'n', 0,
  /* 2591 */ 'v', 'q', 'm', 'o', 'v', 'u', 'n', 0,
  /* 2599 */ 'v', 'm', 'v', 'n', 0,
  /* 2604 */ 'v', 'q', 'm', 'o', 'v', 'n', 0,
  /* 2611 */ 'v', 'm', 'o', 'v', 'n', 0,
  /* 2617 */ 't', 'r', 'a', 'p', 0,
  /* 2622 */ 'c', 'd', 'p', 0,
  /* 2626 */ 'v', 'z', 'i', 'p', 0,
  /* 2631 */ 'v', 'c', 'm', 'p', 0,
  /* 2636 */ 'p', 'o', 'p', 0,
  /* 2640 */ 'v', 'd', 'u', 'p', 0,
  /* 2645 */ 'v', 's', 'w', 'p', 0,
  /* 2650 */ 'v', 'u', 'z', 'p', 0,
  /* 2655 */ 'v', 'c', 'e', 'q', 0,
  /* 2660 */ 't', 'e', 'q', 0,
  /* 2664 */ 's', 'm', 'm', 'l', 'a', 'r', 0,
  /* 2671 */ 'm', 'c', 'r', 0,
  /* 2675 */ 'a', 'd', 'r', 0,
  /* 2679 */ 'v', 'l', 'd', 'r', 0,
  /* 2684 */ 'v', 'r', 's', 'h', 'r', 0,
  /* 2690 */ 'v', 's', 'h', 'r', 0,
  /* 2695 */ 's', 'm', 'm', 'u', 'l', 'r', 0,
  /* 2702 */ 'v', 'e', 'o', 'r', 0,
  /* 2707 */ 'r', 'o', 'r', 0,
  /* 2711 */ 'm', 'c', 'r', 'r', 0,
  /* 2716 */ 'v', 'o', 'r', 'r', 0,
  /* 2721 */ 'a', 's', 'r', 0,
  /* 2725 */ 's', 'm', 'm', 'l', 's', 'r', 0,
  /* 2732 */ 'v', 'm', 's', 'r', 0,
  /* 2737 */ 'v', 'r', 'i', 'n', 't', 'r', 0,
  /* 2744 */ 'v', 's', 't', 'r', 0,
  /* 2749 */ 'v', 'c', 'v', 't', 'r', 0,
  /* 2755 */ 'v', 'q', 'a', 'b', 's', 0,
  /* 2761 */ 'v', 'a', 'b', 's', 0,
  /* 2766 */ 's', 'u', 'b', 's', 0,
  /* 2771 */ 'v', 'c', 'l', 's', 0,
  /* 2776 */ 's', 'm', 'm', 'l', 's', 0,
  /* 2782 */ 'v', 'n', 'm', 'l', 's', 0,
  /* 2788 */ 'v', 'm', 'l', 's', 0,
  /* 2793 */ 'v', 'f', 'm', 's', 0,
  /* 2798 */ 'v', 'f', 'n', 'm', 's', 0,
  /* 2804 */ 'v', 'r', 'e', 'c', 'p', 's', 0,
  /* 2811 */ 'v', 'm', 'r', 's', 0,
  /* 2816 */ 'a', 's', 'r', 's', 0,
  /* 2821 */ 'l', 's', 'r', 's', 0,
  /* 2826 */ 'v', 'r', 's', 'q', 'r', 't', 's', 0,
  /* 2834 */ 'm', 'o', 'v', 's', 0,
  /* 2839 */ 's', 's', 'a', 't', 0,
  /* 2844 */ 'u', 's', 'a', 't', 0,
  /* 2849 */ 's', 'm', 'l', 'a', 'b', 't', 0,
  /* 2856 */ 'p', 'k', 'h', 'b', 't', 0,
  /* 2862 */ 's', 'm', 'l', 'a', 'l', 'b', 't', 0,
  /* 2870 */ 's', 'm', 'u', 'l', 'b', 't', 0,
  /* 2877 */ 'l', 'd', 'r', 'b', 't', 0,
  /* 2883 */ 's', 't', 'r', 'b', 't', 0,
  /* 2889 */ 'l', 'd', 'r', 's', 'b', 't', 0,
  /* 2896 */ 'e', 'r', 'e', 't', 0,
  /* 2901 */ 'v', 'a', 'c', 'g', 't', 0,
  /* 2907 */ 'v', 'c', 'g', 't', 0,
  /* 2912 */ 'l', 'd', 'r', 'h', 't', 0,
  /* 2918 */ 's', 't', 'r', 'h', 't', 0,
  /* 2924 */ 'l', 'd', 'r', 's', 'h', 't', 0,
  /* 2931 */ 'r', 'b', 'i', 't', 0,
  /* 2936 */ 'v', 'b', 'i', 't', 0,
  /* 2941 */ 'v', 'c', 'l', 't', 0,
  /* 2946 */ 'v', 'c', 'n', 't', 0,
  /* 2951 */ 'h', 'i', 'n', 't', 0,
  /* 2956 */ 'l', 'd', 'r', 't', 0,
  /* 2961 */ 'v', 's', 'q', 'r', 't', 0,
  /* 2967 */ 's', 't', 'r', 't', 0,
  /* 2972 */ 'v', 't', 's', 't', 0,
  /* 2977 */ 's', 'm', 'l', 'a', 't', 't', 0,
  /* 2984 */ 's', 'm', 'l', 'a', 'l', 't', 't', 0,
  /* 2992 */ 's', 'm', 'u', 'l', 't', 't', 0,
  /* 2999 */ 'v', 'c', 'v', 't', 't', 0,
  /* 3005 */ 'v', 'c', 'v', 't', 0,
  /* 3010 */ 'm', 'o', 'v', 't', 0,
  /* 3015 */ 's', 'm', 'l', 'a', 'w', 't', 0,
  /* 3022 */ 's', 'm', 'u', 'l', 'w', 't', 0,
  /* 3029 */ 'v', 'e', 'x', 't', 0,
  /* 3034 */ 'v', 'q', 's', 'h', 'l', 'u', 0,
  /* 3041 */ 'r', 'e', 'v', 0,
  /* 3045 */ 's', 'd', 'i', 'v', 0,
  /* 3050 */ 'u', 'd', 'i', 'v', 0,
  /* 3055 */ 'v', 'd', 'i', 'v', 0,
  /* 3060 */ 'v', 'm', 'o', 'v', 0,
  /* 3065 */ 'v', 's', 'u', 'b', 'w', 0,
  /* 3071 */ 'v', 'a', 'd', 'd', 'w', 0,
  /* 3077 */ 'p', 'l', 'd', 'w', 0,
  /* 3082 */ 'm', 'o', 'v', 'w', 0,
  /* 3087 */ 'f', 'l', 'd', 'm', 'i', 'a', 'x', 0,
  /* 3095 */ 'f', 's', 't', 'm', 'i', 'a', 'x', 0,
  /* 3103 */ 'v', 'p', 'm', 'a', 'x', 0,
  /* 3109 */ 'v', 'm', 'a', 'x', 0,
  /* 3114 */ 's', 'h', 's', 'a', 'x', 0,
  /* 3120 */ 'u', 'h', 's', 'a', 'x', 0,
  /* 3126 */ 'u', 'q', 's', 'a', 'x', 0,
  /* 3132 */ 's', 's', 'a', 'x', 0,
  /* 3137 */ 'u', 's', 'a', 'x', 0,
  /* 3142 */ 'f', 'l', 'd', 'm', 'd', 'b', 'x', 0,
  /* 3150 */ 'f', 's', 't', 'm', 'd', 'b', 'x', 0,
  /* 3158 */ 'v', 't', 'b', 'x', 0,
  /* 3163 */ 's', 'm', 'l', 'a', 'd', 'x', 0,
  /* 3170 */ 's', 'm', 'u', 'a', 'd', 'x', 0,
  /* 3177 */ 's', 'm', 'l', 'a', 'l', 'd', 'x', 0,
  /* 3185 */ 's', 'm', 'l', 's', 'l', 'd', 'x', 0,
  /* 3193 */ 's', 'm', 'l', 's', 'd', 'x', 0,
  /* 3200 */ 's', 'm', 'u', 's', 'd', 'x', 0,
  /* 3207 */ 'l', 'd', 'a', 'e', 'x', 0,
  /* 3213 */ 's', 't', 'l', 'e', 'x', 0,
  /* 3219 */ 'l', 'd', 'r', 'e', 'x', 0,
  /* 3225 */ 'c', 'l', 'r', 'e', 'x', 0,
  /* 3231 */ 's', 't', 'r', 'e', 'x', 0,
  /* 3237 */ 's', 'b', 'f', 'x', 0,
  /* 3242 */ 'u', 'b', 'f', 'x', 0,
  /* 3247 */ 'b', 'l', 'x', 0,
  /* 3251 */ 'r', 'r', 'x', 0,
  /* 3255 */ 's', 'h', 'a', 's', 'x', 0,
  /* 3261 */ 'u', 'h', 'a', 's', 'x', 0,
  /* 3267 */ 'u', 'q', 'a', 's', 'x', 0,
  /* 3273 */ 's', 'a', 's', 'x', 0,
  /* 3278 */ 'u', 'a', 's', 'x', 0,
  /* 3283 */ 'v', 'r', 'i', 'n', 't', 'x', 0,
  /* 3290 */ 'v', 'c', 'l', 'z', 0,
  /* 3295 */ 'v', 'r', 'i', 'n', 't', 'z', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1565U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1558U,	// BUNDLE
    1575U,	// LIFETIME_START
    1545U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// ABS
    6004U,	// ADCri
    6004U,	// ADCrr
    10100U,	// ADCrsi
    14196U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    6065U,	// ADDri
    6065U,	// ADDrr
    10161U,	// ADDrsi
    14257U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    19060U,	// ADR
    1090671504U,	// AESD
    1090671512U,	// AESE
    1107448701U,	// AESIMC
    1107448711U,	// AESMC
    6118U,	// ANDri
    6118U,	// ANDrr
    10214U,	// ANDrsi
    14310U,	// ANDrsr
    268962U,	// ASRi
    268962U,	// ASRr
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    26492U,	// BFC
    30931U,	// BFI
    6017U,	// BICri
    6017U,	// BICrr
    10113U,	// BICrsi
    14209U,	// BICrsr
    414771U,	// BKPT
    414743U,	// BL
    414818U,	// BLX
    1073777840U,	// BLX_pred
    414818U,	// BLXi
    1073776932U,	// BL_pred
    0U,	// BMOVPCB_CALL
    0U,	// BMOVPCRX_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    414814U,	// BX
    1073776869U,	// BXJ
    0U,	// BX_CALL
    564300U,	// BX_RET
    1073777740U,	// BX_pred
    1073776271U,	// Bcc
    2197858879U,	// CDP
    67809687U,	// CDP2
    3226U,	// CLREX
    19676U,	// CLZ
    18917U,	// CMNri
    18917U,	// CMNzrr
    27109U,	// CMNzrsi
    31205U,	// CMNzrsr
    19017U,	// CMPri
    19017U,	// CMPrr
    27209U,	// CMPrsi
    31305U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_STRUCT_BYVAL_I32
    414755U,	// CPS1p
    1157679864U,	// CPS2p
    83938040U,	// CPS3p
    33706926U,	// CRC32B
    33706934U,	// CRC32CB
    33707003U,	// CRC32CH
    33707087U,	// CRC32CW
    33706995U,	// CRC32H
    33707079U,	// CRC32W
    1073776710U,	// DBG
    54221U,	// DMB
    54226U,	// DSB
    6800U,	// EORri
    6800U,	// EORrr
    10896U,	// EORrsi
    14992U,	// EORrsr
    432977U,	// ERET
    3322694645U,	// FCONSTD
    3322825717U,	// FCONSTS
    33573959U,	// FLDMXDB_UPD
    35856U,	// FLDMXIA
    33573904U,	// FLDMXIA_UPD
    1088252U,	// FMSTAT
    33573967U,	// FSTMXDB_UPD
    35864U,	// FSTMXIA
    33573912U,	// FSTMXIA_UPD
    1073777544U,	// HINT
    414766U,	// HLT
    414684U,	// HVC
    58327U,	// ISB
    117767030U,	// ITasm
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    0U,	// Int_eh_sjlj_setup_dispatch
    0U,	// JUMPTABLE_ADDRS
    0U,	// JUMPTABLE_INSTS
    0U,	// JUMPTABLE_TBB
    0U,	// JUMPTABLE_TBH
    17979U,	// LDA
    18060U,	// LDAB
    19592U,	// LDAEX
    18260U,	// LDAEXB
    134236160U,	// LDAEXD
    18615U,	// LDAEXH
    18517U,	// LDAH
    152220681U,	// LDC2L_OFFSET
    1242739721U,	// LDC2L_OPTION
    2316481545U,	// LDC2L_POST
    185775113U,	// LDC2L_PRE
    152220030U,	// LDC2_OFFSET
    1242739070U,	// LDC2_OPTION
    2316480894U,	// LDC2_POST
    185774462U,	// LDC2_PRE
    3271588141U,	// LDCL_OFFSET
    3271588141U,	// LDCL_OPTION
    3271588141U,	// LDCL_POST
    3271588141U,	// LDCL_PRE
    3271587704U,	// LDC_OFFSET
    3271587704U,	// LDC_OPTION
    3271587704U,	// LDC_POST
    3271587704U,	// LDC_PRE
    34367U,	// LDMDA
    33572415U,	// LDMDA_UPD
    34494U,	// LDMDB
    33572542U,	// LDMDB_UPD
    35252U,	// LDMIA
    0U,	// LDMIA_RET
    33573300U,	// LDMIA_UPD
    34513U,	// LDMIB
    33572561U,	// LDMIB_UPD
    281406U,	// LDRBT_POST
    68414U,	// LDRBT_POST_IMM
    68414U,	// LDRBT_POST_REG
    67307U,	// LDRB_POST_IMM
    67307U,	// LDRB_POST_REG
    30443U,	// LDRB_PRE_IMM
    67307U,	// LDRB_PRE_REG
    26347U,	// LDRBi12
    30443U,	// LDRBrs
    67562U,	// LDRD
    42986U,	// LDRD_POST
    42986U,	// LDRD_PRE
    19604U,	// LDREX
    18274U,	// LDREXB
    134236174U,	// LDREXD
    18629U,	// LDREXH
    30857U,	// LDRH
    31585U,	// LDRHTi
    68449U,	// LDRHTr
    67721U,	// LDRH_POST
    67721U,	// LDRH_PRE
    0U,	// LDRLIT_ga_abs
    0U,	// LDRLIT_ga_pcrel
    0U,	// LDRLIT_ga_pcrel_ldr
    30461U,	// LDRSB
    31562U,	// LDRSBTi
    68426U,	// LDRSBTr
    67325U,	// LDRSB_POST
    67325U,	// LDRSB_PRE
    30876U,	// LDRSH
    31597U,	// LDRSHTi
    68461U,	// LDRSHTr
    67740U,	// LDRSH_POST
    67740U,	// LDRSH_PRE
    281485U,	// LDRT_POST
    68493U,	// LDRT_POST_IMM
    68493U,	// LDRT_POST_REG
    68217U,	// LDR_POST_IMM
    68217U,	// LDR_POST_REG
    31353U,	// LDR_PRE_IMM
    68217U,	// LDR_PRE_REG
    27257U,	// LDRcp
    27257U,	// LDRi12
    31353U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    268687U,	// LSLi
    268687U,	// LSLr
    268969U,	// LSRi
    268969U,	// LSRr
    2197858928U,	// MCR
    17478045U,	// MCR2
    2197883544U,	// MCRR
    17478051U,	// MCRR2
    0U,	// MEMCPY
    9831U,	// MLA
    0U,	// MLAv5
    31451U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    1350646U,	// MOVPCLR
    0U,	// MOVPCRX
    27587U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    72694U,	// MOVi
    19467U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    72694U,	// MOVr
    72694U,	// MOVr_TC
    7158U,	// MOVsi
    11254U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    201369481U,	// MRC
    74116U,	// MRC2
    218171277U,	// MRRC
    17478026U,	// MRRC2
    35581U,	// MRS
    19197U,	// MRSbanked
    1073777405U,	// MRSsys
    2382383790U,	// MSR
    251677358U,	// MSRbanked
    2382383790U,	// MSRi
    6559U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    72233U,	// MVNi
    72233U,	// MVNr
    6697U,	// MVNsi
    10793U,	// MVNsr
    6814U,	// ORRri
    6814U,	// ORRrr
    10910U,	// ORRrsi
    15006U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    31529U,	// PKHBT
    30474U,	// PKHTB
    78936U,	// PLDWi12
    83032U,	// PLDWrs
    78817U,	// PLDi12
    82913U,	// PLDrs
    78852U,	// PLIi12
    82948U,	// PLIrs
    26569U,	// QADD
    26000U,	// QADD16
    26103U,	// QADD8
    27845U,	// QASX
    26543U,	// QDADD
    26415U,	// QDSUB
    27704U,	// QSAX
    26428U,	// QSUB
    25962U,	// QSUB16
    26064U,	// QSUB8
    19316U,	// RBIT
    19426U,	// REV
    17844U,	// REV16
    18599U,	// REVSH
    414624U,	// RFEDA
    1463200U,	// RFEDA_UPD
    414655U,	// RFEDB
    1463231U,	// RFEDB_UPD
    414631U,	// RFEIA
    1463207U,	// RFEIA_UPD
    414662U,	// RFEIB
    1463238U,	// RFEIB_UPD
    268948U,	// RORi
    268948U,	// RORr
    0U,	// RRX
    335028U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    5887U,	// RSBri
    5887U,	// RSBrr
    9983U,	// RSBrsi
    14079U,	// RSBrsr
    6034U,	// RSCri
    6034U,	// RSCrr
    10130U,	// RSCrsi
    14226U,	// RSCrsr
    26007U,	// SADD16
    26109U,	// SADD8
    27850U,	// SASX
    6000U,	// SBCri
    6000U,	// SBCrr
    10096U,	// SBCrsi
    14192U,	// SBCrsr
    31910U,	// SBFX
    27622U,	// SDIV
    26954U,	// SEL
    87014U,	// SETEND
    414747U,	// SETPAN
    16928834U,	// SHA1C
    1107447884U,	// SHA1H
    16928866U,	// SHA1M
    16928876U,	// SHA1P
    16928769U,	// SHA1SU0
    1090670619U,	// SHA1SU1
    16928854U,	// SHA256H
    16928821U,	// SHA256H2
    1090670605U,	// SHA256SU0
    16928807U,	// SHA256SU1
    25983U,	// SHADD16
    26088U,	// SHADD8
    27832U,	// SHASX
    27691U,	// SHSAX
    25945U,	// SHSUB16
    26049U,	// SHSUB8
    1073776517U,	// SMC
    30365U,	// SMLABB
    31522U,	// SMLABT
    30622U,	// SMLAD
    31836U,	// SMLADX
    92432U,	// SMLAL
    30372U,	// SMLALBB
    31535U,	// SMLALBT
    30675U,	// SMLALD
    31850U,	// SMLALDX
    30480U,	// SMLALTB
    31657U,	// SMLALTT
    0U,	// SMLALv5
    30467U,	// SMLATB
    31650U,	// SMLATT
    30534U,	// SMLAWB
    31688U,	// SMLAWT
    30708U,	// SMLSD
    31866U,	// SMLSDX
    30686U,	// SMLSLD
    31858U,	// SMLSLDX
    30309U,	// SMMLA
    31337U,	// SMMLAR
    31449U,	// SMMLS
    31398U,	// SMMLSR
    27037U,	// SMMUL
    27272U,	// SMMULR
    26532U,	// SMUAD
    27747U,	// SMUADX
    26284U,	// SMULBB
    27447U,	// SMULBT
    10612U,	// SMULL
    0U,	// SMULLv5
    26392U,	// SMULTB
    27569U,	// SMULTT
    26445U,	// SMULWB
    27599U,	// SMULWT
    26618U,	// SMUSD
    27777U,	// SMUSDX
    0U,	// SPACE
    414882U,	// SRSDA
    414834U,	// SRSDA_UPD
    414904U,	// SRSDB
    414858U,	// SRSDB_UPD
    414893U,	// SRSIA
    414846U,	// SRSIA_UPD
    414915U,	// SRSIB
    414870U,	// SRSIB_UPD
    31512U,	// SSAT
    26021U,	// SSAT16
    27709U,	// SSAX
    25969U,	// SSUB16
    26070U,	// SSUB8
    152220688U,	// STC2L_OFFSET
    1242739728U,	// STC2L_OPTION
    2316481552U,	// STC2L_POST
    185775120U,	// STC2L_PRE
    152220049U,	// STC2_OFFSET
    1242739089U,	// STC2_OPTION
    2316480913U,	// STC2_POST
    185774481U,	// STC2_PRE
    3271588146U,	// STCL_OFFSET
    3271588146U,	// STCL_OPTION
    3271588146U,	// STCL_POST
    3271588146U,	// STCL_PRE
    3271587734U,	// STC_OFFSET
    3271587734U,	// STC_OPTION
    3271587734U,	// STC_POST
    3271587734U,	// STC_PRE
    18841U,	// STL
    18141U,	// STLB
    27790U,	// STLEX
    26459U,	// STLEXB
    26631U,	// STLEXD
    26814U,	// STLEXH
    18547U,	// STLH
    34373U,	// STMDA
    33572421U,	// STMDA_UPD
    34501U,	// STMDB
    33572549U,	// STMDB_UPD
    35256U,	// STMIA
    33573304U,	// STMIA_UPD
    34519U,	// STMIB
    33572567U,	// STMIB_UPD
    281412U,	// STRBT_POST
    33622852U,	// STRBT_POST_IMM
    33622852U,	// STRBT_POST_REG
    33621744U,	// STRB_POST_IMM
    33621744U,	// STRB_POST_REG
    33584880U,	// STRB_PRE_IMM
    33621744U,	// STRB_PRE_REG
    26352U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    30448U,	// STRBrs
    67567U,	// STRD
    33597423U,	// STRD_POST
    33597423U,	// STRD_PRE
    27808U,	// STREX
    26473U,	// STREXB
    26645U,	// STREXD
    26828U,	// STREXH
    30862U,	// STRH
    33586023U,	// STRHTi
    33622887U,	// STRHTr
    33622158U,	// STRH_POST
    33622158U,	// STRH_PRE
    0U,	// STRH_preidx
    281496U,	// STRT_POST
    33622936U,	// STRT_POST_IMM
    33622936U,	// STRT_POST_REG
    33622714U,	// STR_POST_IMM
    33622714U,	// STR_POST_REG
    33585850U,	// STR_PRE_IMM
    33622714U,	// STR_PRE_REG
    27322U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    31418U,	// STRrs
    0U,	// SUBS_PC_LR
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    5937U,	// SUBri
    5937U,	// SUBrr
    10033U,	// SUBrsi
    14129U,	// SUBrsr
    1073776538U,	// SVC
    27223U,	// SWP
    26342U,	// SWPB
    30353U,	// SXTAB
    30011U,	// SXTAB16
    30819U,	// SXTAH
    26405U,	// SXTB
    25931U,	// SXTB16
    26797U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPr
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    19045U,	// TEQri
    19045U,	// TEQrr
    27237U,	// TEQrsi
    31333U,	// TEQrsr
    0U,	// TPsoft
    2618U,	// TRAP
    2618U,	// TRAPNaCl
    19358U,	// TSTri
    19358U,	// TSTrr
    27550U,	// TSTrsi
    31646U,	// TSTrsr
    26014U,	// UADD16
    26115U,	// UADD8
    27855U,	// UASX
    31915U,	// UBFX
    414702U,	// UDF
    27627U,	// UDIV
    25991U,	// UHADD16
    26095U,	// UHADD8
    27838U,	// UHASX
    27697U,	// UHSAX
    25953U,	// UHSUB16
    26056U,	// UHSUB8
    30965U,	// UMAAL
    92438U,	// UMLAL
    0U,	// UMLALv5
    10618U,	// UMULL
    0U,	// UMULLv5
    25999U,	// UQADD16
    26102U,	// UQADD8
    27844U,	// UQASX
    27703U,	// UQSAX
    25961U,	// UQSUB16
    26063U,	// UQSUB8
    26082U,	// USAD8
    30138U,	// USADA8
    31517U,	// USAT
    26028U,	// USAT16
    27714U,	// USAX
    25976U,	// USUB16
    26076U,	// USUB8
    30359U,	// UXTAB
    30019U,	// UXTAB16
    30825U,	// UXTAH
    26410U,	// UXTB
    25938U,	// UXTB16
    26802U,	// UXTH
    18381051U,	// VABALsv2i64
    18512123U,	// VABALsv4i32
    18643195U,	// VABALsv8i16
    18774267U,	// VABALuv2i64
    18905339U,	// VABALuv4i32
    19036411U,	// VABALuv8i16
    18642486U,	// VABAsv16i8
    18380342U,	// VABAsv2i32
    18511414U,	// VABAsv4i16
    18380342U,	// VABAsv4i32
    18511414U,	// VABAsv8i16
    18642486U,	// VABAsv8i8
    19035702U,	// VABAuv16i8
    18773558U,	// VABAuv2i32
    18904630U,	// VABAuv4i16
    18773558U,	// VABAuv4i32
    18904630U,	// VABAuv8i16
    19035702U,	// VABAuv8i8
    35154231U,	// VABDLsv2i64
    35285303U,	// VABDLsv4i32
    35416375U,	// VABDLsv8i16
    35547447U,	// VABDLuv2i64
    35678519U,	// VABDLuv4i32
    35809591U,	// VABDLuv8i16
    2249090986U,	// VABDfd
    2249090986U,	// VABDfq
    35940266U,	// VABDhd
    35940266U,	// VABDhq
    35415978U,	// VABDsv16i8
    35153834U,	// VABDsv2i32
    35284906U,	// VABDsv4i16
    35153834U,	// VABDsv4i32
    35284906U,	// VABDsv8i16
    35415978U,	// VABDsv8i8
    35809194U,	// VABDuv16i8
    35547050U,	// VABDuv2i32
    35678122U,	// VABDuv4i16
    35547050U,	// VABDuv4i32
    35678122U,	// VABDuv8i16
    35809194U,	// VABDuv8i8
    2248952522U,	// VABSD
    2249083594U,	// VABSS
    2249083594U,	// VABSfd
    2249083594U,	// VABSfq
    1109674698U,	// VABShd
    1109674698U,	// VABShq
    1109150410U,	// VABSv16i8
    1108888266U,	// VABSv2i32
    1109019338U,	// VABSv4i16
    1108888266U,	// VABSv4i32
    1109019338U,	// VABSv8i16
    1109150410U,	// VABSv8i8
    2249091100U,	// VACGEfd
    2249091100U,	// VACGEfq
    35940380U,	// VACGEhd
    35940380U,	// VACGEhq
    2249091926U,	// VACGTfd
    2249091926U,	// VACGTfq
    35941206U,	// VACGThd
    35941206U,	// VACGThq
    2248959950U,	// VADDD
    36071891U,	// VADDHNv2i32
    36202963U,	// VADDHNv4i16
    36334035U,	// VADDHNv8i8
    35154244U,	// VADDLsv2i64
    35285316U,	// VADDLsv4i32
    35416388U,	// VADDLsv8i16
    35547460U,	// VADDLuv2i64
    35678532U,	// VADDLuv4i32
    35809604U,	// VADDLuv8i16
    2249091022U,	// VADDS
    35154944U,	// VADDWsv2i64
    35286016U,	// VADDWsv4i32
    35417088U,	// VADDWsv8i16
    35548160U,	// VADDWuv2i64
    35679232U,	// VADDWuv4i32
    35810304U,	// VADDWuv8i16
    2249091022U,	// VADDfd
    2249091022U,	// VADDfq
    35940302U,	// VADDhd
    35940302U,	// VADDhq
    36464590U,	// VADDv16i8
    36071374U,	// VADDv1i64
    36202446U,	// VADDv2i32
    36071374U,	// VADDv2i64
    36333518U,	// VADDv4i16
    36202446U,	// VADDv4i32
    36333518U,	// VADDv8i16
    36464590U,	// VADDv8i8
    26597U,	// VANDd
    26597U,	// VANDq
    26496U,	// VBICd
    271083392U,	// VBICiv2i32
    271214464U,	// VBICiv4i16
    271083392U,	// VBICiv4i32
    271214464U,	// VBICiv8i16
    26496U,	// VBICq
    30785U,	// VBIFd
    30785U,	// VBIFq
    31609U,	// VBITd
    31609U,	// VBITq
    31110U,	// VBSLd
    31110U,	// VBSLq
    2249091680U,	// VCEQfd
    2249091680U,	// VCEQfq
    35940960U,	// VCEQhd
    35940960U,	// VCEQhq
    36465248U,	// VCEQv16i8
    36203104U,	// VCEQv2i32
    36334176U,	// VCEQv4i16
    36203104U,	// VCEQv4i32
    36334176U,	// VCEQv8i16
    36465248U,	// VCEQv8i8
    3257682528U,	// VCEQzv16i8
    2249083488U,	// VCEQzv2f32
    3257420384U,	// VCEQzv2i32
    3257158240U,	// VCEQzv4f16
    2249083488U,	// VCEQzv4f32
    3257551456U,	// VCEQzv4i16
    3257420384U,	// VCEQzv4i32
    3257158240U,	// VCEQzv8f16
    3257551456U,	// VCEQzv8i16
    3257682528U,	// VCEQzv8i8
    2249091106U,	// VCGEfd
    2249091106U,	// VCGEfq
    35940386U,	// VCGEhd
    35940386U,	// VCGEhq
    35416098U,	// VCGEsv16i8
    35153954U,	// VCGEsv2i32
    35285026U,	// VCGEsv4i16
    35153954U,	// VCGEsv4i32
    35285026U,	// VCGEsv8i16
    35416098U,	// VCGEsv8i8
    35809314U,	// VCGEuv16i8
    35547170U,	// VCGEuv2i32
    35678242U,	// VCGEuv4i16
    35547170U,	// VCGEuv4i32
    35678242U,	// VCGEuv8i16
    35809314U,	// VCGEuv8i8
    3256633378U,	// VCGEzv16i8
    2249082914U,	// VCGEzv2f32
    3256371234U,	// VCGEzv2i32
    3257157666U,	// VCGEzv4f16
    2249082914U,	// VCGEzv4f32
    3256502306U,	// VCGEzv4i16
    3256371234U,	// VCGEzv4i32
    3257157666U,	// VCGEzv8f16
    3256502306U,	// VCGEzv8i16
    3256633378U,	// VCGEzv8i8
    2249091932U,	// VCGTfd
    2249091932U,	// VCGTfq
    35941212U,	// VCGThd
    35941212U,	// VCGThq
    35416924U,	// VCGTsv16i8
    35154780U,	// VCGTsv2i32
    35285852U,	// VCGTsv4i16
    35154780U,	// VCGTsv4i32
    35285852U,	// VCGTsv8i16
    35416924U,	// VCGTsv8i8
    35810140U,	// VCGTuv16i8
    35547996U,	// VCGTuv2i32
    35679068U,	// VCGTuv4i16
    35547996U,	// VCGTuv4i32
    35679068U,	// VCGTuv8i16
    35810140U,	// VCGTuv8i8
    3256634204U,	// VCGTzv16i8
    2249083740U,	// VCGTzv2f32
    3256372060U,	// VCGTzv2i32
    3257158492U,	// VCGTzv4f16
    2249083740U,	// VCGTzv4f32
    3256503132U,	// VCGTzv4i16
    3256372060U,	// VCGTzv4i32
    3257158492U,	// VCGTzv8f16
    3256503132U,	// VCGTzv8i16
    3256634204U,	// VCGTzv8i8
    3256633383U,	// VCLEzv16i8
    2249082919U,	// VCLEzv2f32
    3256371239U,	// VCLEzv2i32
    3257157671U,	// VCLEzv4f16
    2249082919U,	// VCLEzv4f32
    3256502311U,	// VCLEzv4i16
    3256371239U,	// VCLEzv4i32
    3257157671U,	// VCLEzv8f16
    3256502311U,	// VCLEzv8i16
    3256633383U,	// VCLEzv8i8
    1109150420U,	// VCLSv16i8
    1108888276U,	// VCLSv2i32
    1109019348U,	// VCLSv4i16
    1108888276U,	// VCLSv4i32
    1109019348U,	// VCLSv8i16
    1109150420U,	// VCLSv8i8
    3256634238U,	// VCLTzv16i8
    2249083774U,	// VCLTzv2f32
    3256372094U,	// VCLTzv2i32
    3257158526U,	// VCLTzv4f16
    2249083774U,	// VCLTzv4f32
    3256503166U,	// VCLTzv4i16
    3256372094U,	// VCLTzv4i32
    3257158526U,	// VCLTzv8f16
    3256503166U,	// VCLTzv8i16
    3256634238U,	// VCLTzv8i8
    1110199515U,	// VCLZv16i8
    1109937371U,	// VCLZv2i32
    1110068443U,	// VCLZv4i16
    1109937371U,	// VCLZv4i32
    1110068443U,	// VCLZv8i16
    1110199515U,	// VCLZv8i8
    2248952392U,	// VCMPD
    2248951859U,	// VCMPED
    2249082931U,	// VCMPES
    286033971U,	// VCMPEZD
    286165043U,	// VCMPEZS
    2249083464U,	// VCMPS
    286034504U,	// VCMPZD
    286165576U,	// VCMPZS
    3033987U,	// VCNTd
    3033987U,	// VCNTq
    1107447926U,	// VCVTANSDf
    1107448485U,	// VCVTANSDh
    1107447926U,	// VCVTANSQf
    1107448485U,	// VCVTANSQh
    1107447986U,	// VCVTANUDf
    1107448545U,	// VCVTANUDh
    1107447986U,	// VCVTANUQf
    1107448545U,	// VCVTANUQh
    1107448234U,	// VCVTASD
    1107447926U,	// VCVTASS
    1107448294U,	// VCVTAUD
    1107447986U,	// VCVTAUS
    3163935U,	// VCVTBDH
    3295007U,	// VCVTBHD
    3426079U,	// VCVTBHS
    3557151U,	// VCVTBSH
    3689406U,	// VCVTDS
    1107447941U,	// VCVTMNSDf
    1107448500U,	// VCVTMNSDh
    1107447941U,	// VCVTMNSQf
    1107448500U,	// VCVTMNSQh
    1107448001U,	// VCVTMNUDf
    1107448560U,	// VCVTMNUDh
    1107448001U,	// VCVTMNUQf
    1107448560U,	// VCVTMNUQh
    1107448249U,	// VCVTMSD
    1107447941U,	// VCVTMSS
    1107448309U,	// VCVTMUD
    1107448001U,	// VCVTMUS
    1107447956U,	// VCVTNNSDf
    1107448515U,	// VCVTNNSDh
    1107447956U,	// VCVTNNSQf
    1107448515U,	// VCVTNNSQh
    1107448016U,	// VCVTNNUDf
    1107448575U,	// VCVTNNUDh
    1107448016U,	// VCVTNNUQf
    1107448575U,	// VCVTNNUQh
    1107448264U,	// VCVTNSD
    1107447956U,	// VCVTNSS
    1107448324U,	// VCVTNUD
    1107448016U,	// VCVTNUS
    1107447971U,	// VCVTPNSDf
    1107448530U,	// VCVTPNSDh
    1107447971U,	// VCVTPNSQf
    1107448530U,	// VCVTPNSQh
    1107448031U,	// VCVTPNUDf
    1107448590U,	// VCVTPNUDh
    1107448031U,	// VCVTPNUQf
    1107448590U,	// VCVTPNUQh
    1107448279U,	// VCVTPSD
    1107447971U,	// VCVTPSS
    1107448339U,	// VCVTPUD
    1107448031U,	// VCVTPUS
    3820478U,	// VCVTSD
    3165112U,	// VCVTTDH
    3296184U,	// VCVTTHD
    3427256U,	// VCVTTHS
    3558328U,	// VCVTTSH
    3558334U,	// VCVTf2h
    305941438U,	// VCVTf2sd
    305941438U,	// VCVTf2sq
    306072510U,	// VCVTf2ud
    306072510U,	// VCVTf2uq
    104623038U,	// VCVTf2xsd
    104623038U,	// VCVTf2xsq
    104754110U,	// VCVTf2xud
    104754110U,	// VCVTf2xuq
    3427262U,	// VCVTh2f
    306203582U,	// VCVTh2sd
    306203582U,	// VCVTh2sq
    306334654U,	// VCVTh2ud
    306334654U,	// VCVTh2uq
    104885182U,	// VCVTh2xsd
    104885182U,	// VCVTh2xsq
    105016254U,	// VCVTh2xud
    105016254U,	// VCVTh2xuq
    306465726U,	// VCVTs2fd
    306465726U,	// VCVTs2fq
    306596798U,	// VCVTs2hd
    306596798U,	// VCVTs2hq
    306727870U,	// VCVTu2fd
    306727870U,	// VCVTu2fq
    306858942U,	// VCVTu2hd
    306858942U,	// VCVTu2hq
    105147326U,	// VCVTxs2fd
    105147326U,	// VCVTxs2fq
    105278398U,	// VCVTxs2hd
    105278398U,	// VCVTxs2hq
    105409470U,	// VCVTxu2fd
    105409470U,	// VCVTxu2fq
    105540542U,	// VCVTxu2hd
    105540542U,	// VCVTxu2hq
    2248961008U,	// VDIVD
    2249092080U,	// VDIVS
    4999761U,	// VDUP16d
    4999761U,	// VDUP16q
    5130833U,	// VDUP32d
    5130833U,	// VDUP32q
    3033681U,	// VDUP8d
    3033681U,	// VDUP8q
    5007953U,	// VDUPLN16d
    5007953U,	// VDUPLN16q
    5139025U,	// VDUPLN32d
    5139025U,	// VDUPLN32q
    3041873U,	// VDUPLN8d
    3041873U,	// VDUPLN8q
    27279U,	// VEORd
    27279U,	// VEORq
    5012438U,	// VEXTd16
    5143510U,	// VEXTd32
    3046358U,	// VEXTd8
    5012438U,	// VEXTq16
    5143510U,	// VEXTq32
    5274582U,	// VEXTq64
    3046358U,	// VEXTq8
    101480054U,	// VFMAD
    101611126U,	// VFMAS
    101611126U,	// VFMAfd
    101611126U,	// VFMAfq
    19166838U,	// VFMAhd
    19166838U,	// VFMAhq
    101481194U,	// VFMSD
    101612266U,	// VFMSS
    101612266U,	// VFMSfd
    101612266U,	// VFMSfq
    19167978U,	// VFMShd
    19167978U,	// VFMShq
    101480059U,	// VFNMAD
    101611131U,	// VFNMAS
    101481199U,	// VFNMSD
    101612271U,	// VFNMSS
    5139445U,	// VGETLNi32
    1109027829U,	// VGETLNs16
    1109158901U,	// VGETLNs8
    1109421045U,	// VGETLNu16
    1109552117U,	// VGETLNu8
    35415996U,	// VHADDsv16i8
    35153852U,	// VHADDsv2i32
    35284924U,	// VHADDsv4i16
    35153852U,	// VHADDsv4i32
    35284924U,	// VHADDsv8i16
    35415996U,	// VHADDsv8i8
    35809212U,	// VHADDuv16i8
    35547068U,	// VHADDuv2i32
    35678140U,	// VHADDuv4i16
    35547068U,	// VHADDuv4i32
    35678140U,	// VHADDuv8i16
    35809212U,	// VHADDuv8i8
    35415861U,	// VHSUBsv16i8
    35153717U,	// VHSUBsv2i32
    35284789U,	// VHSUBsv4i16
    35153717U,	// VHSUBsv4i32
    35284789U,	// VHSUBsv8i16
    35415861U,	// VHSUBsv8i8
    35809077U,	// VHSUBuv16i8
    35546933U,	// VHSUBuv2i32
    35678005U,	// VHSUBuv4i16
    35546933U,	// VHSUBuv4i32
    35678005U,	// VHSUBuv8i16
    35809077U,	// VHSUBuv8i8
    2471257294U,	// VLD1DUPd16
    3545003214U,	// VLD1DUPd16wb_fixed
    3545040078U,	// VLD1DUPd16wb_register
    2471388366U,	// VLD1DUPd32
    3545134286U,	// VLD1DUPd32wb_fixed
    3545171150U,	// VLD1DUPd32wb_register
    2469291214U,	// VLD1DUPd8
    3543037134U,	// VLD1DUPd8wb_fixed
    3543073998U,	// VLD1DUPd8wb_register
    2488034510U,	// VLD1DUPq16
    3561780430U,	// VLD1DUPq16wb_fixed
    3561817294U,	// VLD1DUPq16wb_register
    2488165582U,	// VLD1DUPq32
    3561911502U,	// VLD1DUPq32wb_fixed
    3561948366U,	// VLD1DUPq32wb_register
    2486068430U,	// VLD1DUPq8
    3559814350U,	// VLD1DUPq8wb_fixed
    3559851214U,	// VLD1DUPq8wb_register
    5440718U,	// VLD1LNd16
    5469390U,	// VLD1LNd16_UPD
    5571790U,	// VLD1LNd32
    5600462U,	// VLD1LNd32_UPD
    5702862U,	// VLD1LNd8
    5731534U,	// VLD1LNd8_UPD
    5010638U,	// VLD1LNdAsm_16
    5141710U,	// VLD1LNdAsm_32
    3044558U,	// VLD1LNdAsm_8
    5010638U,	// VLD1LNdWB_fixed_Asm_16
    5141710U,	// VLD1LNdWB_fixed_Asm_32
    3044558U,	// VLD1LNdWB_fixed_Asm_8
    5047502U,	// VLD1LNdWB_register_Asm_16
    5178574U,	// VLD1LNdWB_register_Asm_32
    3081422U,	// VLD1LNdWB_register_Asm_8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    2504811726U,	// VLD1d16
    2521588942U,	// VLD1d16Q
    3595334862U,	// VLD1d16Qwb_fixed
    3595371726U,	// VLD1d16Qwb_register
    2538366158U,	// VLD1d16T
    3612112078U,	// VLD1d16Twb_fixed
    3612148942U,	// VLD1d16Twb_register
    3578557646U,	// VLD1d16wb_fixed
    3578594510U,	// VLD1d16wb_register
    2504942798U,	// VLD1d32
    2521720014U,	// VLD1d32Q
    3595465934U,	// VLD1d32Qwb_fixed
    3595502798U,	// VLD1d32Qwb_register
    2538497230U,	// VLD1d32T
    3612243150U,	// VLD1d32Twb_fixed
    3612280014U,	// VLD1d32Twb_register
    3578688718U,	// VLD1d32wb_fixed
    3578725582U,	// VLD1d32wb_register
    2505073870U,	// VLD1d64
    2521851086U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    0U,	// VLD1d64QPseudoWB_fixed
    0U,	// VLD1d64QPseudoWB_register
    3595597006U,	// VLD1d64Qwb_fixed
    3595633870U,	// VLD1d64Qwb_register
    2538628302U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    0U,	// VLD1d64TPseudoWB_fixed
    0U,	// VLD1d64TPseudoWB_register
    3612374222U,	// VLD1d64Twb_fixed
    3612411086U,	// VLD1d64Twb_register
    3578819790U,	// VLD1d64wb_fixed
    3578856654U,	// VLD1d64wb_register
    2502845646U,	// VLD1d8
    2519622862U,	// VLD1d8Q
    3593368782U,	// VLD1d8Qwb_fixed
    3593405646U,	// VLD1d8Qwb_register
    2536400078U,	// VLD1d8T
    3610145998U,	// VLD1d8Twb_fixed
    3610182862U,	// VLD1d8Twb_register
    3576591566U,	// VLD1d8wb_fixed
    3576628430U,	// VLD1d8wb_register
    2555143374U,	// VLD1q16
    3628889294U,	// VLD1q16wb_fixed
    3628926158U,	// VLD1q16wb_register
    2555274446U,	// VLD1q32
    3629020366U,	// VLD1q32wb_fixed
    3629057230U,	// VLD1q32wb_register
    2555405518U,	// VLD1q64
    3629151438U,	// VLD1q64wb_fixed
    3629188302U,	// VLD1q64wb_register
    2553177294U,	// VLD1q8
    3626923214U,	// VLD1q8wb_fixed
    3626960078U,	// VLD1q8wb_register
    2488034554U,	// VLD2DUPd16
    3561780474U,	// VLD2DUPd16wb_fixed
    3561817338U,	// VLD2DUPd16wb_register
    2571920634U,	// VLD2DUPd16x2
    3645666554U,	// VLD2DUPd16x2wb_fixed
    3645703418U,	// VLD2DUPd16x2wb_register
    2488165626U,	// VLD2DUPd32
    3561911546U,	// VLD2DUPd32wb_fixed
    3561948410U,	// VLD2DUPd32wb_register
    2572051706U,	// VLD2DUPd32x2
    3645797626U,	// VLD2DUPd32x2wb_fixed
    3645834490U,	// VLD2DUPd32x2wb_register
    2486068474U,	// VLD2DUPd8
    3559814394U,	// VLD2DUPd8wb_fixed
    3559851258U,	// VLD2DUPd8wb_register
    2569954554U,	// VLD2DUPd8x2
    3643700474U,	// VLD2DUPd8x2wb_fixed
    3643737338U,	// VLD2DUPd8x2wb_register
    5469434U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    5473530U,	// VLD2LNd16_UPD
    5600506U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    5604602U,	// VLD2LNd32_UPD
    5731578U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    5735674U,	// VLD2LNd8_UPD
    5010682U,	// VLD2LNdAsm_16
    5141754U,	// VLD2LNdAsm_32
    3044602U,	// VLD2LNdAsm_8
    5010682U,	// VLD2LNdWB_fixed_Asm_16
    5141754U,	// VLD2LNdWB_fixed_Asm_32
    3044602U,	// VLD2LNdWB_fixed_Asm_8
    5047546U,	// VLD2LNdWB_register_Asm_16
    5178618U,	// VLD2LNdWB_register_Asm_32
    3081466U,	// VLD2LNdWB_register_Asm_8
    5469434U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    5473530U,	// VLD2LNq16_UPD
    5600506U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    5604602U,	// VLD2LNq32_UPD
    5010682U,	// VLD2LNqAsm_16
    5141754U,	// VLD2LNqAsm_32
    5010682U,	// VLD2LNqWB_fixed_Asm_16
    5141754U,	// VLD2LNqWB_fixed_Asm_32
    5047546U,	// VLD2LNqWB_register_Asm_16
    5178618U,	// VLD2LNqWB_register_Asm_32
    2588697850U,	// VLD2b16
    3662443770U,	// VLD2b16wb_fixed
    3662480634U,	// VLD2b16wb_register
    2588828922U,	// VLD2b32
    3662574842U,	// VLD2b32wb_fixed
    3662611706U,	// VLD2b32wb_register
    2586731770U,	// VLD2b8
    3660477690U,	// VLD2b8wb_fixed
    3660514554U,	// VLD2b8wb_register
    2555143418U,	// VLD2d16
    3628889338U,	// VLD2d16wb_fixed
    3628926202U,	// VLD2d16wb_register
    2555274490U,	// VLD2d32
    3629020410U,	// VLD2d32wb_fixed
    3629057274U,	// VLD2d32wb_register
    2553177338U,	// VLD2d8
    3626923258U,	// VLD2d8wb_fixed
    3626960122U,	// VLD2d8wb_register
    2521588986U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    3595334906U,	// VLD2q16wb_fixed
    3595371770U,	// VLD2q16wb_register
    2521720058U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    3595465978U,	// VLD2q32wb_fixed
    3595502842U,	// VLD2q32wb_register
    2519622906U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    3593368826U,	// VLD2q8wb_fixed
    3593405690U,	// VLD2q8wb_register
    1079182618U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    1079211290U,	// VLD3DUPd16_UPD
    1079313690U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    1079342362U,	// VLD3DUPd32_UPD
    1079444762U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    1079473434U,	// VLD3DUPd8_UPD
    1531733274U,	// VLD3DUPdAsm_16
    1531864346U,	// VLD3DUPdAsm_32
    1529767194U,	// VLD3DUPdAsm_8
    2605475098U,	// VLD3DUPdWB_fixed_Asm_16
    2605606170U,	// VLD3DUPdWB_fixed_Asm_32
    2603509018U,	// VLD3DUPdWB_fixed_Asm_8
    457995546U,	// VLD3DUPdWB_register_Asm_16
    458126618U,	// VLD3DUPdWB_register_Asm_32
    456029466U,	// VLD3DUPdWB_register_Asm_8
    1079182618U,	// VLD3DUPq16
    1079211290U,	// VLD3DUPq16_UPD
    1079313690U,	// VLD3DUPq32
    1079342362U,	// VLD3DUPq32_UPD
    1079444762U,	// VLD3DUPq8
    1079473434U,	// VLD3DUPq8_UPD
    1548510490U,	// VLD3DUPqAsm_16
    1548641562U,	// VLD3DUPqAsm_32
    1546544410U,	// VLD3DUPqAsm_8
    2622252314U,	// VLD3DUPqWB_fixed_Asm_16
    2622383386U,	// VLD3DUPqWB_fixed_Asm_32
    2620286234U,	// VLD3DUPqWB_fixed_Asm_8
    474772762U,	// VLD3DUPqWB_register_Asm_16
    474903834U,	// VLD3DUPqWB_register_Asm_32
    472806682U,	// VLD3DUPqWB_register_Asm_8
    5473562U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    5477658U,	// VLD3LNd16_UPD
    5604634U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    5608730U,	// VLD3LNd32_UPD
    5735706U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    5739802U,	// VLD3LNd8_UPD
    5010714U,	// VLD3LNdAsm_16
    5141786U,	// VLD3LNdAsm_32
    3044634U,	// VLD3LNdAsm_8
    5010714U,	// VLD3LNdWB_fixed_Asm_16
    5141786U,	// VLD3LNdWB_fixed_Asm_32
    3044634U,	// VLD3LNdWB_fixed_Asm_8
    5047578U,	// VLD3LNdWB_register_Asm_16
    5178650U,	// VLD3LNdWB_register_Asm_32
    3081498U,	// VLD3LNdWB_register_Asm_8
    5473562U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    5477658U,	// VLD3LNq16_UPD
    5604634U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    5608730U,	// VLD3LNq32_UPD
    5010714U,	// VLD3LNqAsm_16
    5141786U,	// VLD3LNqAsm_32
    5010714U,	// VLD3LNqWB_fixed_Asm_16
    5141786U,	// VLD3LNqWB_fixed_Asm_32
    5047578U,	// VLD3LNqWB_register_Asm_16
    5178650U,	// VLD3LNqWB_register_Asm_32
    5440794U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    5469466U,	// VLD3d16_UPD
    5571866U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    5600538U,	// VLD3d32_UPD
    5702938U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    5731610U,	// VLD3d8_UPD
    2538366234U,	// VLD3dAsm_16
    2538497306U,	// VLD3dAsm_32
    2536400154U,	// VLD3dAsm_8
    2538366234U,	// VLD3dWB_fixed_Asm_16
    2538497306U,	// VLD3dWB_fixed_Asm_32
    2536400154U,	// VLD3dWB_fixed_Asm_8
    2538370330U,	// VLD3dWB_register_Asm_16
    2538501402U,	// VLD3dWB_register_Asm_32
    2536404250U,	// VLD3dWB_register_Asm_8
    5440794U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    5469466U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    5571866U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    5600538U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    5702938U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    5731610U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    1565287706U,	// VLD3qAsm_16
    1565418778U,	// VLD3qAsm_32
    1563321626U,	// VLD3qAsm_8
    2639029530U,	// VLD3qWB_fixed_Asm_16
    2639160602U,	// VLD3qWB_fixed_Asm_32
    2637063450U,	// VLD3qWB_fixed_Asm_8
    491549978U,	// VLD3qWB_register_Asm_16
    491681050U,	// VLD3qWB_register_Asm_32
    489583898U,	// VLD3qWB_register_Asm_8
    1079158065U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    1079223601U,	// VLD4DUPd16_UPD
    1079289137U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    1079354673U,	// VLD4DUPd32_UPD
    1079420209U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    1079485745U,	// VLD4DUPd8_UPD
    1582064945U,	// VLD4DUPdAsm_16
    1582196017U,	// VLD4DUPdAsm_32
    1580098865U,	// VLD4DUPdAsm_8
    2655806769U,	// VLD4DUPdWB_fixed_Asm_16
    2655937841U,	// VLD4DUPdWB_fixed_Asm_32
    2653840689U,	// VLD4DUPdWB_fixed_Asm_8
    508327217U,	// VLD4DUPdWB_register_Asm_16
    508458289U,	// VLD4DUPdWB_register_Asm_32
    506361137U,	// VLD4DUPdWB_register_Asm_8
    1079158065U,	// VLD4DUPq16
    1079223601U,	// VLD4DUPq16_UPD
    1079289137U,	// VLD4DUPq32
    1079354673U,	// VLD4DUPq32_UPD
    1079420209U,	// VLD4DUPq8
    1079485745U,	// VLD4DUPq8_UPD
    1598842161U,	// VLD4DUPqAsm_16
    1598973233U,	// VLD4DUPqAsm_32
    1596876081U,	// VLD4DUPqAsm_8
    2672583985U,	// VLD4DUPqWB_fixed_Asm_16
    2672715057U,	// VLD4DUPqWB_fixed_Asm_32
    2670617905U,	// VLD4DUPqWB_fixed_Asm_8
    525104433U,	// VLD4DUPqWB_register_Asm_16
    525235505U,	// VLD4DUPqWB_register_Asm_32
    523138353U,	// VLD4DUPqWB_register_Asm_8
    5477681U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    5485873U,	// VLD4LNd16_UPD
    5608753U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    5616945U,	// VLD4LNd32_UPD
    5739825U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    5748017U,	// VLD4LNd8_UPD
    5010737U,	// VLD4LNdAsm_16
    5141809U,	// VLD4LNdAsm_32
    3044657U,	// VLD4LNdAsm_8
    5010737U,	// VLD4LNdWB_fixed_Asm_16
    5141809U,	// VLD4LNdWB_fixed_Asm_32
    3044657U,	// VLD4LNdWB_fixed_Asm_8
    5047601U,	// VLD4LNdWB_register_Asm_16
    5178673U,	// VLD4LNdWB_register_Asm_32
    3081521U,	// VLD4LNdWB_register_Asm_8
    5477681U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    5485873U,	// VLD4LNq16_UPD
    5608753U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    5616945U,	// VLD4LNq32_UPD
    5010737U,	// VLD4LNqAsm_16
    5141809U,	// VLD4LNqAsm_32
    5010737U,	// VLD4LNqWB_fixed_Asm_16
    5141809U,	// VLD4LNqWB_fixed_Asm_32
    5047601U,	// VLD4LNqWB_register_Asm_16
    5178673U,	// VLD4LNqWB_register_Asm_32
    5416241U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    5481777U,	// VLD4d16_UPD
    5547313U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    5612849U,	// VLD4d32_UPD
    5678385U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    5743921U,	// VLD4d8_UPD
    2521589041U,	// VLD4dAsm_16
    2521720113U,	// VLD4dAsm_32
    2519622961U,	// VLD4dAsm_8
    2521589041U,	// VLD4dWB_fixed_Asm_16
    2521720113U,	// VLD4dWB_fixed_Asm_32
    2519622961U,	// VLD4dWB_fixed_Asm_8
    2521593137U,	// VLD4dWB_register_Asm_16
    2521724209U,	// VLD4dWB_register_Asm_32
    2519627057U,	// VLD4dWB_register_Asm_8
    5416241U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    5481777U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    5547313U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    5612849U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    5678385U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    5743921U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    1615619377U,	// VLD4qAsm_16
    1615750449U,	// VLD4qAsm_32
    1613653297U,	// VLD4qAsm_8
    2689361201U,	// VLD4qWB_fixed_Asm_16
    2689492273U,	// VLD4qWB_fixed_Asm_32
    2687395121U,	// VLD4qWB_fixed_Asm_8
    541881649U,	// VLD4qWB_register_Asm_16
    542012721U,	// VLD4qWB_register_Asm_32
    539915569U,	// VLD4qWB_register_Asm_8
    33572541U,	// VLDMDDB_UPD
    34385U,	// VLDMDIA
    33572433U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    33572541U,	// VLDMSDB_UPD
    34385U,	// VLDMSIA
    33572433U,	// VLDMSIA_UPD
    27256U,	// VLDRD
    27256U,	// VLDRS
    33706566U,	// VMAXNMD
    33706258U,	// VMAXNMNDf
    33706805U,	// VMAXNMNDh
    33706258U,	// VMAXNMNQf
    33706805U,	// VMAXNMNQh
    33706258U,	// VMAXNMS
    2249092134U,	// VMAXfd
    2249092134U,	// VMAXfq
    35941414U,	// VMAXhd
    35941414U,	// VMAXhq
    35417126U,	// VMAXsv16i8
    35154982U,	// VMAXsv2i32
    35286054U,	// VMAXsv4i16
    35154982U,	// VMAXsv4i32
    35286054U,	// VMAXsv8i16
    35417126U,	// VMAXsv8i8
    35810342U,	// VMAXuv16i8
    35548198U,	// VMAXuv2i32
    35679270U,	// VMAXuv4i16
    35548198U,	// VMAXuv4i32
    35679270U,	// VMAXuv8i16
    35810342U,	// VMAXuv8i8
    33706554U,	// VMINNMD
    33706246U,	// VMINNMNDf
    33706793U,	// VMINNMNDh
    33706246U,	// VMINNMNQf
    33706793U,	// VMINNMNQh
    33706246U,	// VMINNMS
    2249091552U,	// VMINfd
    2249091552U,	// VMINfq
    35940832U,	// VMINhd
    35940832U,	// VMINhq
    35416544U,	// VMINsv16i8
    35154400U,	// VMINsv2i32
    35285472U,	// VMINsv4i16
    35154400U,	// VMINsv4i32
    35285472U,	// VMINsv8i16
    35416544U,	// VMINsv8i8
    35809760U,	// VMINuv16i8
    35547616U,	// VMINuv2i32
    35678688U,	// VMINuv4i16
    35547616U,	// VMINuv4i32
    35678688U,	// VMINuv8i16
    35809760U,	// VMINuv8i8
    101480049U,	// VMLAD
    18417948U,	// VMLALslsv2i32
    18549020U,	// VMLALslsv4i16
    18811164U,	// VMLALsluv2i32
    18942236U,	// VMLALsluv4i16
    18381084U,	// VMLALsv2i64
    18512156U,	// VMLALsv4i32
    18643228U,	// VMLALsv8i16
    18774300U,	// VMLALuv2i64
    18905372U,	// VMLALuv4i32
    19036444U,	// VMLALuv8i16
    101611121U,	// VMLAS
    101611121U,	// VMLAfd
    101611121U,	// VMLAfq
    19166833U,	// VMLAhd
    19166833U,	// VMLAhq
    101647985U,	// VMLAslfd
    101647985U,	// VMLAslfq
    19203697U,	// VMLAslhd
    19203697U,	// VMLAslhq
    19465841U,	// VMLAslv2i32
    19596913U,	// VMLAslv4i16
    19465841U,	// VMLAslv4i32
    19596913U,	// VMLAslv8i16
    19691121U,	// VMLAv16i8
    19428977U,	// VMLAv2i32
    19560049U,	// VMLAv4i16
    19428977U,	// VMLAv4i32
    19560049U,	// VMLAv8i16
    19691121U,	// VMLAv8i8
    101481189U,	// VMLSD
    18418067U,	// VMLSLslsv2i32
    18549139U,	// VMLSLslsv4i16
    18811283U,	// VMLSLsluv2i32
    18942355U,	// VMLSLsluv4i16
    18381203U,	// VMLSLsv2i64
    18512275U,	// VMLSLsv4i32
    18643347U,	// VMLSLsv8i16
    18774419U,	// VMLSLuv2i64
    18905491U,	// VMLSLuv4i32
    19036563U,	// VMLSLuv8i16
    101612261U,	// VMLSS
    101612261U,	// VMLSfd
    101612261U,	// VMLSfq
    19167973U,	// VMLShd
    19167973U,	// VMLShq
    101649125U,	// VMLSslfd
    101649125U,	// VMLSslfq
    19204837U,	// VMLSslhd
    19204837U,	// VMLSslhq
    19466981U,	// VMLSslv2i32
    19598053U,	// VMLSslv4i16
    19466981U,	// VMLSslv4i32
    19598053U,	// VMLSslv8i16
    19692261U,	// VMLSv16i8
    19430117U,	// VMLSv2i32
    19561189U,	// VMLSv4i16
    19430117U,	// VMLSv4i32
    19561189U,	// VMLSv8i16
    19692261U,	// VMLSv8i8
    2248952821U,	// VMOVD
    0U,	// VMOVD0
    27637U,	// VMOVDRR
    0U,	// VMOVDcc
    1108887982U,	// VMOVLsv2i64
    1109019054U,	// VMOVLsv4i32
    1109150126U,	// VMOVLsv8i16
    1109281198U,	// VMOVLuv2i64
    1109412270U,	// VMOVLuv4i32
    1109543342U,	// VMOVLuv8i16
    1109805620U,	// VMOVNv2i32
    1109936692U,	// VMOVNv4i16
    1110067764U,	// VMOVNv8i8
    0U,	// VMOVQ0
    27637U,	// VMOVRRD
    31733U,	// VMOVRRS
    19445U,	// VMOVRS
    2249083893U,	// VMOVS
    19445U,	// VMOVSR
    31733U,	// VMOVSRR
    0U,	// VMOVScc
    271338485U,	// VMOVv16i8
    270945269U,	// VMOVv1i64
    3322825717U,	// VMOVv2f32
    271076341U,	// VMOVv2i32
    270945269U,	// VMOVv2i64
    3322825717U,	// VMOVv4f32
    271207413U,	// VMOVv4i16
    271076341U,	// VMOVv4i32
    271207413U,	// VMOVv8i16
    271338485U,	// VMOVv8i8
    3221261052U,	// VMRS
    35580U,	// VMRS_FPEXC
    1073777404U,	// VMRS_FPINST
    2147519228U,	// VMRS_FPINST2
    3221261052U,	// VMRS_FPSID
    35580U,	// VMRS_MVFR0
    1073777404U,	// VMRS_MVFR1
    2147519228U,	// VMRS_MVFR2
    5802669U,	// VMSR
    5933741U,	// VMSR_FPEXC
    6064813U,	// VMSR_FPINST
    6195885U,	// VMSR_FPINST2
    6326957U,	// VMSR_FPSID
    2248960425U,	// VMULD
    33706650U,	// VMULLp64
    6449536U,	// VMULLp8
    35158400U,	// VMULLslsv2i32
    35289472U,	// VMULLslsv4i16
    35551616U,	// VMULLsluv2i32
    35682688U,	// VMULLsluv4i16
    35154304U,	// VMULLsv2i64
    35285376U,	// VMULLsv4i32
    35416448U,	// VMULLsv8i16
    35547520U,	// VMULLuv2i64
    35678592U,	// VMULLuv4i32
    35809664U,	// VMULLuv8i16
    2249091497U,	// VMULS
    2249091497U,	// VMULfd
    2249091497U,	// VMULfq
    35940777U,	// VMULhd
    35940777U,	// VMULhq
    6449577U,	// VMULpd
    6449577U,	// VMULpq
    2249095593U,	// VMULslfd
    2249095593U,	// VMULslfq
    35944873U,	// VMULslhd
    35944873U,	// VMULslhq
    36207017U,	// VMULslv2i32
    36338089U,	// VMULslv4i16
    36207017U,	// VMULslv4i32
    36338089U,	// VMULslv8i16
    36465065U,	// VMULv16i8
    36202921U,	// VMULv2i32
    36333993U,	// VMULv4i16
    36202921U,	// VMULv4i32
    36333993U,	// VMULv8i16
    36465065U,	// VMULv8i8
    18984U,	// VMVNd
    18984U,	// VMVNq
    271075880U,	// VMVNv2i32
    271206952U,	// VMVNv4i16
    271075880U,	// VMVNv4i32
    271206952U,	// VMVNv8i16
    2248951888U,	// VNEGD
    2249082960U,	// VNEGS
    2249082960U,	// VNEGf32q
    2249082960U,	// VNEGfd
    1109674064U,	// VNEGhd
    1109674064U,	// VNEGhq
    1109018704U,	// VNEGs16d
    1109018704U,	// VNEGs16q
    1108887632U,	// VNEGs32d
    1108887632U,	// VNEGs32q
    1109149776U,	// VNEGs8d
    1109149776U,	// VNEGs8q
    101480043U,	// VNMLAD
    101611115U,	// VNMLAS
    101481183U,	// VNMLSD
    101612255U,	// VNMLSS
    2248960419U,	// VNMULD
    2249091491U,	// VNMULS
    27141U,	// VORNd
    27141U,	// VORNq
    27293U,	// VORRd
    271084189U,	// VORRiv2i32
    271215261U,	// VORRiv4i16
    271084189U,	// VORRiv4i32
    271215261U,	// VORRiv8i16
    27293U,	// VORRq
    1092380929U,	// VPADALsv16i8
    1092118785U,	// VPADALsv2i32
    1092249857U,	// VPADALsv4i16
    1092118785U,	// VPADALsv4i32
    1092249857U,	// VPADALsv8i16
    1092380929U,	// VPADALsv8i8
    1092774145U,	// VPADALuv16i8
    1092512001U,	// VPADALuv2i32
    1092643073U,	// VPADALuv4i16
    1092512001U,	// VPADALuv4i32
    1092643073U,	// VPADALuv8i16
    1092774145U,	// VPADALuv8i8
    1109150013U,	// VPADDLsv16i8
    1108887869U,	// VPADDLsv2i32
    1109018941U,	// VPADDLsv4i16
    1108887869U,	// VPADDLsv4i32
    1109018941U,	// VPADDLsv8i16
    1109150013U,	// VPADDLsv8i8
    1109543229U,	// VPADDLuv16i8
    1109281085U,	// VPADDLuv2i32
    1109412157U,	// VPADDLuv4i16
    1109281085U,	// VPADDLuv4i32
    1109412157U,	// VPADDLuv8i16
    1109543229U,	// VPADDLuv8i8
    2249091010U,	// VPADDf
    35940290U,	// VPADDh
    36333506U,	// VPADDi16
    36202434U,	// VPADDi32
    36464578U,	// VPADDi8
    2249092128U,	// VPMAXf
    35941408U,	// VPMAXh
    35286048U,	// VPMAXs16
    35154976U,	// VPMAXs32
    35417120U,	// VPMAXs8
    35679264U,	// VPMAXu16
    35548192U,	// VPMAXu32
    35810336U,	// VPMAXu8
    2249091546U,	// VPMINf
    35940826U,	// VPMINh
    35285466U,	// VPMINs16
    35154394U,	// VPMINs32
    35416538U,	// VPMINs8
    35678682U,	// VPMINu16
    35547610U,	// VPMINu32
    35809754U,	// VPMINu8
    1109150404U,	// VQABSv16i8
    1108888260U,	// VQABSv2i32
    1109019332U,	// VQABSv4i16
    1108888260U,	// VQABSv4i32
    1109019332U,	// VQABSv8i16
    1109150404U,	// VQABSv8i8
    35416008U,	// VQADDsv16i8
    40134600U,	// VQADDsv1i64
    35153864U,	// VQADDsv2i32
    40134600U,	// VQADDsv2i64
    35284936U,	// VQADDsv4i16
    35153864U,	// VQADDsv4i32
    35284936U,	// VQADDsv8i16
    35416008U,	// VQADDsv8i8
    35809224U,	// VQADDuv16i8
    40265672U,	// VQADDuv1i64
    35547080U,	// VQADDuv2i32
    40265672U,	// VQADDuv2i64
    35678152U,	// VQADDuv4i16
    35547080U,	// VQADDuv4i32
    35678152U,	// VQADDuv8i16
    35809224U,	// VQADDuv8i8
    18417928U,	// VQDMLALslv2i32
    18549000U,	// VQDMLALslv4i16
    18381064U,	// VQDMLALv2i64
    18512136U,	// VQDMLALv4i32
    18418059U,	// VQDMLSLslv2i32
    18549131U,	// VQDMLSLslv4i16
    18381195U,	// VQDMLSLv2i64
    18512267U,	// VQDMLSLv4i32
    35158136U,	// VQDMULHslv2i32
    35289208U,	// VQDMULHslv4i16
    35158136U,	// VQDMULHslv4i32
    35289208U,	// VQDMULHslv8i16
    35154040U,	// VQDMULHv2i32
    35285112U,	// VQDMULHv4i16
    35154040U,	// VQDMULHv4i32
    35285112U,	// VQDMULHv8i16
    35158380U,	// VQDMULLslv2i32
    35289452U,	// VQDMULLslv4i16
    35154284U,	// VQDMULLv2i64
    35285356U,	// VQDMULLv4i32
    1113868832U,	// VQMOVNsuv2i32
    1108888096U,	// VQMOVNsuv4i16
    1109019168U,	// VQMOVNsuv8i8
    1113868845U,	// VQMOVNsv2i32
    1108888109U,	// VQMOVNsv4i16
    1109019181U,	// VQMOVNsv8i8
    1113999917U,	// VQMOVNuv2i32
    1109281325U,	// VQMOVNuv4i16
    1109412397U,	// VQMOVNuv8i8
    1109149770U,	// VQNEGv16i8
    1108887626U,	// VQNEGv2i32
    1109018698U,	// VQNEGv4i16
    1108887626U,	// VQNEGv4i32
    1109018698U,	// VQNEGv8i16
    1109149770U,	// VQNEGv8i8
    18417754U,	// VQRDMLAHslv2i32
    18548826U,	// VQRDMLAHslv4i16
    18417754U,	// VQRDMLAHslv4i32
    18548826U,	// VQRDMLAHslv8i16
    18380890U,	// VQRDMLAHv2i32
    18511962U,	// VQRDMLAHv4i16
    18380890U,	// VQRDMLAHv4i32
    18511962U,	// VQRDMLAHv8i16
    18417811U,	// VQRDMLSHslv2i32
    18548883U,	// VQRDMLSHslv4i16
    18417811U,	// VQRDMLSHslv4i32
    18548883U,	// VQRDMLSHslv8i16
    18380947U,	// VQRDMLSHv2i32
    18512019U,	// VQRDMLSHv4i16
    18380947U,	// VQRDMLSHv4i32
    18512019U,	// VQRDMLSHv8i16
    35158144U,	// VQRDMULHslv2i32
    35289216U,	// VQRDMULHslv4i16
    35158144U,	// VQRDMULHslv4i32
    35289216U,	// VQRDMULHslv8i16
    35154048U,	// VQRDMULHv2i32
    35285120U,	// VQRDMULHv4i16
    35154048U,	// VQRDMULHv4i32
    35285120U,	// VQRDMULHv8i16
    35416404U,	// VQRSHLsv16i8
    40134996U,	// VQRSHLsv1i64
    35154260U,	// VQRSHLsv2i32
    40134996U,	// VQRSHLsv2i64
    35285332U,	// VQRSHLsv4i16
    35154260U,	// VQRSHLsv4i32
    35285332U,	// VQRSHLsv8i16
    35416404U,	// VQRSHLsv8i8
    35809620U,	// VQRSHLuv16i8
    40266068U,	// VQRSHLuv1i64
    35547476U,	// VQRSHLuv2i32
    40266068U,	// VQRSHLuv2i64
    35678548U,	// VQRSHLuv4i16
    35547476U,	// VQRSHLuv4i32
    35678548U,	// VQRSHLuv8i16
    35809620U,	// VQRSHLuv8i8
    40135152U,	// VQRSHRNsv2i32
    35154416U,	// VQRSHRNsv4i16
    35285488U,	// VQRSHRNsv8i8
    40266224U,	// VQRSHRNuv2i32
    35547632U,	// VQRSHRNuv4i16
    35678704U,	// VQRSHRNuv8i8
    40135191U,	// VQRSHRUNv2i32
    35154455U,	// VQRSHRUNv4i16
    35285527U,	// VQRSHRUNv8i8
    35416398U,	// VQSHLsiv16i8
    40134990U,	// VQSHLsiv1i64
    35154254U,	// VQSHLsiv2i32
    40134990U,	// VQSHLsiv2i64
    35285326U,	// VQSHLsiv4i16
    35154254U,	// VQSHLsiv4i32
    35285326U,	// VQSHLsiv8i16
    35416398U,	// VQSHLsiv8i8
    35417051U,	// VQSHLsuv16i8
    40135643U,	// VQSHLsuv1i64
    35154907U,	// VQSHLsuv2i32
    40135643U,	// VQSHLsuv2i64
    35285979U,	// VQSHLsuv4i16
    35154907U,	// VQSHLsuv4i32
    35285979U,	// VQSHLsuv8i16
    35417051U,	// VQSHLsuv8i8
    35416398U,	// VQSHLsv16i8
    40134990U,	// VQSHLsv1i64
    35154254U,	// VQSHLsv2i32
    40134990U,	// VQSHLsv2i64
    35285326U,	// VQSHLsv4i16
    35154254U,	// VQSHLsv4i32
    35285326U,	// VQSHLsv8i16
    35416398U,	// VQSHLsv8i8
    35809614U,	// VQSHLuiv16i8
    40266062U,	// VQSHLuiv1i64
    35547470U,	// VQSHLuiv2i32
    40266062U,	// VQSHLuiv2i64
    35678542U,	// VQSHLuiv4i16
    35547470U,	// VQSHLuiv4i32
    35678542U,	// VQSHLuiv8i16
    35809614U,	// VQSHLuiv8i8
    35809614U,	// VQSHLuv16i8
    40266062U,	// VQSHLuv1i64
    35547470U,	// VQSHLuv2i32
    40266062U,	// VQSHLuv2i64
    35678542U,	// VQSHLuv4i16
    35547470U,	// VQSHLuv4i32
    35678542U,	// VQSHLuv8i16
    35809614U,	// VQSHLuv8i8
    40135145U,	// VQSHRNsv2i32
    35154409U,	// VQSHRNsv4i16
    35285481U,	// VQSHRNsv8i8
    40266217U,	// VQSHRNuv2i32
    35547625U,	// VQSHRNuv4i16
    35678697U,	// VQSHRNuv8i8
    40135183U,	// VQSHRUNv2i32
    35154447U,	// VQSHRUNv4i16
    35285519U,	// VQSHRUNv8i8
    35415867U,	// VQSUBsv16i8
    40134459U,	// VQSUBsv1i64
    35153723U,	// VQSUBsv2i32
    40134459U,	// VQSUBsv2i64
    35284795U,	// VQSUBsv4i16
    35153723U,	// VQSUBsv4i32
    35284795U,	// VQSUBsv8i16
    35415867U,	// VQSUBsv8i8
    35809083U,	// VQSUBuv16i8
    40265531U,	// VQSUBuv1i64
    35546939U,	// VQSUBuv2i32
    40265531U,	// VQSUBuv2i64
    35678011U,	// VQSUBuv4i16
    35546939U,	// VQSUBuv4i32
    35678011U,	// VQSUBuv8i16
    35809083U,	// VQSUBuv8i8
    36071883U,	// VRADDHNv2i32
    36202955U,	// VRADDHNv4i16
    36334027U,	// VRADDHNv8i8
    1109280812U,	// VRECPEd
    2249082924U,	// VRECPEfd
    2249082924U,	// VRECPEfq
    1109674028U,	// VRECPEhd
    1109674028U,	// VRECPEhq
    1109280812U,	// VRECPEq
    2249091829U,	// VRECPSfd
    2249091829U,	// VRECPSfq
    35941109U,	// VRECPShd
    35941109U,	// VRECPShq
    3032499U,	// VREV16d8
    3032499U,	// VREV16q8
    4998366U,	// VREV32d16
    3032286U,	// VREV32d8
    4998366U,	// VREV32q16
    3032286U,	// VREV32q8
    4998442U,	// VREV64d16
    5129514U,	// VREV64d32
    3032362U,	// VREV64d8
    4998442U,	// VREV64q16
    5129514U,	// VREV64q32
    3032362U,	// VREV64q8
    35415989U,	// VRHADDsv16i8
    35153845U,	// VRHADDsv2i32
    35284917U,	// VRHADDsv4i16
    35153845U,	// VRHADDsv4i32
    35284917U,	// VRHADDsv8i16
    35415989U,	// VRHADDsv8i8
    35809205U,	// VRHADDuv16i8
    35547061U,	// VRHADDuv2i32
    35678133U,	// VRHADDuv4i16
    35547061U,	// VRHADDuv4i32
    35678133U,	// VRHADDuv8i16
    35809205U,	// VRHADDuv8i8
    1107448354U,	// VRINTAD
    1107448046U,	// VRINTANDf
    1107448605U,	// VRINTANDh
    1107448046U,	// VRINTANQf
    1107448605U,	// VRINTANQh
    1107448046U,	// VRINTAS
    1107448402U,	// VRINTMD
    1107448094U,	// VRINTMNDf
    1107448641U,	// VRINTMNDh
    1107448094U,	// VRINTMNQf
    1107448641U,	// VRINTMNQh
    1107448094U,	// VRINTMS
    1107448414U,	// VRINTND
    1107448106U,	// VRINTNNDf
    1107448653U,	// VRINTNNDh
    1107448106U,	// VRINTNNQf
    1107448653U,	// VRINTNNQh
    1107448106U,	// VRINTNS
    1107448426U,	// VRINTPD
    1107448118U,	// VRINTPNDf
    1107448665U,	// VRINTPNDh
    1107448118U,	// VRINTPNQf
    1107448665U,	// VRINTPNQh
    1107448118U,	// VRINTPS
    2248952498U,	// VRINTRD
    2249083570U,	// VRINTRS
    2248953044U,	// VRINTXD
    1107448166U,	// VRINTXNDf
    1107448677U,	// VRINTXNDh
    1107448166U,	// VRINTXNQf
    1107448677U,	// VRINTXNQh
    2249084116U,	// VRINTXS
    2248953056U,	// VRINTZD
    1107448178U,	// VRINTZNDf
    1107448689U,	// VRINTZNDh
    1107448178U,	// VRINTZNQf
    1107448689U,	// VRINTZNQh
    2249084128U,	// VRINTZS
    35416411U,	// VRSHLsv16i8
    40135003U,	// VRSHLsv1i64
    35154267U,	// VRSHLsv2i32
    40135003U,	// VRSHLsv2i64
    35285339U,	// VRSHLsv4i16
    35154267U,	// VRSHLsv4i32
    35285339U,	// VRSHLsv8i16
    35416411U,	// VRSHLsv8i8
    35809627U,	// VRSHLuv16i8
    40266075U,	// VRSHLuv1i64
    35547483U,	// VRSHLuv2i32
    40266075U,	// VRSHLuv2i64
    35678555U,	// VRSHLuv4i16
    35547483U,	// VRSHLuv4i32
    35678555U,	// VRSHLuv8i16
    35809627U,	// VRSHLuv8i8
    36071928U,	// VRSHRNv2i32
    36203000U,	// VRSHRNv4i16
    36334072U,	// VRSHRNv8i8
    35416701U,	// VRSHRsv16i8
    40135293U,	// VRSHRsv1i64
    35154557U,	// VRSHRsv2i32
    40135293U,	// VRSHRsv2i64
    35285629U,	// VRSHRsv4i16
    35154557U,	// VRSHRsv4i32
    35285629U,	// VRSHRsv8i16
    35416701U,	// VRSHRsv8i8
    35809917U,	// VRSHRuv16i8
    40266365U,	// VRSHRuv1i64
    35547773U,	// VRSHRuv2i32
    40266365U,	// VRSHRuv2i64
    35678845U,	// VRSHRuv4i16
    35547773U,	// VRSHRuv4i32
    35678845U,	// VRSHRuv8i16
    35809917U,	// VRSHRuv8i8
    1109280825U,	// VRSQRTEd
    2249082937U,	// VRSQRTEfd
    2249082937U,	// VRSQRTEfq
    1109674041U,	// VRSQRTEhd
    1109674041U,	// VRSQRTEhq
    1109280825U,	// VRSQRTEq
    2249091851U,	// VRSQRTSfd
    2249091851U,	// VRSQRTSfq
    35941131U,	// VRSQRTShd
    35941131U,	// VRSQRTShq
    18642561U,	// VRSRAsv16i8
    23361153U,	// VRSRAsv1i64
    18380417U,	// VRSRAsv2i32
    23361153U,	// VRSRAsv2i64
    18511489U,	// VRSRAsv4i16
    18380417U,	// VRSRAsv4i32
    18511489U,	// VRSRAsv8i16
    18642561U,	// VRSRAsv8i8
    19035777U,	// VRSRAuv16i8
    23492225U,	// VRSRAuv1i64
    18773633U,	// VRSRAuv2i32
    23492225U,	// VRSRAuv2i64
    18904705U,	// VRSRAuv4i16
    18773633U,	// VRSRAuv4i32
    18904705U,	// VRSRAuv8i16
    19035777U,	// VRSRAuv8i8
    36071868U,	// VRSUBHNv2i32
    36202940U,	// VRSUBHNv4i16
    36334012U,	// VRSUBHNv8i8
    33706614U,	// VSELEQD
    33706306U,	// VSELEQS
    33706542U,	// VSELGED
    33706234U,	// VSELGES
    33706638U,	// VSELGTD
    33706330U,	// VSELGTS
    33706626U,	// VSELVSD
    33706318U,	// VSELVSS
    3226237941U,	// VSETLNi16
    3226369013U,	// VSETLNi32
    3224271861U,	// VSETLNi8
    36333926U,	// VSHLLi16
    36202854U,	// VSHLLi32
    36464998U,	// VSHLLi8
    35154278U,	// VSHLLsv2i64
    35285350U,	// VSHLLsv4i32
    35416422U,	// VSHLLsv8i16
    35547494U,	// VSHLLuv2i64
    35678566U,	// VSHLLuv4i32
    35809638U,	// VSHLLuv8i16
    36464993U,	// VSHLiv16i8
    36071777U,	// VSHLiv1i64
    36202849U,	// VSHLiv2i32
    36071777U,	// VSHLiv2i64
    36333921U,	// VSHLiv4i16
    36202849U,	// VSHLiv4i32
    36333921U,	// VSHLiv8i16
    36464993U,	// VSHLiv8i8
    35416417U,	// VSHLsv16i8
    40135009U,	// VSHLsv1i64
    35154273U,	// VSHLsv2i32
    40135009U,	// VSHLsv2i64
    35285345U,	// VSHLsv4i16
    35154273U,	// VSHLsv4i32
    35285345U,	// VSHLsv8i16
    35416417U,	// VSHLsv8i8
    35809633U,	// VSHLuv16i8
    40266081U,	// VSHLuv1i64
    35547489U,	// VSHLuv2i32
    40266081U,	// VSHLuv2i64
    35678561U,	// VSHLuv4i16
    35547489U,	// VSHLuv4i32
    35678561U,	// VSHLuv8i16
    35809633U,	// VSHLuv8i8
    36071935U,	// VSHRNv2i32
    36203007U,	// VSHRNv4i16
    36334079U,	// VSHRNv8i8
    35416707U,	// VSHRsv16i8
    40135299U,	// VSHRsv1i64
    35154563U,	// VSHRsv2i32
    40135299U,	// VSHRsv2i64
    35285635U,	// VSHRsv4i16
    35154563U,	// VSHRsv4i32
    35285635U,	// VSHRsv8i16
    35416707U,	// VSHRsv8i8
    35809923U,	// VSHRuv16i8
    40266371U,	// VSHRuv1i64
    35547779U,	// VSHRuv2i32
    40266371U,	// VSHRuv2i64
    35678851U,	// VSHRuv4i16
    35547779U,	// VSHRuv4i32
    35678851U,	// VSHRuv8i16
    35809923U,	// VSHRuv8i8
    6843326U,	// VSHTOD
    6974398U,	// VSHTOS
    309087166U,	// VSITOD
    306465726U,	// VSITOS
    3045595U,	// VSLIv16i8
    5273819U,	// VSLIv1i64
    5142747U,	// VSLIv2i32
    5273819U,	// VSLIv2i64
    5011675U,	// VSLIv4i16
    5142747U,	// VSLIv4i32
    5011675U,	// VSLIv8i16
    3045595U,	// VSLIv8i8
    107768766U,	// VSLTOD
    105147326U,	// VSLTOS
    2248952722U,	// VSQRTD
    2249083794U,	// VSQRTS
    18642567U,	// VSRAsv16i8
    23361159U,	// VSRAsv1i64
    18380423U,	// VSRAsv2i32
    23361159U,	// VSRAsv2i64
    18511495U,	// VSRAsv4i16
    18380423U,	// VSRAsv4i32
    18511495U,	// VSRAsv8i16
    18642567U,	// VSRAsv8i8
    19035783U,	// VSRAuv16i8
    23492231U,	// VSRAuv1i64
    18773639U,	// VSRAuv2i32
    23492231U,	// VSRAuv2i64
    18904711U,	// VSRAuv4i16
    18773639U,	// VSRAuv4i32
    18904711U,	// VSRAuv8i16
    19035783U,	// VSRAuv8i8
    3045600U,	// VSRIv16i8
    5273824U,	// VSRIv1i64
    5142752U,	// VSRIv2i32
    5273824U,	// VSRIv2i64
    5011680U,	// VSRIv4i16
    5142752U,	// VSRIv4i32
    5011680U,	// VSRIv8i16
    3045600U,	// VSRIv8i8
    22181081U,	// VST1LNd16
    559064281U,	// VST1LNd16_UPD
    22312153U,	// VST1LNd32
    559195353U,	// VST1LNd32_UPD
    22443225U,	// VST1LNd8
    559326425U,	// VST1LNd8_UPD
    5010649U,	// VST1LNdAsm_16
    5141721U,	// VST1LNdAsm_32
    3044569U,	// VST1LNdAsm_8
    5010649U,	// VST1LNdWB_fixed_Asm_16
    5141721U,	// VST1LNdWB_fixed_Asm_32
    3044569U,	// VST1LNdWB_fixed_Asm_8
    5047513U,	// VST1LNdWB_register_Asm_16
    5178585U,	// VST1LNdWB_register_Asm_32
    3081433U,	// VST1LNdWB_register_Asm_8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    575431897U,	// VST1d16
    592209113U,	// VST1d16Q
    608990425U,	// VST1d16Qwb_fixed
    625804505U,	// VST1d16Qwb_register
    642540761U,	// VST1d16T
    659322073U,	// VST1d16Twb_fixed
    676136153U,	// VST1d16Twb_register
    692876505U,	// VST1d16wb_fixed
    709690585U,	// VST1d16wb_register
    575562969U,	// VST1d32
    592340185U,	// VST1d32Q
    609121497U,	// VST1d32Qwb_fixed
    625935577U,	// VST1d32Qwb_register
    642671833U,	// VST1d32T
    659453145U,	// VST1d32Twb_fixed
    676267225U,	// VST1d32Twb_register
    693007577U,	// VST1d32wb_fixed
    709821657U,	// VST1d32wb_register
    575694041U,	// VST1d64
    592471257U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    609252569U,	// VST1d64Qwb_fixed
    626066649U,	// VST1d64Qwb_register
    642802905U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    659584217U,	// VST1d64Twb_fixed
    676398297U,	// VST1d64Twb_register
    693138649U,	// VST1d64wb_fixed
    709952729U,	// VST1d64wb_register
    573465817U,	// VST1d8
    590243033U,	// VST1d8Q
    607024345U,	// VST1d8Qwb_fixed
    623838425U,	// VST1d8Qwb_register
    640574681U,	// VST1d8T
    657355993U,	// VST1d8Twb_fixed
    674170073U,	// VST1d8Twb_register
    690910425U,	// VST1d8wb_fixed
    707724505U,	// VST1d8wb_register
    726426841U,	// VST1q16
    743208153U,	// VST1q16wb_fixed
    760022233U,	// VST1q16wb_register
    726557913U,	// VST1q32
    743339225U,	// VST1q32wb_fixed
    760153305U,	// VST1q32wb_register
    726688985U,	// VST1q64
    743470297U,	// VST1q64wb_fixed
    760284377U,	// VST1q64wb_register
    724460761U,	// VST1q8
    741242073U,	// VST1q8wb_fixed
    758056153U,	// VST1q8wb_register
    22218005U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    559117589U,	// VST2LNd16_UPD
    22349077U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    559248661U,	// VST2LNd32_UPD
    22480149U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    559379733U,	// VST2LNd8_UPD
    5010709U,	// VST2LNdAsm_16
    5141781U,	// VST2LNdAsm_32
    3044629U,	// VST2LNdAsm_8
    5010709U,	// VST2LNdWB_fixed_Asm_16
    5141781U,	// VST2LNdWB_fixed_Asm_32
    3044629U,	// VST2LNdWB_fixed_Asm_8
    5047573U,	// VST2LNdWB_register_Asm_16
    5178645U,	// VST2LNdWB_register_Asm_32
    3081493U,	// VST2LNdWB_register_Asm_8
    22218005U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    559117589U,	// VST2LNq16_UPD
    22349077U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    559248661U,	// VST2LNq32_UPD
    5010709U,	// VST2LNqAsm_16
    5141781U,	// VST2LNqAsm_32
    5010709U,	// VST2LNqWB_fixed_Asm_16
    5141781U,	// VST2LNqWB_fixed_Asm_32
    5047573U,	// VST2LNqWB_register_Asm_16
    5178645U,	// VST2LNqWB_register_Asm_32
    776758549U,	// VST2b16
    793539861U,	// VST2b16wb_fixed
    810353941U,	// VST2b16wb_register
    776889621U,	// VST2b32
    793670933U,	// VST2b32wb_fixed
    810485013U,	// VST2b32wb_register
    774792469U,	// VST2b8
    791573781U,	// VST2b8wb_fixed
    808387861U,	// VST2b8wb_register
    726426901U,	// VST2d16
    743208213U,	// VST2d16wb_fixed
    760022293U,	// VST2d16wb_register
    726557973U,	// VST2d32
    743339285U,	// VST2d32wb_fixed
    760153365U,	// VST2d32wb_register
    724460821U,	// VST2d8
    741242133U,	// VST2d8wb_fixed
    758056213U,	// VST2d8wb_register
    592209173U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    608990485U,	// VST2q16wb_fixed
    625804565U,	// VST2q16wb_register
    592340245U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    609121557U,	// VST2q32wb_fixed
    625935637U,	// VST2q32wb_register
    590243093U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    607024405U,	// VST2q8wb_fixed
    623838485U,	// VST2q8wb_register
    22193445U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    559129893U,	// VST3LNd16_UPD
    22324517U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    559260965U,	// VST3LNd32_UPD
    22455589U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    559392037U,	// VST3LNd8_UPD
    5010725U,	// VST3LNdAsm_16
    5141797U,	// VST3LNdAsm_32
    3044645U,	// VST3LNdAsm_8
    5010725U,	// VST3LNdWB_fixed_Asm_16
    5141797U,	// VST3LNdWB_fixed_Asm_32
    3044645U,	// VST3LNdWB_fixed_Asm_8
    5047589U,	// VST3LNdWB_register_Asm_16
    5178661U,	// VST3LNdWB_register_Asm_32
    3081509U,	// VST3LNdWB_register_Asm_8
    22193445U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    559129893U,	// VST3LNq16_UPD
    22324517U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    559260965U,	// VST3LNq32_UPD
    5010725U,	// VST3LNqAsm_16
    5141797U,	// VST3LNqAsm_32
    5010725U,	// VST3LNqWB_fixed_Asm_16
    5141797U,	// VST3LNqWB_fixed_Asm_32
    5047589U,	// VST3LNqWB_register_Asm_16
    5178661U,	// VST3LNqWB_register_Asm_32
    22218021U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    559117605U,	// VST3d16_UPD
    22349093U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    559248677U,	// VST3d32_UPD
    22480165U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    559379749U,	// VST3d8_UPD
    2538366245U,	// VST3dAsm_16
    2538497317U,	// VST3dAsm_32
    2536400165U,	// VST3dAsm_8
    2538366245U,	// VST3dWB_fixed_Asm_16
    2538497317U,	// VST3dWB_fixed_Asm_32
    2536400165U,	// VST3dWB_fixed_Asm_8
    2538370341U,	// VST3dWB_register_Asm_16
    2538501413U,	// VST3dWB_register_Asm_32
    2536404261U,	// VST3dWB_register_Asm_8
    22218021U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    559117605U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    22349093U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    559248677U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    22480165U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    559379749U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    1565287717U,	// VST3qAsm_16
    1565418789U,	// VST3qAsm_32
    1563321637U,	// VST3qAsm_8
    2639029541U,	// VST3qWB_fixed_Asm_16
    2639160613U,	// VST3qWB_fixed_Asm_32
    2637063461U,	// VST3qWB_fixed_Asm_8
    491549989U,	// VST3qWB_register_Asm_16
    491681061U,	// VST3qWB_register_Asm_32
    489583909U,	// VST3qWB_register_Asm_8
    22246710U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    559121718U,	// VST4LNd16_UPD
    22377782U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    559252790U,	// VST4LNd32_UPD
    22508854U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    559383862U,	// VST4LNd8_UPD
    5010742U,	// VST4LNdAsm_16
    5141814U,	// VST4LNdAsm_32
    3044662U,	// VST4LNdAsm_8
    5010742U,	// VST4LNdWB_fixed_Asm_16
    5141814U,	// VST4LNdWB_fixed_Asm_32
    3044662U,	// VST4LNdWB_fixed_Asm_8
    5047606U,	// VST4LNdWB_register_Asm_16
    5178678U,	// VST4LNdWB_register_Asm_32
    3081526U,	// VST4LNdWB_register_Asm_8
    22246710U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    559121718U,	// VST4LNq16_UPD
    22377782U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    559252790U,	// VST4LNq32_UPD
    5010742U,	// VST4LNqAsm_16
    5141814U,	// VST4LNqAsm_32
    5010742U,	// VST4LNqWB_fixed_Asm_16
    5141814U,	// VST4LNqWB_fixed_Asm_32
    5047606U,	// VST4LNqWB_register_Asm_16
    5178678U,	// VST4LNqWB_register_Asm_32
    22193462U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    559129910U,	// VST4d16_UPD
    22324534U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    559260982U,	// VST4d32_UPD
    22455606U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    559392054U,	// VST4d8_UPD
    2521589046U,	// VST4dAsm_16
    2521720118U,	// VST4dAsm_32
    2519622966U,	// VST4dAsm_8
    2521589046U,	// VST4dWB_fixed_Asm_16
    2521720118U,	// VST4dWB_fixed_Asm_32
    2519622966U,	// VST4dWB_fixed_Asm_8
    2521593142U,	// VST4dWB_register_Asm_16
    2521724214U,	// VST4dWB_register_Asm_32
    2519627062U,	// VST4dWB_register_Asm_8
    22193462U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    559129910U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    22324534U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    559260982U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    22455606U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    559392054U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    1615619382U,	// VST4qAsm_16
    1615750454U,	// VST4qAsm_32
    1613653302U,	// VST4qAsm_8
    2689361206U,	// VST4qWB_fixed_Asm_16
    2689492278U,	// VST4qWB_fixed_Asm_32
    2687395126U,	// VST4qWB_fixed_Asm_8
    541881654U,	// VST4qWB_register_Asm_16
    542012726U,	// VST4qWB_register_Asm_32
    539915574U,	// VST4qWB_register_Asm_8
    33572548U,	// VSTMDDB_UPD
    34392U,	// VSTMDIA
    33572440U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    33572548U,	// VSTMSDB_UPD
    34392U,	// VSTMSIA
    33572440U,	// VSTMSIA_UPD
    27321U,	// VSTRD
    27321U,	// VSTRS
    2248959809U,	// VSUBD
    36071876U,	// VSUBHNv2i32
    36202948U,	// VSUBHNv4i16
    36334020U,	// VSUBHNv8i8
    35154215U,	// VSUBLsv2i64
    35285287U,	// VSUBLsv4i32
    35416359U,	// VSUBLsv8i16
    35547431U,	// VSUBLuv2i64
    35678503U,	// VSUBLuv4i32
    35809575U,	// VSUBLuv8i16
    2249090881U,	// VSUBS
    35154938U,	// VSUBWsv2i64
    35286010U,	// VSUBWsv4i32
    35417082U,	// VSUBWsv8i16
    35548154U,	// VSUBWuv2i64
    35679226U,	// VSUBWuv4i32
    35810298U,	// VSUBWuv8i16
    2249090881U,	// VSUBfd
    2249090881U,	// VSUBfq
    35940161U,	// VSUBhd
    35940161U,	// VSUBhq
    36464449U,	// VSUBv16i8
    36071233U,	// VSUBv1i64
    36202305U,	// VSUBv2i32
    36071233U,	// VSUBv2i64
    36333377U,	// VSUBv4i16
    36202305U,	// VSUBv4i32
    36333377U,	// VSUBv8i16
    36464449U,	// VSUBv8i8
    31318U,	// VSWPd
    31318U,	// VSWPq
    3041570U,	// VTBL1
    3041570U,	// VTBL2
    3041570U,	// VTBL3
    0U,	// VTBL3Pseudo
    3041570U,	// VTBL4
    0U,	// VTBL4Pseudo
    3046487U,	// VTBX1
    3046487U,	// VTBX2
    3046487U,	// VTBX3
    0U,	// VTBX3Pseudo
    3046487U,	// VTBX4
    0U,	// VTBX4Pseudo
    7236542U,	// VTOSHD
    7367614U,	// VTOSHS
    309480126U,	// VTOSIRD
    305941182U,	// VTOSIRS
    309480382U,	// VTOSIZD
    305941438U,	// VTOSIZS
    108161982U,	// VTOSLD
    104623038U,	// VTOSLS
    7629758U,	// VTOUHD
    7760830U,	// VTOUHS
    309873342U,	// VTOUIRD
    306072254U,	// VTOUIRS
    309873598U,	// VTOUIZD
    306072510U,	// VTOUIZS
    108555198U,	// VTOULD
    104754110U,	// VTOULS
    5011978U,	// VTRNd16
    5143050U,	// VTRNd32
    3045898U,	// VTRNd8
    5011978U,	// VTRNq16
    5143050U,	// VTRNq32
    3045898U,	// VTRNq8
    3042205U,	// VTSTv16i8
    5139357U,	// VTSTv2i32
    5008285U,	// VTSTv4i16
    5139357U,	// VTSTv4i32
    5008285U,	// VTSTv8i16
    3042205U,	// VTSTv8i8
    8022974U,	// VUHTOD
    8154046U,	// VUHTOS
    310266814U,	// VUITOD
    306727870U,	// VUITOS
    108948414U,	// VULTOD
    105409470U,	// VULTOS
    5012059U,	// VUZPd16
    3045979U,	// VUZPd8
    5012059U,	// VUZPq16
    5143131U,	// VUZPq32
    3045979U,	// VUZPq8
    5012035U,	// VZIPd16
    3045955U,	// VZIPd8
    5012035U,	// VZIPq16
    5143107U,	// VZIPq32
    3045955U,	// VZIPq8
    0U,	// WIN__CHKSTK
    0U,	// WIN__DBZCHK
    34367U,	// sysLDMDA
    33572415U,	// sysLDMDA_UPD
    34494U,	// sysLDMDB
    33572542U,	// sysLDMDB_UPD
    35252U,	// sysLDMIA
    33573300U,	// sysLDMIA_UPD
    34513U,	// sysLDMIB
    33572561U,	// sysLDMIB_UPD
    34373U,	// sysSTMDA
    33572421U,	// sysSTMDA_UPD
    34501U,	// sysSTMDB
    33572549U,	// sysSTMDB_UPD
    35256U,	// sysSTMIA
    33573304U,	// sysSTMIA_UPD
    34519U,	// sysSTMIB
    33572567U,	// sysSTMIB_UPD
    0U,	// t2ABS
    6004U,	// t2ADCri
    8394612U,	// t2ADCrr
    8398708U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    8394673U,	// t2ADDri
    27649U,	// t2ADDri12
    8394673U,	// t2ADDrr
    8398769U,	// t2ADDrs
    8407668U,	// t2ADR
    6118U,	// t2ANDri
    8394726U,	// t2ANDrr
    8398822U,	// t2ANDrs
    8395426U,	// t2ASRri
    8395426U,	// t2ASRrr
    1082164879U,	// t2B
    26492U,	// t2BFC
    30931U,	// t2BFI
    6017U,	// t2BICri
    8394625U,	// t2BICrr
    8398721U,	// t2BICrs
    0U,	// t2BR_JT
    1073776869U,	// t2BXJ
    1082164879U,	// t2Bcc
    2197858879U,	// t2CDP
    2197857535U,	// t2CDP2
    433306U,	// t2CLREX
    19676U,	// t2CLZ
    8407525U,	// t2CMNri
    8407525U,	// t2CMNzrr
    8415717U,	// t2CMNzrs
    8407625U,	// t2CMPri
    8407625U,	// t2CMPrr
    8415817U,	// t2CMPrs
    414755U,	// t2CPS1p
    1166068472U,	// t2CPS2p
    83938040U,	// t2CPS3p
    33706926U,	// t2CRC32B
    33706934U,	// t2CRC32CB
    33707003U,	// t2CRC32CH
    33707087U,	// t2CRC32CW
    33706995U,	// t2CRC32H
    33707079U,	// t2CRC32W
    1073776710U,	// t2DBG
    431315U,	// t2DCPS1
    431375U,	// t2DCPS2
    431391U,	// t2DCPS3
    822118114U,	// t2DMB
    822118133U,	// t2DSB
    6800U,	// t2EORri
    8395408U,	// t2EORrr
    8399504U,	// t2EORrs
    1082166152U,	// t2HINT
    414777U,	// t2HVC
    838895353U,	// t2ISB
    117504886U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    17979U,	// t2LDA
    18060U,	// t2LDAB
    19592U,	// t2LDAEX
    18260U,	// t2LDAEXB
    26624U,	// t2LDAEXD
    18615U,	// t2LDAEXH
    18517U,	// t2LDAH
    3271588073U,	// t2LDC2L_OFFSET
    3271588073U,	// t2LDC2L_OPTION
    3271588073U,	// t2LDC2L_POST
    3271588073U,	// t2LDC2L_PRE
    3271587045U,	// t2LDC2_OFFSET
    3271587045U,	// t2LDC2_OPTION
    3271587045U,	// t2LDC2_POST
    3271587045U,	// t2LDC2_PRE
    3271588141U,	// t2LDCL_OFFSET
    3271588141U,	// t2LDCL_OPTION
    3271588141U,	// t2LDCL_POST
    3271588141U,	// t2LDCL_PRE
    3271587704U,	// t2LDC_OFFSET
    3271587704U,	// t2LDC_OPTION
    3271587704U,	// t2LDC_POST
    3271587704U,	// t2LDC_PRE
    34494U,	// t2LDMDB
    33572542U,	// t2LDMDB_UPD
    8423860U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    41961908U,	// t2LDMIA_UPD
    27454U,	// t2LDRBT
    30443U,	// t2LDRB_POST
    30443U,	// t2LDRB_PRE
    8414955U,	// t2LDRBi12
    26347U,	// t2LDRBi8
    8406763U,	// t2LDRBpci
    280299U,	// t2LDRBpcrel
    8419051U,	// t2LDRBs
    67562U,	// t2LDRD_POST
    67562U,	// t2LDRD_PRE
    30698U,	// t2LDRDi8
    27796U,	// t2LDREX
    18274U,	// t2LDREXB
    26638U,	// t2LDREXD
    18629U,	// t2LDREXH
    27489U,	// t2LDRHT
    30857U,	// t2LDRH_POST
    30857U,	// t2LDRH_PRE
    8415369U,	// t2LDRHi12
    26761U,	// t2LDRHi8
    8407177U,	// t2LDRHpci
    280713U,	// t2LDRHpcrel
    8419465U,	// t2LDRHs
    27466U,	// t2LDRSBT
    30461U,	// t2LDRSB_POST
    30461U,	// t2LDRSB_PRE
    8414973U,	// t2LDRSBi12
    26365U,	// t2LDRSBi8
    8406781U,	// t2LDRSBpci
    280317U,	// t2LDRSBpcrel
    8419069U,	// t2LDRSBs
    27501U,	// t2LDRSHT
    30876U,	// t2LDRSH_POST
    30876U,	// t2LDRSH_PRE
    8415388U,	// t2LDRSHi12
    26780U,	// t2LDRSHi8
    8407196U,	// t2LDRSHpci
    280732U,	// t2LDRSHpcrel
    8419484U,	// t2LDRSHs
    27533U,	// t2LDRT
    31353U,	// t2LDR_POST
    31353U,	// t2LDR_PRE
    8415865U,	// t2LDRi12
    27257U,	// t2LDRi8
    8407673U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    281209U,	// t2LDRpcrel
    8419961U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    8395151U,	// t2LSLri
    8395151U,	// t2LSLrr
    8395433U,	// t2LSRri
    8395433U,	// t2LSRrr
    2197858928U,	// t2MCR
    2197857540U,	// t2MCR2
    2197883544U,	// t2MCRR
    2197882121U,	// t2MCRR2
    30311U,	// t2MLA
    31451U,	// t2MLS
    0U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    0U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    0U,	// t2MOVCClsl
    0U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    0U,	// t2MOVCCror
    289555U,	// t2MOVSsi
    293651U,	// t2MOVSsr
    27587U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_pcrel
    8461302U,	// t2MOVi
    19467U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    8461302U,	// t2MOVr
    289782U,	// t2MOVsi
    293878U,	// t2MOVsr
    8407809U,	// t2MOVsra_flag
    8407814U,	// t2MOVsrl_flag
    201369481U,	// t2MRC
    201368810U,	// t2MRC2
    218171277U,	// t2MRRC
    218170607U,	// t2MRRC2
    35581U,	// t2MRS_AR
    19197U,	// t2MRS_M
    19197U,	// t2MRSbanked
    1073777405U,	// t2MRSsys_AR
    2382383790U,	// t2MSR_AR
    2382383790U,	// t2MSR_M
    251677358U,	// t2MSRbanked
    27039U,	// t2MUL
    0U,	// t2MVNCCi
    72233U,	// t2MVNi
    8460841U,	// t2MVNr
    8395305U,	// t2MVNs
    6662U,	// t2ORNri
    6662U,	// t2ORNrr
    10758U,	// t2ORNrs
    6814U,	// t2ORRri
    8395422U,	// t2ORRrr
    8399518U,	// t2ORRrs
    31529U,	// t2PKHBT
    30474U,	// t2PKHTB
    855657478U,	// t2PLDWi12
    872434694U,	// t2PLDWi8
    889220102U,	// t2PLDWs
    855656410U,	// t2PLDi12
    872433626U,	// t2PLDi8
    906004442U,	// t2PLDpci
    889219034U,	// t2PLDs
    855656663U,	// t2PLIi12
    872433879U,	// t2PLIi8
    906004695U,	// t2PLIpci
    889219287U,	// t2PLIs
    26569U,	// t2QADD
    26000U,	// t2QADD16
    26103U,	// t2QADD8
    27845U,	// t2QASX
    26543U,	// t2QDADD
    26415U,	// t2QDSUB
    27704U,	// t2QSAX
    26428U,	// t2QSUB
    25962U,	// t2QSUB16
    26064U,	// t2QSUB8
    19316U,	// t2RBIT
    8408034U,	// t2REV
    8406452U,	// t2REV16
    8407207U,	// t2REVSH
    1073776311U,	// t2RFEDB
    2147518135U,	// t2RFEDBW
    1073776203U,	// t2RFEIA
    2147518027U,	// t2RFEIAW
    8395412U,	// t2RORri
    8395412U,	// t2RORrr
    72884U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    8394495U,	// t2RSBri
    5887U,	// t2RSBrr
    9983U,	// t2RSBrs
    26007U,	// t2SADD16
    26109U,	// t2SADD8
    27850U,	// t2SASX
    6000U,	// t2SBCri
    8394608U,	// t2SBCrr
    8398704U,	// t2SBCrs
    31910U,	// t2SBFX
    27622U,	// t2SDIV
    26954U,	// t2SEL
    414747U,	// t2SETPAN
    25983U,	// t2SHADD16
    26088U,	// t2SHADD8
    27832U,	// t2SHASX
    27691U,	// t2SHSAX
    25945U,	// t2SHSUB16
    26049U,	// t2SHSUB8
    1073776517U,	// t2SMC
    30365U,	// t2SMLABB
    31522U,	// t2SMLABT
    30622U,	// t2SMLAD
    31836U,	// t2SMLADX
    43280U,	// t2SMLAL
    30372U,	// t2SMLALBB
    31535U,	// t2SMLALBT
    30675U,	// t2SMLALD
    31850U,	// t2SMLALDX
    30480U,	// t2SMLALTB
    31657U,	// t2SMLALTT
    30467U,	// t2SMLATB
    31650U,	// t2SMLATT
    30534U,	// t2SMLAWB
    31688U,	// t2SMLAWT
    30708U,	// t2SMLSD
    31866U,	// t2SMLSDX
    30686U,	// t2SMLSLD
    31858U,	// t2SMLSLDX
    30309U,	// t2SMMLA
    31337U,	// t2SMMLAR
    31449U,	// t2SMMLS
    31398U,	// t2SMMLSR
    27037U,	// t2SMMUL
    27272U,	// t2SMMULR
    26532U,	// t2SMUAD
    27747U,	// t2SMUADX
    26284U,	// t2SMULBB
    27447U,	// t2SMULBT
    31092U,	// t2SMULL
    26392U,	// t2SMULTB
    27569U,	// t2SMULTT
    26445U,	// t2SMULWB
    27599U,	// t2SMULWT
    26618U,	// t2SMUSD
    27777U,	// t2SMUSDX
    8554187U,	// t2SRSDB
    8685259U,	// t2SRSDB_UPD
    8554079U,	// t2SRSIA
    8685151U,	// t2SRSIA_UPD
    31512U,	// t2SSAT
    26021U,	// t2SSAT16
    27709U,	// t2SSAX
    25969U,	// t2SSUB16
    26070U,	// t2SSUB8
    3271588079U,	// t2STC2L_OFFSET
    3271588079U,	// t2STC2L_OPTION
    3271588079U,	// t2STC2L_POST
    3271588079U,	// t2STC2L_PRE
    3271587061U,	// t2STC2_OFFSET
    3271587061U,	// t2STC2_OPTION
    3271587061U,	// t2STC2_POST
    3271587061U,	// t2STC2_PRE
    3271588146U,	// t2STCL_OFFSET
    3271588146U,	// t2STCL_OPTION
    3271588146U,	// t2STCL_POST
    3271588146U,	// t2STCL_PRE
    3271587734U,	// t2STC_OFFSET
    3271587734U,	// t2STC_OPTION
    3271587734U,	// t2STC_POST
    3271587734U,	// t2STC_PRE
    18841U,	// t2STL
    18141U,	// t2STLB
    27790U,	// t2STLEX
    26459U,	// t2STLEXB
    30727U,	// t2STLEXD
    26814U,	// t2STLEXH
    18547U,	// t2STLH
    34501U,	// t2STMDB
    33572549U,	// t2STMDB_UPD
    8423864U,	// t2STMIA
    41961912U,	// t2STMIA_UPD
    27460U,	// t2STRBT
    33584880U,	// t2STRB_POST
    33584880U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    8414960U,	// t2STRBi12
    26352U,	// t2STRBi8
    8419056U,	// t2STRBs
    33621999U,	// t2STRD_POST
    33621999U,	// t2STRD_PRE
    30703U,	// t2STRDi8
    31904U,	// t2STREX
    26473U,	// t2STREXB
    30741U,	// t2STREXD
    26828U,	// t2STREXH
    27495U,	// t2STRHT
    33585294U,	// t2STRH_POST
    33585294U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    8415374U,	// t2STRHi12
    26766U,	// t2STRHi8
    8419470U,	// t2STRHs
    27544U,	// t2STRT
    33585850U,	// t2STR_POST
    33585850U,	// t2STR_PRE
    0U,	// t2STR_preidx
    8415930U,	// t2STRi12
    27322U,	// t2STRi8
    8420026U,	// t2STRs
    8817359U,	// t2SUBS_PC_LR
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    8394545U,	// t2SUBri
    27643U,	// t2SUBri12
    8394545U,	// t2SUBrr
    8398641U,	// t2SUBrs
    30353U,	// t2SXTAB
    30011U,	// t2SXTAB16
    30819U,	// t2SXTAH
    8415013U,	// t2SXTB
    25931U,	// t2SXTB16
    8415405U,	// t2SXTH
    922764979U,	// t2TBB
    0U,	// t2TBB_JT
    939542639U,	// t2TBH
    0U,	// t2TBH_JT
    8407653U,	// t2TEQri
    8407653U,	// t2TEQrr
    8415845U,	// t2TEQrs
    8407966U,	// t2TSTri
    8407966U,	// t2TSTrr
    8416158U,	// t2TSTrs
    26014U,	// t2UADD16
    26115U,	// t2UADD8
    27855U,	// t2UASX
    31915U,	// t2UBFX
    414784U,	// t2UDF
    27627U,	// t2UDIV
    25991U,	// t2UHADD16
    26095U,	// t2UHADD8
    27838U,	// t2UHASX
    27697U,	// t2UHSAX
    25953U,	// t2UHSUB16
    26056U,	// t2UHSUB8
    30965U,	// t2UMAAL
    43286U,	// t2UMLAL
    31098U,	// t2UMULL
    25999U,	// t2UQADD16
    26102U,	// t2UQADD8
    27844U,	// t2UQASX
    27703U,	// t2UQSAX
    25961U,	// t2UQSUB16
    26063U,	// t2UQSUB8
    26082U,	// t2USAD8
    30138U,	// t2USADA8
    31517U,	// t2USAT
    26028U,	// t2USAT16
    27714U,	// t2USAX
    25976U,	// t2USUB16
    26076U,	// t2USUB8
    30359U,	// t2UXTAB
    30019U,	// t2UXTAB16
    30825U,	// t2UXTAH
    8415018U,	// t2UXTB
    25938U,	// t2UXTB16
    8415410U,	// t2UXTH
    965330804U,	// tADC
    0U,	// tADDframe
    26545U,	// tADDhirr
    25806769U,	// tADDi3
    965330865U,	// tADDi8
    26545U,	// tADDrSP
    26545U,	// tADDrSPi
    25806769U,	// tADDrr
    26545U,	// tADDspi
    26545U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    19060U,	// tADR
    965330918U,	// tAND
    25807522U,	// tASRri
    965331618U,	// tASRrr
    1073776271U,	// tB
    965330817U,	// tBIC
    414771U,	// tBKPT
    1090558244U,	// tBL
    1090559152U,	// tBLXi
    1090559152U,	// tBLXr
    0U,	// tBRIND
    0U,	// tBR_JTr
    1073777740U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    1073776271U,	// tBcc
    0U,	// tBfar
    1107448940U,	// tCBNZ
    1107448935U,	// tCBZ
    18917U,	// tCMNz
    19017U,	// tCMPhir
    19017U,	// tCMPi8
    19017U,	// tCMPr
    1157942008U,	// tCPS
    965331600U,	// tEOR
    1073777544U,	// tHINT
    414766U,	// tHLT
    0U,	// tInt_WIN_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    35252U,	// tLDMIA
    0U,	// tLDMIA_UPD
    26347U,	// tLDRBi
    26347U,	// tLDRBr
    26761U,	// tLDRHi
    26761U,	// tLDRHr
    0U,	// tLDRLIT_ga_abs
    0U,	// tLDRLIT_ga_pcrel
    26365U,	// tLDRSB
    26780U,	// tLDRSH
    27257U,	// tLDRi
    19065U,	// tLDRpci
    0U,	// tLDRpci_pic
    27257U,	// tLDRr
    27257U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    25807247U,	// tLSLri
    965331343U,	// tLSLrr
    25807529U,	// tLSRri
    965331625U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    1107448872U,	// tMOVSr
    311151606U,	// tMOVi8
    19446U,	// tMOVr
    25807263U,	// tMUL
    311151145U,	// tMVN
    965331614U,	// tORR
    0U,	// tPICADD
    973118029U,	// tPOP
    0U,	// tPOP_RET
    973117602U,	// tPUSH
    19426U,	// tREV
    17844U,	// tREV16
    18599U,	// tREVSH
    965331604U,	// tROR
    294373119U,	// tRSB
    965330800U,	// tSBC
    87014U,	// tSETEND
    33573304U,	// tSTMIA_UPD
    26352U,	// tSTRBi
    26352U,	// tSTRBr
    26766U,	// tSTRHi
    26766U,	// tSTRHr
    27322U,	// tSTRi
    27322U,	// tSTRr
    27322U,	// tSTRspi
    25806641U,	// tSUBi3
    965330737U,	// tSUBi8
    25806641U,	// tSUBrr
    26417U,	// tSUBspi
    1073776538U,	// tSVC
    18213U,	// tSXTB
    18605U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTPsoft
    2618U,	// tTRAP
    19358U,	// tTST
    414702U,	// tUDF
    18218U,	// tUXTB
    18610U,	// tUXTH
  };

  static const uint32_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// ABS
    0U,	// ADCri
    16384U,	// ADCrr
    32768U,	// ADCrsi
    0U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    0U,	// ADDri
    16384U,	// ADDrr
    32768U,	// ADDrsi
    0U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    8U,	// ADR
    0U,	// AESD
    0U,	// AESE
    0U,	// AESIMC
    0U,	// AESMC
    0U,	// ANDri
    16384U,	// ANDrr
    32768U,	// ANDrsi
    0U,	// ANDrsr
    16384U,	// ASRi
    16384U,	// ASRr
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    16U,	// BFC
    49176U,	// BFI
    0U,	// BICri
    16384U,	// BICrr
    32768U,	// BICrsi
    0U,	// BICrsr
    0U,	// BKPT
    0U,	// BL
    0U,	// BLX
    0U,	// BLX_pred
    0U,	// BLXi
    0U,	// BL_pred
    0U,	// BMOVPCB_CALL
    0U,	// BMOVPCRX_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    0U,	// BX
    0U,	// BXJ
    0U,	// BX_CALL
    0U,	// BX_RET
    0U,	// BX_pred
    0U,	// Bcc
    544U,	// CDP
    0U,	// CDP2
    0U,	// CLREX
    1024U,	// CLZ
    40U,	// CMNri
    1024U,	// CMNzrr
    48U,	// CMNzrsi
    56U,	// CMNzrsr
    40U,	// CMPri
    1024U,	// CMPrr
    48U,	// CMPrsi
    56U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_STRUCT_BYVAL_I32
    0U,	// CPS1p
    0U,	// CPS2p
    1048U,	// CPS3p
    1048U,	// CRC32B
    1048U,	// CRC32CB
    1048U,	// CRC32CH
    1048U,	// CRC32CW
    1048U,	// CRC32H
    1048U,	// CRC32W
    0U,	// DBG
    0U,	// DMB
    0U,	// DSB
    0U,	// EORri
    16384U,	// EORrr
    32768U,	// EORrsi
    0U,	// EORrsr
    0U,	// ERET
    0U,	// FCONSTD
    0U,	// FCONSTS
    65U,	// FLDMXDB_UPD
    1096U,	// FLDMXIA
    65U,	// FLDMXIA_UPD
    0U,	// FMSTAT
    65U,	// FSTMXDB_UPD
    1096U,	// FSTMXIA
    65U,	// FSTMXIA_UPD
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// ISB
    0U,	// ITasm
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    0U,	// Int_eh_sjlj_setup_dispatch
    0U,	// JUMPTABLE_ADDRS
    0U,	// JUMPTABLE_INSTS
    0U,	// JUMPTABLE_TBB
    0U,	// JUMPTABLE_TBH
    80U,	// LDA
    80U,	// LDAB
    80U,	// LDAEX
    80U,	// LDAEXB
    0U,	// LDAEXD
    80U,	// LDAEXH
    80U,	// LDAH
    0U,	// LDC2L_OFFSET
    1U,	// LDC2L_OPTION
    1U,	// LDC2L_POST
    0U,	// LDC2L_PRE
    0U,	// LDC2_OFFSET
    1U,	// LDC2_OPTION
    1U,	// LDC2_POST
    0U,	// LDC2_PRE
    89U,	// LDCL_OFFSET
    65633U,	// LDCL_OPTION
    82017U,	// LDCL_POST
    105U,	// LDCL_PRE
    89U,	// LDC_OFFSET
    65633U,	// LDC_OPTION
    82017U,	// LDC_POST
    105U,	// LDC_PRE
    1096U,	// LDMDA
    65U,	// LDMDA_UPD
    1096U,	// LDMDB
    65U,	// LDMDB_UPD
    1096U,	// LDMIA
    0U,	// LDMIA_RET
    65U,	// LDMIA_UPD
    1096U,	// LDMIB
    65U,	// LDMIB_UPD
    80U,	// LDRBT_POST
    98400U,	// LDRBT_POST_IMM
    98400U,	// LDRBT_POST_REG
    98400U,	// LDRB_POST_IMM
    98400U,	// LDRB_POST_REG
    112U,	// LDRB_PRE_IMM
    120U,	// LDRB_PRE_REG
    128U,	// LDRBi12
    136U,	// LDRBrs
    114688U,	// LDRD
    1179648U,	// LDRD_POST
    147456U,	// LDRD_PRE
    80U,	// LDREX
    80U,	// LDREXB
    0U,	// LDREXD
    80U,	// LDREXH
    144U,	// LDRH
    163936U,	// LDRHTi
    180320U,	// LDRHTr
    196704U,	// LDRH_POST
    152U,	// LDRH_PRE
    0U,	// LDRLIT_ga_abs
    0U,	// LDRLIT_ga_pcrel
    0U,	// LDRLIT_ga_pcrel_ldr
    144U,	// LDRSB
    163936U,	// LDRSBTi
    180320U,	// LDRSBTr
    196704U,	// LDRSB_POST
    152U,	// LDRSB_PRE
    144U,	// LDRSH
    163936U,	// LDRSHTi
    180320U,	// LDRSHTr
    196704U,	// LDRSH_POST
    152U,	// LDRSH_PRE
    80U,	// LDRT_POST
    98400U,	// LDRT_POST_IMM
    98400U,	// LDRT_POST_REG
    98400U,	// LDR_POST_IMM
    98400U,	// LDR_POST_REG
    112U,	// LDR_PRE_IMM
    120U,	// LDR_PRE_REG
    128U,	// LDRcp
    128U,	// LDRi12
    136U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    16384U,	// LSLi
    16384U,	// LSLr
    16384U,	// LSRi
    16384U,	// LSRr
    2311712U,	// MCR
    160U,	// MCR2
    3360288U,	// MCRR
    229544U,	// MCRR2
    0U,	// MEMCPY
    17842176U,	// MLA
    0U,	// MLAv5
    17842176U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    0U,	// MOVPCLR
    0U,	// MOVPCRX
    1048U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    40U,	// MOVi
    1024U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    1024U,	// MOVr
    1024U,	// MOVr_TC
    48U,	// MOVsi
    56U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    0U,	// MRC
    0U,	// MRC2
    0U,	// MRRC
    229544U,	// MRRC2
    2U,	// MRS
    176U,	// MRSbanked
    2U,	// MRSsys
    64U,	// MSR
    0U,	// MSRbanked
    2U,	// MSRi
    16384U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    40U,	// MVNi
    1024U,	// MVNr
    48U,	// MVNsi
    56U,	// MVNsr
    0U,	// ORRri
    16384U,	// ORRrr
    32768U,	// ORRrsi
    0U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    4210688U,	// PKHBT
    5259264U,	// PKHTB
    0U,	// PLDWi12
    0U,	// PLDWrs
    0U,	// PLDi12
    0U,	// PLDrs
    0U,	// PLIi12
    0U,	// PLIrs
    16384U,	// QADD
    16384U,	// QADD16
    16384U,	// QADD8
    16384U,	// QASX
    16384U,	// QDADD
    16384U,	// QDSUB
    16384U,	// QSAX
    16384U,	// QSUB
    16384U,	// QSUB16
    16384U,	// QSUB8
    1024U,	// RBIT
    1024U,	// REV
    1024U,	// REV16
    1024U,	// REVSH
    0U,	// RFEDA
    0U,	// RFEDA_UPD
    0U,	// RFEDB
    0U,	// RFEDB_UPD
    0U,	// RFEIA
    0U,	// RFEIA_UPD
    0U,	// RFEIB
    0U,	// RFEIB_UPD
    16384U,	// RORi
    16384U,	// RORr
    0U,	// RRX
    1024U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    0U,	// RSBri
    16384U,	// RSBrr
    32768U,	// RSBrsi
    0U,	// RSBrsr
    0U,	// RSCri
    16384U,	// RSCrr
    32768U,	// RSCrsi
    0U,	// RSCrsr
    16384U,	// SADD16
    16384U,	// SADD8
    16384U,	// SASX
    0U,	// SBCri
    16384U,	// SBCrr
    32768U,	// SBCrsi
    0U,	// SBCrsr
    34619392U,	// SBFX
    16384U,	// SDIV
    16384U,	// SEL
    0U,	// SETEND
    0U,	// SETPAN
    1192U,	// SHA1C
    0U,	// SHA1H
    1192U,	// SHA1M
    1192U,	// SHA1P
    1192U,	// SHA1SU0
    0U,	// SHA1SU1
    1192U,	// SHA256H
    1192U,	// SHA256H2
    0U,	// SHA256SU0
    1192U,	// SHA256SU1
    16384U,	// SHADD16
    16384U,	// SHADD8
    16384U,	// SHASX
    16384U,	// SHSAX
    16384U,	// SHSUB16
    16384U,	// SHSUB8
    0U,	// SMC
    17842176U,	// SMLABB
    17842176U,	// SMLABT
    17842176U,	// SMLAD
    17842176U,	// SMLADX
    0U,	// SMLAL
    17842176U,	// SMLALBB
    17842176U,	// SMLALBT
    17842176U,	// SMLALD
    17842176U,	// SMLALDX
    17842176U,	// SMLALTB
    17842176U,	// SMLALTT
    0U,	// SMLALv5
    17842176U,	// SMLATB
    17842176U,	// SMLATT
    17842176U,	// SMLAWB
    17842176U,	// SMLAWT
    17842176U,	// SMLSD
    17842176U,	// SMLSDX
    17842176U,	// SMLSLD
    17842176U,	// SMLSLDX
    17842176U,	// SMMLA
    17842176U,	// SMMLAR
    17842176U,	// SMMLS
    17842176U,	// SMMLSR
    16384U,	// SMMUL
    16384U,	// SMMULR
    16384U,	// SMUAD
    16384U,	// SMUADX
    16384U,	// SMULBB
    16384U,	// SMULBT
    17842176U,	// SMULL
    0U,	// SMULLv5
    16384U,	// SMULTB
    16384U,	// SMULTT
    16384U,	// SMULWB
    16384U,	// SMULWT
    16384U,	// SMUSD
    16384U,	// SMUSDX
    0U,	// SPACE
    0U,	// SRSDA
    0U,	// SRSDA_UPD
    0U,	// SRSDB
    0U,	// SRSDB_UPD
    0U,	// SRSIA
    0U,	// SRSIA_UPD
    0U,	// SRSIB
    0U,	// SRSIB_UPD
    2232U,	// SSAT
    1208U,	// SSAT16
    16384U,	// SSAX
    16384U,	// SSUB16
    16384U,	// SSUB8
    0U,	// STC2L_OFFSET
    1U,	// STC2L_OPTION
    1U,	// STC2L_POST
    0U,	// STC2L_PRE
    0U,	// STC2_OFFSET
    1U,	// STC2_OPTION
    1U,	// STC2_POST
    0U,	// STC2_PRE
    89U,	// STCL_OFFSET
    65633U,	// STCL_OPTION
    82017U,	// STCL_POST
    105U,	// STCL_PRE
    89U,	// STC_OFFSET
    65633U,	// STC_OPTION
    82017U,	// STC_POST
    105U,	// STC_PRE
    80U,	// STL
    80U,	// STLB
    245760U,	// STLEX
    245760U,	// STLEXB
    192U,	// STLEXD
    245760U,	// STLEXH
    80U,	// STLH
    1096U,	// STMDA
    65U,	// STMDA_UPD
    1096U,	// STMDB
    65U,	// STMDB_UPD
    1096U,	// STMIA
    65U,	// STMIA_UPD
    1096U,	// STMIB
    65U,	// STMIB_UPD
    80U,	// STRBT_POST
    98400U,	// STRBT_POST_IMM
    98400U,	// STRBT_POST_REG
    98400U,	// STRB_POST_IMM
    98400U,	// STRB_POST_REG
    112U,	// STRB_PRE_IMM
    120U,	// STRB_PRE_REG
    128U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    136U,	// STRBrs
    114688U,	// STRD
    1179672U,	// STRD_POST
    147480U,	// STRD_PRE
    245760U,	// STREX
    245760U,	// STREXB
    192U,	// STREXD
    245760U,	// STREXH
    144U,	// STRH
    163936U,	// STRHTi
    180320U,	// STRHTr
    196704U,	// STRH_POST
    152U,	// STRH_PRE
    0U,	// STRH_preidx
    80U,	// STRT_POST
    98400U,	// STRT_POST_IMM
    98400U,	// STRT_POST_REG
    98400U,	// STR_POST_IMM
    98400U,	// STR_POST_REG
    112U,	// STR_PRE_IMM
    120U,	// STR_PRE_REG
    128U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    136U,	// STRrs
    0U,	// SUBS_PC_LR
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    0U,	// SUBri
    16384U,	// SUBrr
    32768U,	// SUBrsi
    0U,	// SUBrsr
    0U,	// SVC
    245760U,	// SWP
    245760U,	// SWPB
    6307840U,	// SXTAB
    6307840U,	// SXTAB16
    6307840U,	// SXTAH
    2560U,	// SXTB
    2560U,	// SXTB16
    2560U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPr
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    40U,	// TEQri
    1024U,	// TEQrr
    48U,	// TEQrsi
    56U,	// TEQrsr
    0U,	// TPsoft
    0U,	// TRAP
    0U,	// TRAPNaCl
    40U,	// TSTri
    1024U,	// TSTrr
    48U,	// TSTrsi
    56U,	// TSTrsr
    16384U,	// UADD16
    16384U,	// UADD8
    16384U,	// UASX
    34619392U,	// UBFX
    0U,	// UDF
    16384U,	// UDIV
    16384U,	// UHADD16
    16384U,	// UHADD8
    16384U,	// UHASX
    16384U,	// UHSAX
    16384U,	// UHSUB16
    16384U,	// UHSUB8
    17842176U,	// UMAAL
    0U,	// UMLAL
    0U,	// UMLALv5
    17842176U,	// UMULL
    0U,	// UMULLv5
    16384U,	// UQADD16
    16384U,	// UQADD8
    16384U,	// UQASX
    16384U,	// UQSAX
    16384U,	// UQSUB16
    16384U,	// UQSUB8
    16384U,	// USAD8
    17842176U,	// USADA8
    7356416U,	// USAT
    16384U,	// USAT16
    16384U,	// USAX
    16384U,	// USUB16
    16384U,	// USUB8
    6307840U,	// UXTAB
    6307840U,	// UXTAB16
    6307840U,	// UXTAH
    2560U,	// UXTB
    2560U,	// UXTB16
    2560U,	// UXTH
    1192U,	// VABALsv2i64
    1192U,	// VABALsv4i32
    1192U,	// VABALsv8i16
    1192U,	// VABALuv2i64
    1192U,	// VABALuv4i32
    1192U,	// VABALuv8i16
    1192U,	// VABAsv16i8
    1192U,	// VABAsv2i32
    1192U,	// VABAsv4i16
    1192U,	// VABAsv4i32
    1192U,	// VABAsv8i16
    1192U,	// VABAsv8i8
    1192U,	// VABAuv16i8
    1192U,	// VABAuv2i32
    1192U,	// VABAuv4i16
    1192U,	// VABAuv4i32
    1192U,	// VABAuv8i16
    1192U,	// VABAuv8i8
    1048U,	// VABDLsv2i64
    1048U,	// VABDLsv4i32
    1048U,	// VABDLsv8i16
    1048U,	// VABDLuv2i64
    1048U,	// VABDLuv4i32
    1048U,	// VABDLuv8i16
    263712U,	// VABDfd
    263712U,	// VABDfq
    1048U,	// VABDhd
    1048U,	// VABDhq
    1048U,	// VABDsv16i8
    1048U,	// VABDsv2i32
    1048U,	// VABDsv4i16
    1048U,	// VABDsv4i32
    1048U,	// VABDsv8i16
    1048U,	// VABDsv8i8
    1048U,	// VABDuv16i8
    1048U,	// VABDuv2i32
    1048U,	// VABDuv4i16
    1048U,	// VABDuv4i32
    1048U,	// VABDuv8i16
    1048U,	// VABDuv8i8
    64U,	// VABSD
    64U,	// VABSS
    64U,	// VABSfd
    64U,	// VABSfq
    0U,	// VABShd
    0U,	// VABShq
    0U,	// VABSv16i8
    0U,	// VABSv2i32
    0U,	// VABSv4i16
    0U,	// VABSv4i32
    0U,	// VABSv8i16
    0U,	// VABSv8i8
    263712U,	// VACGEfd
    263712U,	// VACGEfq
    1048U,	// VACGEhd
    1048U,	// VACGEhq
    263712U,	// VACGTfd
    263712U,	// VACGTfq
    1048U,	// VACGThd
    1048U,	// VACGThq
    263712U,	// VADDD
    1048U,	// VADDHNv2i32
    1048U,	// VADDHNv4i16
    1048U,	// VADDHNv8i8
    1048U,	// VADDLsv2i64
    1048U,	// VADDLsv4i32
    1048U,	// VADDLsv8i16
    1048U,	// VADDLuv2i64
    1048U,	// VADDLuv4i32
    1048U,	// VADDLuv8i16
    263712U,	// VADDS
    1048U,	// VADDWsv2i64
    1048U,	// VADDWsv4i32
    1048U,	// VADDWsv8i16
    1048U,	// VADDWuv2i64
    1048U,	// VADDWuv4i32
    1048U,	// VADDWuv8i16
    263712U,	// VADDfd
    263712U,	// VADDfq
    1048U,	// VADDhd
    1048U,	// VADDhq
    1048U,	// VADDv16i8
    1048U,	// VADDv1i64
    1048U,	// VADDv2i32
    1048U,	// VADDv2i64
    1048U,	// VADDv4i16
    1048U,	// VADDv4i32
    1048U,	// VADDv8i16
    1048U,	// VADDv8i8
    16384U,	// VANDd
    16384U,	// VANDq
    16384U,	// VBICd
    0U,	// VBICiv2i32
    0U,	// VBICiv4i16
    0U,	// VBICiv4i32
    0U,	// VBICiv8i16
    16384U,	// VBICq
    278552U,	// VBIFd
    278552U,	// VBIFq
    278552U,	// VBITd
    278552U,	// VBITq
    278552U,	// VBSLd
    278552U,	// VBSLq
    263712U,	// VCEQfd
    263712U,	// VCEQfq
    1048U,	// VCEQhd
    1048U,	// VCEQhq
    1048U,	// VCEQv16i8
    1048U,	// VCEQv2i32
    1048U,	// VCEQv4i16
    1048U,	// VCEQv4i32
    1048U,	// VCEQv8i16
    1048U,	// VCEQv8i8
    2U,	// VCEQzv16i8
    200U,	// VCEQzv2f32
    2U,	// VCEQzv2i32
    2U,	// VCEQzv4f16
    200U,	// VCEQzv4f32
    2U,	// VCEQzv4i16
    2U,	// VCEQzv4i32
    2U,	// VCEQzv8f16
    2U,	// VCEQzv8i16
    2U,	// VCEQzv8i8
    263712U,	// VCGEfd
    263712U,	// VCGEfq
    1048U,	// VCGEhd
    1048U,	// VCGEhq
    1048U,	// VCGEsv16i8
    1048U,	// VCGEsv2i32
    1048U,	// VCGEsv4i16
    1048U,	// VCGEsv4i32
    1048U,	// VCGEsv8i16
    1048U,	// VCGEsv8i8
    1048U,	// VCGEuv16i8
    1048U,	// VCGEuv2i32
    1048U,	// VCGEuv4i16
    1048U,	// VCGEuv4i32
    1048U,	// VCGEuv8i16
    1048U,	// VCGEuv8i8
    2U,	// VCGEzv16i8
    200U,	// VCGEzv2f32
    2U,	// VCGEzv2i32
    2U,	// VCGEzv4f16
    200U,	// VCGEzv4f32
    2U,	// VCGEzv4i16
    2U,	// VCGEzv4i32
    2U,	// VCGEzv8f16
    2U,	// VCGEzv8i16
    2U,	// VCGEzv8i8
    263712U,	// VCGTfd
    263712U,	// VCGTfq
    1048U,	// VCGThd
    1048U,	// VCGThq
    1048U,	// VCGTsv16i8
    1048U,	// VCGTsv2i32
    1048U,	// VCGTsv4i16
    1048U,	// VCGTsv4i32
    1048U,	// VCGTsv8i16
    1048U,	// VCGTsv8i8
    1048U,	// VCGTuv16i8
    1048U,	// VCGTuv2i32
    1048U,	// VCGTuv4i16
    1048U,	// VCGTuv4i32
    1048U,	// VCGTuv8i16
    1048U,	// VCGTuv8i8
    2U,	// VCGTzv16i8
    200U,	// VCGTzv2f32
    2U,	// VCGTzv2i32
    2U,	// VCGTzv4f16
    200U,	// VCGTzv4f32
    2U,	// VCGTzv4i16
    2U,	// VCGTzv4i32
    2U,	// VCGTzv8f16
    2U,	// VCGTzv8i16
    2U,	// VCGTzv8i8
    2U,	// VCLEzv16i8
    200U,	// VCLEzv2f32
    2U,	// VCLEzv2i32
    2U,	// VCLEzv4f16
    200U,	// VCLEzv4f32
    2U,	// VCLEzv4i16
    2U,	// VCLEzv4i32
    2U,	// VCLEzv8f16
    2U,	// VCLEzv8i16
    2U,	// VCLEzv8i8
    0U,	// VCLSv16i8
    0U,	// VCLSv2i32
    0U,	// VCLSv4i16
    0U,	// VCLSv4i32
    0U,	// VCLSv8i16
    0U,	// VCLSv8i8
    2U,	// VCLTzv16i8
    200U,	// VCLTzv2f32
    2U,	// VCLTzv2i32
    2U,	// VCLTzv4f16
    200U,	// VCLTzv4f32
    2U,	// VCLTzv4i16
    2U,	// VCLTzv4i32
    2U,	// VCLTzv8f16
    2U,	// VCLTzv8i16
    2U,	// VCLTzv8i8
    0U,	// VCLZv16i8
    0U,	// VCLZv2i32
    0U,	// VCLZv4i16
    0U,	// VCLZv4i32
    0U,	// VCLZv8i16
    0U,	// VCLZv8i8
    64U,	// VCMPD
    64U,	// VCMPED
    64U,	// VCMPES
    0U,	// VCMPEZD
    0U,	// VCMPEZS
    64U,	// VCMPS
    0U,	// VCMPZD
    0U,	// VCMPZS
    1024U,	// VCNTd
    1024U,	// VCNTq
    0U,	// VCVTANSDf
    0U,	// VCVTANSDh
    0U,	// VCVTANSQf
    0U,	// VCVTANSQh
    0U,	// VCVTANUDf
    0U,	// VCVTANUDh
    0U,	// VCVTANUQf
    0U,	// VCVTANUQh
    0U,	// VCVTASD
    0U,	// VCVTASS
    0U,	// VCVTAUD
    0U,	// VCVTAUS
    0U,	// VCVTBDH
    0U,	// VCVTBHD
    0U,	// VCVTBHS
    0U,	// VCVTBSH
    0U,	// VCVTDS
    0U,	// VCVTMNSDf
    0U,	// VCVTMNSDh
    0U,	// VCVTMNSQf
    0U,	// VCVTMNSQh
    0U,	// VCVTMNUDf
    0U,	// VCVTMNUDh
    0U,	// VCVTMNUQf
    0U,	// VCVTMNUQh
    0U,	// VCVTMSD
    0U,	// VCVTMSS
    0U,	// VCVTMUD
    0U,	// VCVTMUS
    0U,	// VCVTNNSDf
    0U,	// VCVTNNSDh
    0U,	// VCVTNNSQf
    0U,	// VCVTNNSQh
    0U,	// VCVTNNUDf
    0U,	// VCVTNNUDh
    0U,	// VCVTNNUQf
    0U,	// VCVTNNUQh
    0U,	// VCVTNSD
    0U,	// VCVTNSS
    0U,	// VCVTNUD
    0U,	// VCVTNUS
    0U,	// VCVTPNSDf
    0U,	// VCVTPNSDh
    0U,	// VCVTPNSQf
    0U,	// VCVTPNSQh
    0U,	// VCVTPNUDf
    0U,	// VCVTPNUDh
    0U,	// VCVTPNUQf
    0U,	// VCVTPNUQh
    0U,	// VCVTPSD
    0U,	// VCVTPSS
    0U,	// VCVTPUD
    0U,	// VCVTPUS
    0U,	// VCVTSD
    0U,	// VCVTTDH
    0U,	// VCVTTHD
    0U,	// VCVTTHS
    0U,	// VCVTTSH
    0U,	// VCVTf2h
    0U,	// VCVTf2sd
    0U,	// VCVTf2sq
    0U,	// VCVTf2ud
    0U,	// VCVTf2uq
    67U,	// VCVTf2xsd
    67U,	// VCVTf2xsq
    67U,	// VCVTf2xud
    67U,	// VCVTf2xuq
    0U,	// VCVTh2f
    0U,	// VCVTh2sd
    0U,	// VCVTh2sq
    0U,	// VCVTh2ud
    0U,	// VCVTh2uq
    67U,	// VCVTh2xsd
    67U,	// VCVTh2xsq
    67U,	// VCVTh2xud
    67U,	// VCVTh2xuq
    0U,	// VCVTs2fd
    0U,	// VCVTs2fq
    0U,	// VCVTs2hd
    0U,	// VCVTs2hq
    0U,	// VCVTu2fd
    0U,	// VCVTu2fq
    0U,	// VCVTu2hd
    0U,	// VCVTu2hq
    67U,	// VCVTxs2fd
    67U,	// VCVTxs2fq
    67U,	// VCVTxs2hd
    67U,	// VCVTxs2hq
    67U,	// VCVTxu2fd
    67U,	// VCVTxu2fq
    67U,	// VCVTxu2hd
    67U,	// VCVTxu2hq
    263712U,	// VDIVD
    263712U,	// VDIVS
    1024U,	// VDUP16d
    1024U,	// VDUP16q
    1024U,	// VDUP32d
    1024U,	// VDUP32q
    1024U,	// VDUP8d
    1024U,	// VDUP8q
    3072U,	// VDUPLN16d
    3072U,	// VDUPLN16q
    3072U,	// VDUPLN32d
    3072U,	// VDUPLN32q
    3072U,	// VDUPLN8d
    3072U,	// VDUPLN8q
    16384U,	// VEORd
    16384U,	// VEORq
    17842176U,	// VEXTd16
    17842176U,	// VEXTd32
    17842176U,	// VEXTd8
    17842176U,	// VEXTq16
    17842176U,	// VEXTq32
    17842176U,	// VEXTq64
    17842176U,	// VEXTq8
    265763U,	// VFMAD
    265763U,	// VFMAS
    265763U,	// VFMAfd
    265763U,	// VFMAfq
    1192U,	// VFMAhd
    1192U,	// VFMAhq
    265763U,	// VFMSD
    265763U,	// VFMSS
    265763U,	// VFMSfd
    265763U,	// VFMSfq
    1192U,	// VFMShd
    1192U,	// VFMShq
    265763U,	// VFNMAD
    265763U,	// VFNMAS
    265763U,	// VFNMSD
    265763U,	// VFNMSS
    3072U,	// VGETLNi32
    3U,	// VGETLNs16
    3U,	// VGETLNs8
    3U,	// VGETLNu16
    3U,	// VGETLNu8
    1048U,	// VHADDsv16i8
    1048U,	// VHADDsv2i32
    1048U,	// VHADDsv4i16
    1048U,	// VHADDsv4i32
    1048U,	// VHADDsv8i16
    1048U,	// VHADDsv8i8
    1048U,	// VHADDuv16i8
    1048U,	// VHADDuv2i32
    1048U,	// VHADDuv4i16
    1048U,	// VHADDuv4i32
    1048U,	// VHADDuv8i16
    1048U,	// VHADDuv8i8
    1048U,	// VHSUBsv16i8
    1048U,	// VHSUBsv2i32
    1048U,	// VHSUBsv4i16
    1048U,	// VHSUBsv4i32
    1048U,	// VHSUBsv8i16
    1048U,	// VHSUBsv8i8
    1048U,	// VHSUBuv16i8
    1048U,	// VHSUBuv2i32
    1048U,	// VHSUBuv4i16
    1048U,	// VHSUBuv4i32
    1048U,	// VHSUBuv8i16
    1048U,	// VHSUBuv8i8
    67U,	// VLD1DUPd16
    211U,	// VLD1DUPd16wb_fixed
    4131U,	// VLD1DUPd16wb_register
    67U,	// VLD1DUPd32
    211U,	// VLD1DUPd32wb_fixed
    4131U,	// VLD1DUPd32wb_register
    67U,	// VLD1DUPd8
    211U,	// VLD1DUPd8wb_fixed
    4131U,	// VLD1DUPd8wb_register
    67U,	// VLD1DUPq16
    211U,	// VLD1DUPq16wb_fixed
    4131U,	// VLD1DUPq16wb_register
    67U,	// VLD1DUPq32
    211U,	// VLD1DUPq32wb_fixed
    4131U,	// VLD1DUPq32wb_register
    67U,	// VLD1DUPq8
    211U,	// VLD1DUPq8wb_fixed
    4131U,	// VLD1DUPq8wb_register
    299740U,	// VLD1LNd16
    316132U,	// VLD1LNd16_UPD
    299740U,	// VLD1LNd32
    316132U,	// VLD1LNd32_UPD
    299740U,	// VLD1LNd8
    316132U,	// VLD1LNd8_UPD
    1256U,	// VLD1LNdAsm_16
    1256U,	// VLD1LNdAsm_32
    1256U,	// VLD1LNdAsm_8
    5352U,	// VLD1LNdWB_fixed_Asm_16
    5352U,	// VLD1LNdWB_fixed_Asm_32
    5352U,	// VLD1LNdWB_fixed_Asm_8
    327912U,	// VLD1LNdWB_register_Asm_16
    327912U,	// VLD1LNdWB_register_Asm_32
    327912U,	// VLD1LNdWB_register_Asm_8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    67U,	// VLD1d16
    67U,	// VLD1d16Q
    211U,	// VLD1d16Qwb_fixed
    4131U,	// VLD1d16Qwb_register
    67U,	// VLD1d16T
    211U,	// VLD1d16Twb_fixed
    4131U,	// VLD1d16Twb_register
    211U,	// VLD1d16wb_fixed
    4131U,	// VLD1d16wb_register
    67U,	// VLD1d32
    67U,	// VLD1d32Q
    211U,	// VLD1d32Qwb_fixed
    4131U,	// VLD1d32Qwb_register
    67U,	// VLD1d32T
    211U,	// VLD1d32Twb_fixed
    4131U,	// VLD1d32Twb_register
    211U,	// VLD1d32wb_fixed
    4131U,	// VLD1d32wb_register
    67U,	// VLD1d64
    67U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    0U,	// VLD1d64QPseudoWB_fixed
    0U,	// VLD1d64QPseudoWB_register
    211U,	// VLD1d64Qwb_fixed
    4131U,	// VLD1d64Qwb_register
    67U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    0U,	// VLD1d64TPseudoWB_fixed
    0U,	// VLD1d64TPseudoWB_register
    211U,	// VLD1d64Twb_fixed
    4131U,	// VLD1d64Twb_register
    211U,	// VLD1d64wb_fixed
    4131U,	// VLD1d64wb_register
    67U,	// VLD1d8
    67U,	// VLD1d8Q
    211U,	// VLD1d8Qwb_fixed
    4131U,	// VLD1d8Qwb_register
    67U,	// VLD1d8T
    211U,	// VLD1d8Twb_fixed
    4131U,	// VLD1d8Twb_register
    211U,	// VLD1d8wb_fixed
    4131U,	// VLD1d8wb_register
    67U,	// VLD1q16
    211U,	// VLD1q16wb_fixed
    4131U,	// VLD1q16wb_register
    67U,	// VLD1q32
    211U,	// VLD1q32wb_fixed
    4131U,	// VLD1q32wb_register
    67U,	// VLD1q64
    211U,	// VLD1q64wb_fixed
    4131U,	// VLD1q64wb_register
    67U,	// VLD1q8
    211U,	// VLD1q8wb_fixed
    4131U,	// VLD1q8wb_register
    67U,	// VLD2DUPd16
    211U,	// VLD2DUPd16wb_fixed
    4131U,	// VLD2DUPd16wb_register
    67U,	// VLD2DUPd16x2
    211U,	// VLD2DUPd16x2wb_fixed
    4131U,	// VLD2DUPd16x2wb_register
    67U,	// VLD2DUPd32
    211U,	// VLD2DUPd32wb_fixed
    4131U,	// VLD2DUPd32wb_register
    67U,	// VLD2DUPd32x2
    211U,	// VLD2DUPd32x2wb_fixed
    4131U,	// VLD2DUPd32x2wb_register
    67U,	// VLD2DUPd8
    211U,	// VLD2DUPd8wb_fixed
    4131U,	// VLD2DUPd8wb_register
    67U,	// VLD2DUPd8x2
    211U,	// VLD2DUPd8x2wb_fixed
    4131U,	// VLD2DUPd8x2wb_register
    349924U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    366836U,	// VLD2LNd16_UPD
    349924U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    366836U,	// VLD2LNd32_UPD
    349924U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    366836U,	// VLD2LNd8_UPD
    1256U,	// VLD2LNdAsm_16
    1256U,	// VLD2LNdAsm_32
    1256U,	// VLD2LNdAsm_8
    5352U,	// VLD2LNdWB_fixed_Asm_16
    5352U,	// VLD2LNdWB_fixed_Asm_32
    5352U,	// VLD2LNdWB_fixed_Asm_8
    327912U,	// VLD2LNdWB_register_Asm_16
    327912U,	// VLD2LNdWB_register_Asm_32
    327912U,	// VLD2LNdWB_register_Asm_8
    349924U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    366836U,	// VLD2LNq16_UPD
    349924U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    366836U,	// VLD2LNq32_UPD
    1256U,	// VLD2LNqAsm_16
    1256U,	// VLD2LNqAsm_32
    5352U,	// VLD2LNqWB_fixed_Asm_16
    5352U,	// VLD2LNqWB_fixed_Asm_32
    327912U,	// VLD2LNqWB_register_Asm_16
    327912U,	// VLD2LNqWB_register_Asm_32
    67U,	// VLD2b16
    211U,	// VLD2b16wb_fixed
    4131U,	// VLD2b16wb_register
    67U,	// VLD2b32
    211U,	// VLD2b32wb_fixed
    4131U,	// VLD2b32wb_register
    67U,	// VLD2b8
    211U,	// VLD2b8wb_fixed
    4131U,	// VLD2b8wb_register
    67U,	// VLD2d16
    211U,	// VLD2d16wb_fixed
    4131U,	// VLD2d16wb_register
    67U,	// VLD2d32
    211U,	// VLD2d32wb_fixed
    4131U,	// VLD2d32wb_register
    67U,	// VLD2d8
    211U,	// VLD2d8wb_fixed
    4131U,	// VLD2d8wb_register
    67U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    211U,	// VLD2q16wb_fixed
    4131U,	// VLD2q16wb_register
    67U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    211U,	// VLD2q32wb_fixed
    4131U,	// VLD2q32wb_register
    67U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    211U,	// VLD2q8wb_fixed
    4131U,	// VLD2q8wb_register
    6908U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    384252U,	// VLD3DUPd16_UPD
    6908U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    384252U,	// VLD3DUPd32_UPD
    6908U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    384252U,	// VLD3DUPd8_UPD
    0U,	// VLD3DUPdAsm_16
    0U,	// VLD3DUPdAsm_32
    0U,	// VLD3DUPdAsm_8
    4U,	// VLD3DUPdWB_fixed_Asm_16
    4U,	// VLD3DUPdWB_fixed_Asm_32
    4U,	// VLD3DUPdWB_fixed_Asm_8
    1192U,	// VLD3DUPdWB_register_Asm_16
    1192U,	// VLD3DUPdWB_register_Asm_32
    1192U,	// VLD3DUPdWB_register_Asm_8
    6908U,	// VLD3DUPq16
    384252U,	// VLD3DUPq16_UPD
    6908U,	// VLD3DUPq32
    384252U,	// VLD3DUPq32_UPD
    6908U,	// VLD3DUPq8
    384252U,	// VLD3DUPq8_UPD
    0U,	// VLD3DUPqAsm_16
    0U,	// VLD3DUPqAsm_32
    0U,	// VLD3DUPqAsm_8
    4U,	// VLD3DUPqWB_fixed_Asm_16
    4U,	// VLD3DUPqWB_fixed_Asm_32
    4U,	// VLD3DUPqWB_fixed_Asm_8
    1192U,	// VLD3DUPqWB_register_Asm_16
    1192U,	// VLD3DUPqWB_register_Asm_32
    1192U,	// VLD3DUPqWB_register_Asm_8
    399604U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    414468U,	// VLD3LNd16_UPD
    399604U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    414468U,	// VLD3LNd32_UPD
    399604U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    414468U,	// VLD3LNd8_UPD
    1256U,	// VLD3LNdAsm_16
    1256U,	// VLD3LNdAsm_32
    1256U,	// VLD3LNdAsm_8
    5352U,	// VLD3LNdWB_fixed_Asm_16
    5352U,	// VLD3LNdWB_fixed_Asm_32
    5352U,	// VLD3LNdWB_fixed_Asm_8
    327912U,	// VLD3LNdWB_register_Asm_16
    327912U,	// VLD3LNdWB_register_Asm_32
    327912U,	// VLD3LNdWB_register_Asm_8
    399604U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    414468U,	// VLD3LNq16_UPD
    399604U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    414468U,	// VLD3LNq32_UPD
    1256U,	// VLD3LNqAsm_16
    1256U,	// VLD3LNqAsm_32
    5352U,	// VLD3LNqWB_fixed_Asm_16
    5352U,	// VLD3LNqWB_fixed_Asm_32
    327912U,	// VLD3LNqWB_register_Asm_16
    327912U,	// VLD3LNqWB_register_Asm_32
    58736640U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    75513856U,	// VLD3d16_UPD
    58736640U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    75513856U,	// VLD3d32_UPD
    58736640U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    75513856U,	// VLD3d8_UPD
    67U,	// VLD3dAsm_16
    67U,	// VLD3dAsm_32
    67U,	// VLD3dAsm_8
    211U,	// VLD3dWB_fixed_Asm_16
    211U,	// VLD3dWB_fixed_Asm_32
    211U,	// VLD3dWB_fixed_Asm_8
    265763U,	// VLD3dWB_register_Asm_16
    265763U,	// VLD3dWB_register_Asm_32
    265763U,	// VLD3dWB_register_Asm_8
    58736640U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    75513856U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    58736640U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    75513856U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    58736640U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    75513856U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    0U,	// VLD3qAsm_16
    0U,	// VLD3qAsm_32
    0U,	// VLD3qAsm_8
    4U,	// VLD3qWB_fixed_Asm_16
    4U,	// VLD3qWB_fixed_Asm_32
    4U,	// VLD3qWB_fixed_Asm_8
    1192U,	// VLD3qWB_register_Asm_16
    1192U,	// VLD3qWB_register_Asm_32
    1192U,	// VLD3qWB_register_Asm_8
    269580U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    7948U,	// VLD4DUPd16_UPD
    269580U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    7948U,	// VLD4DUPd32_UPD
    269580U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    7948U,	// VLD4DUPd8_UPD
    0U,	// VLD4DUPdAsm_16
    0U,	// VLD4DUPdAsm_32
    0U,	// VLD4DUPdAsm_8
    4U,	// VLD4DUPdWB_fixed_Asm_16
    4U,	// VLD4DUPdWB_fixed_Asm_32
    4U,	// VLD4DUPdWB_fixed_Asm_8
    1192U,	// VLD4DUPdWB_register_Asm_16
    1192U,	// VLD4DUPdWB_register_Asm_32
    1192U,	// VLD4DUPdWB_register_Asm_8
    269580U,	// VLD4DUPq16
    7948U,	// VLD4DUPq16_UPD
    269580U,	// VLD4DUPq32
    7948U,	// VLD4DUPq32_UPD
    269580U,	// VLD4DUPq8
    7948U,	// VLD4DUPq8_UPD
    0U,	// VLD4DUPqAsm_16
    0U,	// VLD4DUPqAsm_32
    0U,	// VLD4DUPqAsm_8
    4U,	// VLD4DUPqWB_fixed_Asm_16
    4U,	// VLD4DUPqWB_fixed_Asm_32
    4U,	// VLD4DUPqWB_fixed_Asm_8
    1192U,	// VLD4DUPqWB_register_Asm_16
    1192U,	// VLD4DUPqWB_register_Asm_32
    1192U,	// VLD4DUPqWB_register_Asm_8
    93607684U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    276U,	// VLD4LNd16_UPD
    93607684U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    276U,	// VLD4LNd32_UPD
    93607684U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    276U,	// VLD4LNd8_UPD
    1256U,	// VLD4LNdAsm_16
    1256U,	// VLD4LNdAsm_32
    1256U,	// VLD4LNdAsm_8
    5352U,	// VLD4LNdWB_fixed_Asm_16
    5352U,	// VLD4LNdWB_fixed_Asm_32
    5352U,	// VLD4LNdWB_fixed_Asm_8
    327912U,	// VLD4LNdWB_register_Asm_16
    327912U,	// VLD4LNdWB_register_Asm_32
    327912U,	// VLD4LNdWB_register_Asm_8
    93607684U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    276U,	// VLD4LNq16_UPD
    93607684U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    276U,	// VLD4LNq32_UPD
    1256U,	// VLD4LNqAsm_16
    1256U,	// VLD4LNqAsm_32
    5352U,	// VLD4LNqWB_fixed_Asm_16
    5352U,	// VLD4LNqWB_fixed_Asm_32
    327912U,	// VLD4LNqWB_register_Asm_16
    327912U,	// VLD4LNqWB_register_Asm_32
    286277632U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    823148544U,	// VLD4d16_UPD
    286277632U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    823148544U,	// VLD4d32_UPD
    286277632U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    823148544U,	// VLD4d8_UPD
    67U,	// VLD4dAsm_16
    67U,	// VLD4dAsm_32
    67U,	// VLD4dAsm_8
    211U,	// VLD4dWB_fixed_Asm_16
    211U,	// VLD4dWB_fixed_Asm_32
    211U,	// VLD4dWB_fixed_Asm_8
    265763U,	// VLD4dWB_register_Asm_16
    265763U,	// VLD4dWB_register_Asm_32
    265763U,	// VLD4dWB_register_Asm_8
    286277632U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    823148544U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    286277632U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    823148544U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    286277632U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    823148544U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    0U,	// VLD4qAsm_16
    0U,	// VLD4qAsm_32
    0U,	// VLD4qAsm_8
    4U,	// VLD4qWB_fixed_Asm_16
    4U,	// VLD4qWB_fixed_Asm_32
    4U,	// VLD4qWB_fixed_Asm_8
    1192U,	// VLD4qWB_register_Asm_16
    1192U,	// VLD4qWB_register_Asm_32
    1192U,	// VLD4qWB_register_Asm_8
    65U,	// VLDMDDB_UPD
    1096U,	// VLDMDIA
    65U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    65U,	// VLDMSDB_UPD
    1096U,	// VLDMSIA
    65U,	// VLDMSIA_UPD
    280U,	// VLDRD
    280U,	// VLDRS
    1048U,	// VMAXNMD
    1048U,	// VMAXNMNDf
    1048U,	// VMAXNMNDh
    1048U,	// VMAXNMNQf
    1048U,	// VMAXNMNQh
    1048U,	// VMAXNMS
    263712U,	// VMAXfd
    263712U,	// VMAXfq
    1048U,	// VMAXhd
    1048U,	// VMAXhq
    1048U,	// VMAXsv16i8
    1048U,	// VMAXsv2i32
    1048U,	// VMAXsv4i16
    1048U,	// VMAXsv4i32
    1048U,	// VMAXsv8i16
    1048U,	// VMAXsv8i8
    1048U,	// VMAXuv16i8
    1048U,	// VMAXuv2i32
    1048U,	// VMAXuv4i16
    1048U,	// VMAXuv4i32
    1048U,	// VMAXuv8i16
    1048U,	// VMAXuv8i8
    1048U,	// VMINNMD
    1048U,	// VMINNMNDf
    1048U,	// VMINNMNDh
    1048U,	// VMINNMNQf
    1048U,	// VMINNMNQh
    1048U,	// VMINNMS
    263712U,	// VMINfd
    263712U,	// VMINfq
    1048U,	// VMINhd
    1048U,	// VMINhq
    1048U,	// VMINsv16i8
    1048U,	// VMINsv2i32
    1048U,	// VMINsv4i16
    1048U,	// VMINsv4i32
    1048U,	// VMINsv8i16
    1048U,	// VMINsv8i8
    1048U,	// VMINuv16i8
    1048U,	// VMINuv2i32
    1048U,	// VMINuv4i16
    1048U,	// VMINuv4i32
    1048U,	// VMINuv8i16
    1048U,	// VMINuv8i8
    265763U,	// VMLAD
    8360U,	// VMLALslsv2i32
    8360U,	// VMLALslsv4i16
    8360U,	// VMLALsluv2i32
    8360U,	// VMLALsluv4i16
    1192U,	// VMLALsv2i64
    1192U,	// VMLALsv4i32
    1192U,	// VMLALsv8i16
    1192U,	// VMLALuv2i64
    1192U,	// VMLALuv4i32
    1192U,	// VMLALuv8i16
    265763U,	// VMLAS
    265763U,	// VMLAfd
    265763U,	// VMLAfq
    1192U,	// VMLAhd
    1192U,	// VMLAhq
    429603U,	// VMLAslfd
    429603U,	// VMLAslfq
    8360U,	// VMLAslhd
    8360U,	// VMLAslhq
    8360U,	// VMLAslv2i32
    8360U,	// VMLAslv4i16
    8360U,	// VMLAslv4i32
    8360U,	// VMLAslv8i16
    1192U,	// VMLAv16i8
    1192U,	// VMLAv2i32
    1192U,	// VMLAv4i16
    1192U,	// VMLAv4i32
    1192U,	// VMLAv8i16
    1192U,	// VMLAv8i8
    265763U,	// VMLSD
    8360U,	// VMLSLslsv2i32
    8360U,	// VMLSLslsv4i16
    8360U,	// VMLSLsluv2i32
    8360U,	// VMLSLsluv4i16
    1192U,	// VMLSLsv2i64
    1192U,	// VMLSLsv4i32
    1192U,	// VMLSLsv8i16
    1192U,	// VMLSLuv2i64
    1192U,	// VMLSLuv4i32
    1192U,	// VMLSLuv8i16
    265763U,	// VMLSS
    265763U,	// VMLSfd
    265763U,	// VMLSfq
    1192U,	// VMLShd
    1192U,	// VMLShq
    429603U,	// VMLSslfd
    429603U,	// VMLSslfq
    8360U,	// VMLSslhd
    8360U,	// VMLSslhq
    8360U,	// VMLSslv2i32
    8360U,	// VMLSslv4i16
    8360U,	// VMLSslv4i32
    8360U,	// VMLSslv8i16
    1192U,	// VMLSv16i8
    1192U,	// VMLSv2i32
    1192U,	// VMLSv4i16
    1192U,	// VMLSv4i32
    1192U,	// VMLSv8i16
    1192U,	// VMLSv8i8
    64U,	// VMOVD
    0U,	// VMOVD0
    16384U,	// VMOVDRR
    0U,	// VMOVDcc
    0U,	// VMOVLsv2i64
    0U,	// VMOVLsv4i32
    0U,	// VMOVLsv8i16
    0U,	// VMOVLuv2i64
    0U,	// VMOVLuv4i32
    0U,	// VMOVLuv8i16
    0U,	// VMOVNv2i32
    0U,	// VMOVNv4i16
    0U,	// VMOVNv8i8
    0U,	// VMOVQ0
    16384U,	// VMOVRRD
    17842176U,	// VMOVRRS
    1024U,	// VMOVRS
    64U,	// VMOVS
    1024U,	// VMOVSR
    17842176U,	// VMOVSRR
    0U,	// VMOVScc
    0U,	// VMOVv16i8
    0U,	// VMOVv1i64
    0U,	// VMOVv2f32
    0U,	// VMOVv2i32
    0U,	// VMOVv2i64
    0U,	// VMOVv4f32
    0U,	// VMOVv4i16
    0U,	// VMOVv4i32
    0U,	// VMOVv8i16
    0U,	// VMOVv8i8
    4U,	// VMRS
    5U,	// VMRS_FPEXC
    5U,	// VMRS_FPINST
    5U,	// VMRS_FPINST2
    5U,	// VMRS_FPSID
    6U,	// VMRS_MVFR0
    6U,	// VMRS_MVFR1
    6U,	// VMRS_MVFR2
    0U,	// VMSR
    0U,	// VMSR_FPEXC
    0U,	// VMSR_FPINST
    0U,	// VMSR_FPINST2
    0U,	// VMSR_FPSID
    263712U,	// VMULD
    1048U,	// VMULLp64
    0U,	// VMULLp8
    8728U,	// VMULLslsv2i32
    8728U,	// VMULLslsv4i16
    8728U,	// VMULLsluv2i32
    8728U,	// VMULLsluv4i16
    1048U,	// VMULLsv2i64
    1048U,	// VMULLsv4i32
    1048U,	// VMULLsv8i16
    1048U,	// VMULLuv2i64
    1048U,	// VMULLuv4i32
    1048U,	// VMULLuv8i16
    263712U,	// VMULS
    263712U,	// VMULfd
    263712U,	// VMULfq
    1048U,	// VMULhd
    1048U,	// VMULhq
    0U,	// VMULpd
    0U,	// VMULpq
    443936U,	// VMULslfd
    443936U,	// VMULslfq
    8728U,	// VMULslhd
    8728U,	// VMULslhq
    8728U,	// VMULslv2i32
    8728U,	// VMULslv4i16
    8728U,	// VMULslv4i32
    8728U,	// VMULslv8i16
    1048U,	// VMULv16i8
    1048U,	// VMULv2i32
    1048U,	// VMULv4i16
    1048U,	// VMULv4i32
    1048U,	// VMULv8i16
    1048U,	// VMULv8i8
    1024U,	// VMVNd
    1024U,	// VMVNq
    0U,	// VMVNv2i32
    0U,	// VMVNv4i16
    0U,	// VMVNv4i32
    0U,	// VMVNv8i16
    64U,	// VNEGD
    64U,	// VNEGS
    64U,	// VNEGf32q
    64U,	// VNEGfd
    0U,	// VNEGhd
    0U,	// VNEGhq
    0U,	// VNEGs16d
    0U,	// VNEGs16q
    0U,	// VNEGs32d
    0U,	// VNEGs32q
    0U,	// VNEGs8d
    0U,	// VNEGs8q
    265763U,	// VNMLAD
    265763U,	// VNMLAS
    265763U,	// VNMLSD
    265763U,	// VNMLSS
    263712U,	// VNMULD
    263712U,	// VNMULS
    16384U,	// VORNd
    16384U,	// VORNq
    16384U,	// VORRd
    0U,	// VORRiv2i32
    0U,	// VORRiv4i16
    0U,	// VORRiv4i32
    0U,	// VORRiv8i16
    16384U,	// VORRq
    0U,	// VPADALsv16i8
    0U,	// VPADALsv2i32
    0U,	// VPADALsv4i16
    0U,	// VPADALsv4i32
    0U,	// VPADALsv8i16
    0U,	// VPADALsv8i8
    0U,	// VPADALuv16i8
    0U,	// VPADALuv2i32
    0U,	// VPADALuv4i16
    0U,	// VPADALuv4i32
    0U,	// VPADALuv8i16
    0U,	// VPADALuv8i8
    0U,	// VPADDLsv16i8
    0U,	// VPADDLsv2i32
    0U,	// VPADDLsv4i16
    0U,	// VPADDLsv4i32
    0U,	// VPADDLsv8i16
    0U,	// VPADDLsv8i8
    0U,	// VPADDLuv16i8
    0U,	// VPADDLuv2i32
    0U,	// VPADDLuv4i16
    0U,	// VPADDLuv4i32
    0U,	// VPADDLuv8i16
    0U,	// VPADDLuv8i8
    263712U,	// VPADDf
    1048U,	// VPADDh
    1048U,	// VPADDi16
    1048U,	// VPADDi32
    1048U,	// VPADDi8
    263712U,	// VPMAXf
    1048U,	// VPMAXh
    1048U,	// VPMAXs16
    1048U,	// VPMAXs32
    1048U,	// VPMAXs8
    1048U,	// VPMAXu16
    1048U,	// VPMAXu32
    1048U,	// VPMAXu8
    263712U,	// VPMINf
    1048U,	// VPMINh
    1048U,	// VPMINs16
    1048U,	// VPMINs32
    1048U,	// VPMINs8
    1048U,	// VPMINu16
    1048U,	// VPMINu32
    1048U,	// VPMINu8
    0U,	// VQABSv16i8
    0U,	// VQABSv2i32
    0U,	// VQABSv4i16
    0U,	// VQABSv4i32
    0U,	// VQABSv8i16
    0U,	// VQABSv8i8
    1048U,	// VQADDsv16i8
    1048U,	// VQADDsv1i64
    1048U,	// VQADDsv2i32
    1048U,	// VQADDsv2i64
    1048U,	// VQADDsv4i16
    1048U,	// VQADDsv4i32
    1048U,	// VQADDsv8i16
    1048U,	// VQADDsv8i8
    1048U,	// VQADDuv16i8
    1048U,	// VQADDuv1i64
    1048U,	// VQADDuv2i32
    1048U,	// VQADDuv2i64
    1048U,	// VQADDuv4i16
    1048U,	// VQADDuv4i32
    1048U,	// VQADDuv8i16
    1048U,	// VQADDuv8i8
    8360U,	// VQDMLALslv2i32
    8360U,	// VQDMLALslv4i16
    1192U,	// VQDMLALv2i64
    1192U,	// VQDMLALv4i32
    8360U,	// VQDMLSLslv2i32
    8360U,	// VQDMLSLslv4i16
    1192U,	// VQDMLSLv2i64
    1192U,	// VQDMLSLv4i32
    8728U,	// VQDMULHslv2i32
    8728U,	// VQDMULHslv4i16
    8728U,	// VQDMULHslv4i32
    8728U,	// VQDMULHslv8i16
    1048U,	// VQDMULHv2i32
    1048U,	// VQDMULHv4i16
    1048U,	// VQDMULHv4i32
    1048U,	// VQDMULHv8i16
    8728U,	// VQDMULLslv2i32
    8728U,	// VQDMULLslv4i16
    1048U,	// VQDMULLv2i64
    1048U,	// VQDMULLv4i32
    0U,	// VQMOVNsuv2i32
    0U,	// VQMOVNsuv4i16
    0U,	// VQMOVNsuv8i8
    0U,	// VQMOVNsv2i32
    0U,	// VQMOVNsv4i16
    0U,	// VQMOVNsv8i8
    0U,	// VQMOVNuv2i32
    0U,	// VQMOVNuv4i16
    0U,	// VQMOVNuv8i8
    0U,	// VQNEGv16i8
    0U,	// VQNEGv2i32
    0U,	// VQNEGv4i16
    0U,	// VQNEGv4i32
    0U,	// VQNEGv8i16
    0U,	// VQNEGv8i8
    8360U,	// VQRDMLAHslv2i32
    8360U,	// VQRDMLAHslv4i16
    8360U,	// VQRDMLAHslv4i32
    8360U,	// VQRDMLAHslv8i16
    1192U,	// VQRDMLAHv2i32
    1192U,	// VQRDMLAHv4i16
    1192U,	// VQRDMLAHv4i32
    1192U,	// VQRDMLAHv8i16
    8360U,	// VQRDMLSHslv2i32
    8360U,	// VQRDMLSHslv4i16
    8360U,	// VQRDMLSHslv4i32
    8360U,	// VQRDMLSHslv8i16
    1192U,	// VQRDMLSHv2i32
    1192U,	// VQRDMLSHv4i16
    1192U,	// VQRDMLSHv4i32
    1192U,	// VQRDMLSHv8i16
    8728U,	// VQRDMULHslv2i32
    8728U,	// VQRDMULHslv4i16
    8728U,	// VQRDMULHslv4i32
    8728U,	// VQRDMULHslv8i16
    1048U,	// VQRDMULHv2i32
    1048U,	// VQRDMULHv4i16
    1048U,	// VQRDMULHv4i32
    1048U,	// VQRDMULHv8i16
    1048U,	// VQRSHLsv16i8
    1048U,	// VQRSHLsv1i64
    1048U,	// VQRSHLsv2i32
    1048U,	// VQRSHLsv2i64
    1048U,	// VQRSHLsv4i16
    1048U,	// VQRSHLsv4i32
    1048U,	// VQRSHLsv8i16
    1048U,	// VQRSHLsv8i8
    1048U,	// VQRSHLuv16i8
    1048U,	// VQRSHLuv1i64
    1048U,	// VQRSHLuv2i32
    1048U,	// VQRSHLuv2i64
    1048U,	// VQRSHLuv4i16
    1048U,	// VQRSHLuv4i32
    1048U,	// VQRSHLuv8i16
    1048U,	// VQRSHLuv8i8
    1048U,	// VQRSHRNsv2i32
    1048U,	// VQRSHRNsv4i16
    1048U,	// VQRSHRNsv8i8
    1048U,	// VQRSHRNuv2i32
    1048U,	// VQRSHRNuv4i16
    1048U,	// VQRSHRNuv8i8
    1048U,	// VQRSHRUNv2i32
    1048U,	// VQRSHRUNv4i16
    1048U,	// VQRSHRUNv8i8
    1048U,	// VQSHLsiv16i8
    1048U,	// VQSHLsiv1i64
    1048U,	// VQSHLsiv2i32
    1048U,	// VQSHLsiv2i64
    1048U,	// VQSHLsiv4i16
    1048U,	// VQSHLsiv4i32
    1048U,	// VQSHLsiv8i16
    1048U,	// VQSHLsiv8i8
    1048U,	// VQSHLsuv16i8
    1048U,	// VQSHLsuv1i64
    1048U,	// VQSHLsuv2i32
    1048U,	// VQSHLsuv2i64
    1048U,	// VQSHLsuv4i16
    1048U,	// VQSHLsuv4i32
    1048U,	// VQSHLsuv8i16
    1048U,	// VQSHLsuv8i8
    1048U,	// VQSHLsv16i8
    1048U,	// VQSHLsv1i64
    1048U,	// VQSHLsv2i32
    1048U,	// VQSHLsv2i64
    1048U,	// VQSHLsv4i16
    1048U,	// VQSHLsv4i32
    1048U,	// VQSHLsv8i16
    1048U,	// VQSHLsv8i8
    1048U,	// VQSHLuiv16i8
    1048U,	// VQSHLuiv1i64
    1048U,	// VQSHLuiv2i32
    1048U,	// VQSHLuiv2i64
    1048U,	// VQSHLuiv4i16
    1048U,	// VQSHLuiv4i32
    1048U,	// VQSHLuiv8i16
    1048U,	// VQSHLuiv8i8
    1048U,	// VQSHLuv16i8
    1048U,	// VQSHLuv1i64
    1048U,	// VQSHLuv2i32
    1048U,	// VQSHLuv2i64
    1048U,	// VQSHLuv4i16
    1048U,	// VQSHLuv4i32
    1048U,	// VQSHLuv8i16
    1048U,	// VQSHLuv8i8
    1048U,	// VQSHRNsv2i32
    1048U,	// VQSHRNsv4i16
    1048U,	// VQSHRNsv8i8
    1048U,	// VQSHRNuv2i32
    1048U,	// VQSHRNuv4i16
    1048U,	// VQSHRNuv8i8
    1048U,	// VQSHRUNv2i32
    1048U,	// VQSHRUNv4i16
    1048U,	// VQSHRUNv8i8
    1048U,	// VQSUBsv16i8
    1048U,	// VQSUBsv1i64
    1048U,	// VQSUBsv2i32
    1048U,	// VQSUBsv2i64
    1048U,	// VQSUBsv4i16
    1048U,	// VQSUBsv4i32
    1048U,	// VQSUBsv8i16
    1048U,	// VQSUBsv8i8
    1048U,	// VQSUBuv16i8
    1048U,	// VQSUBuv1i64
    1048U,	// VQSUBuv2i32
    1048U,	// VQSUBuv2i64
    1048U,	// VQSUBuv4i16
    1048U,	// VQSUBuv4i32
    1048U,	// VQSUBuv8i16
    1048U,	// VQSUBuv8i8
    1048U,	// VRADDHNv2i32
    1048U,	// VRADDHNv4i16
    1048U,	// VRADDHNv8i8
    0U,	// VRECPEd
    64U,	// VRECPEfd
    64U,	// VRECPEfq
    0U,	// VRECPEhd
    0U,	// VRECPEhq
    0U,	// VRECPEq
    263712U,	// VRECPSfd
    263712U,	// VRECPSfq
    1048U,	// VRECPShd
    1048U,	// VRECPShq
    1024U,	// VREV16d8
    1024U,	// VREV16q8
    1024U,	// VREV32d16
    1024U,	// VREV32d8
    1024U,	// VREV32q16
    1024U,	// VREV32q8
    1024U,	// VREV64d16
    1024U,	// VREV64d32
    1024U,	// VREV64d8
    1024U,	// VREV64q16
    1024U,	// VREV64q32
    1024U,	// VREV64q8
    1048U,	// VRHADDsv16i8
    1048U,	// VRHADDsv2i32
    1048U,	// VRHADDsv4i16
    1048U,	// VRHADDsv4i32
    1048U,	// VRHADDsv8i16
    1048U,	// VRHADDsv8i8
    1048U,	// VRHADDuv16i8
    1048U,	// VRHADDuv2i32
    1048U,	// VRHADDuv4i16
    1048U,	// VRHADDuv4i32
    1048U,	// VRHADDuv8i16
    1048U,	// VRHADDuv8i8
    0U,	// VRINTAD
    0U,	// VRINTANDf
    0U,	// VRINTANDh
    0U,	// VRINTANQf
    0U,	// VRINTANQh
    0U,	// VRINTAS
    0U,	// VRINTMD
    0U,	// VRINTMNDf
    0U,	// VRINTMNDh
    0U,	// VRINTMNQf
    0U,	// VRINTMNQh
    0U,	// VRINTMS
    0U,	// VRINTND
    0U,	// VRINTNNDf
    0U,	// VRINTNNDh
    0U,	// VRINTNNQf
    0U,	// VRINTNNQh
    0U,	// VRINTNS
    0U,	// VRINTPD
    0U,	// VRINTPNDf
    0U,	// VRINTPNDh
    0U,	// VRINTPNQf
    0U,	// VRINTPNQh
    0U,	// VRINTPS
    64U,	// VRINTRD
    64U,	// VRINTRS
    64U,	// VRINTXD
    0U,	// VRINTXNDf
    0U,	// VRINTXNDh
    0U,	// VRINTXNQf
    0U,	// VRINTXNQh
    64U,	// VRINTXS
    64U,	// VRINTZD
    0U,	// VRINTZNDf
    0U,	// VRINTZNDh
    0U,	// VRINTZNQf
    0U,	// VRINTZNQh
    64U,	// VRINTZS
    1048U,	// VRSHLsv16i8
    1048U,	// VRSHLsv1i64
    1048U,	// VRSHLsv2i32
    1048U,	// VRSHLsv2i64
    1048U,	// VRSHLsv4i16
    1048U,	// VRSHLsv4i32
    1048U,	// VRSHLsv8i16
    1048U,	// VRSHLsv8i8
    1048U,	// VRSHLuv16i8
    1048U,	// VRSHLuv1i64
    1048U,	// VRSHLuv2i32
    1048U,	// VRSHLuv2i64
    1048U,	// VRSHLuv4i16
    1048U,	// VRSHLuv4i32
    1048U,	// VRSHLuv8i16
    1048U,	// VRSHLuv8i8
    1048U,	// VRSHRNv2i32
    1048U,	// VRSHRNv4i16
    1048U,	// VRSHRNv8i8
    1048U,	// VRSHRsv16i8
    1048U,	// VRSHRsv1i64
    1048U,	// VRSHRsv2i32
    1048U,	// VRSHRsv2i64
    1048U,	// VRSHRsv4i16
    1048U,	// VRSHRsv4i32
    1048U,	// VRSHRsv8i16
    1048U,	// VRSHRsv8i8
    1048U,	// VRSHRuv16i8
    1048U,	// VRSHRuv1i64
    1048U,	// VRSHRuv2i32
    1048U,	// VRSHRuv2i64
    1048U,	// VRSHRuv4i16
    1048U,	// VRSHRuv4i32
    1048U,	// VRSHRuv8i16
    1048U,	// VRSHRuv8i8
    0U,	// VRSQRTEd
    64U,	// VRSQRTEfd
    64U,	// VRSQRTEfq
    0U,	// VRSQRTEhd
    0U,	// VRSQRTEhq
    0U,	// VRSQRTEq
    263712U,	// VRSQRTSfd
    263712U,	// VRSQRTSfq
    1048U,	// VRSQRTShd
    1048U,	// VRSQRTShq
    1192U,	// VRSRAsv16i8
    1192U,	// VRSRAsv1i64
    1192U,	// VRSRAsv2i32
    1192U,	// VRSRAsv2i64
    1192U,	// VRSRAsv4i16
    1192U,	// VRSRAsv4i32
    1192U,	// VRSRAsv8i16
    1192U,	// VRSRAsv8i8
    1192U,	// VRSRAuv16i8
    1192U,	// VRSRAuv1i64
    1192U,	// VRSRAuv2i32
    1192U,	// VRSRAuv2i64
    1192U,	// VRSRAuv4i16
    1192U,	// VRSRAuv4i32
    1192U,	// VRSRAuv8i16
    1192U,	// VRSRAuv8i8
    1048U,	// VRSUBHNv2i32
    1048U,	// VRSUBHNv4i16
    1048U,	// VRSUBHNv8i8
    1048U,	// VSELEQD
    1048U,	// VSELEQS
    1048U,	// VSELGED
    1048U,	// VSELGES
    1048U,	// VSELGTD
    1048U,	// VSELGTS
    1048U,	// VSELVSD
    1048U,	// VSELVSS
    6U,	// VSETLNi16
    6U,	// VSETLNi32
    6U,	// VSETLNi8
    1048U,	// VSHLLi16
    1048U,	// VSHLLi32
    1048U,	// VSHLLi8
    1048U,	// VSHLLsv2i64
    1048U,	// VSHLLsv4i32
    1048U,	// VSHLLsv8i16
    1048U,	// VSHLLuv2i64
    1048U,	// VSHLLuv4i32
    1048U,	// VSHLLuv8i16
    1048U,	// VSHLiv16i8
    1048U,	// VSHLiv1i64
    1048U,	// VSHLiv2i32
    1048U,	// VSHLiv2i64
    1048U,	// VSHLiv4i16
    1048U,	// VSHLiv4i32
    1048U,	// VSHLiv8i16
    1048U,	// VSHLiv8i8
    1048U,	// VSHLsv16i8
    1048U,	// VSHLsv1i64
    1048U,	// VSHLsv2i32
    1048U,	// VSHLsv2i64
    1048U,	// VSHLsv4i16
    1048U,	// VSHLsv4i32
    1048U,	// VSHLsv8i16
    1048U,	// VSHLsv8i8
    1048U,	// VSHLuv16i8
    1048U,	// VSHLuv1i64
    1048U,	// VSHLuv2i32
    1048U,	// VSHLuv2i64
    1048U,	// VSHLuv4i16
    1048U,	// VSHLuv4i32
    1048U,	// VSHLuv8i16
    1048U,	// VSHLuv8i8
    1048U,	// VSHRNv2i32
    1048U,	// VSHRNv4i16
    1048U,	// VSHRNv8i8
    1048U,	// VSHRsv16i8
    1048U,	// VSHRsv1i64
    1048U,	// VSHRsv2i32
    1048U,	// VSHRsv2i64
    1048U,	// VSHRsv4i16
    1048U,	// VSHRsv4i32
    1048U,	// VSHRsv8i16
    1048U,	// VSHRsv8i8
    1048U,	// VSHRuv16i8
    1048U,	// VSHRuv1i64
    1048U,	// VSHRuv2i32
    1048U,	// VSHRuv2i64
    1048U,	// VSHRuv4i16
    1048U,	// VSHRuv4i32
    1048U,	// VSHRuv8i16
    1048U,	// VSHRuv8i8
    0U,	// VSHTOD
    0U,	// VSHTOS
    0U,	// VSITOD
    0U,	// VSITOS
    278552U,	// VSLIv16i8
    278552U,	// VSLIv1i64
    278552U,	// VSLIv2i32
    278552U,	// VSLIv2i64
    278552U,	// VSLIv4i16
    278552U,	// VSLIv4i32
    278552U,	// VSLIv8i16
    278552U,	// VSLIv8i8
    7U,	// VSLTOD
    7U,	// VSLTOS
    64U,	// VSQRTD
    64U,	// VSQRTS
    1192U,	// VSRAsv16i8
    1192U,	// VSRAsv1i64
    1192U,	// VSRAsv2i32
    1192U,	// VSRAsv2i64
    1192U,	// VSRAsv4i16
    1192U,	// VSRAsv4i32
    1192U,	// VSRAsv8i16
    1192U,	// VSRAsv8i8
    1192U,	// VSRAuv16i8
    1192U,	// VSRAuv1i64
    1192U,	// VSRAuv2i32
    1192U,	// VSRAuv2i64
    1192U,	// VSRAuv4i16
    1192U,	// VSRAuv4i32
    1192U,	// VSRAuv8i16
    1192U,	// VSRAuv8i8
    278552U,	// VSRIv16i8
    278552U,	// VSRIv1i64
    278552U,	// VSRIv2i32
    278552U,	// VSRIv2i64
    278552U,	// VSRIv4i16
    278552U,	// VSRIv4i32
    278552U,	// VSRIv8i16
    278552U,	// VSRIv8i8
    292U,	// VST1LNd16
    10785580U,	// VST1LNd16_UPD
    292U,	// VST1LNd32
    10785580U,	// VST1LNd32_UPD
    292U,	// VST1LNd8
    10785580U,	// VST1LNd8_UPD
    1256U,	// VST1LNdAsm_16
    1256U,	// VST1LNdAsm_32
    1256U,	// VST1LNdAsm_8
    5352U,	// VST1LNdWB_fixed_Asm_16
    5352U,	// VST1LNdWB_fixed_Asm_32
    5352U,	// VST1LNdWB_fixed_Asm_8
    327912U,	// VST1LNdWB_register_Asm_16
    327912U,	// VST1LNdWB_register_Asm_32
    327912U,	// VST1LNdWB_register_Asm_8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    0U,	// VST1d16
    0U,	// VST1d16Q
    0U,	// VST1d16Qwb_fixed
    0U,	// VST1d16Qwb_register
    0U,	// VST1d16T
    0U,	// VST1d16Twb_fixed
    0U,	// VST1d16Twb_register
    0U,	// VST1d16wb_fixed
    0U,	// VST1d16wb_register
    0U,	// VST1d32
    0U,	// VST1d32Q
    0U,	// VST1d32Qwb_fixed
    0U,	// VST1d32Qwb_register
    0U,	// VST1d32T
    0U,	// VST1d32Twb_fixed
    0U,	// VST1d32Twb_register
    0U,	// VST1d32wb_fixed
    0U,	// VST1d32wb_register
    0U,	// VST1d64
    0U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    0U,	// VST1d64Qwb_fixed
    0U,	// VST1d64Qwb_register
    0U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    0U,	// VST1d64Twb_fixed
    0U,	// VST1d64Twb_register
    0U,	// VST1d64wb_fixed
    0U,	// VST1d64wb_register
    0U,	// VST1d8
    0U,	// VST1d8Q
    0U,	// VST1d8Qwb_fixed
    0U,	// VST1d8Qwb_register
    0U,	// VST1d8T
    0U,	// VST1d8Twb_fixed
    0U,	// VST1d8Twb_register
    0U,	// VST1d8wb_fixed
    0U,	// VST1d8wb_register
    0U,	// VST1q16
    0U,	// VST1q16wb_fixed
    0U,	// VST1q16wb_register
    0U,	// VST1q32
    0U,	// VST1q32wb_fixed
    0U,	// VST1q32wb_register
    0U,	// VST1q64
    0U,	// VST1q64wb_fixed
    0U,	// VST1q64wb_register
    0U,	// VST1q8
    0U,	// VST1q8wb_fixed
    0U,	// VST1q8wb_register
    110384860U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    464612U,	// VST2LNd16_UPD
    110384860U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    464612U,	// VST2LNd32_UPD
    110384860U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    464612U,	// VST2LNd8_UPD
    1256U,	// VST2LNdAsm_16
    1256U,	// VST2LNdAsm_32
    1256U,	// VST2LNdAsm_8
    5352U,	// VST2LNdWB_fixed_Asm_16
    5352U,	// VST2LNdWB_fixed_Asm_32
    5352U,	// VST2LNdWB_fixed_Asm_8
    327912U,	// VST2LNdWB_register_Asm_16
    327912U,	// VST2LNdWB_register_Asm_32
    327912U,	// VST2LNdWB_register_Asm_8
    110384860U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    464612U,	// VST2LNq16_UPD
    110384860U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    464612U,	// VST2LNq32_UPD
    1256U,	// VST2LNqAsm_16
    1256U,	// VST2LNqAsm_32
    5352U,	// VST2LNqWB_fixed_Asm_16
    5352U,	// VST2LNqWB_fixed_Asm_32
    327912U,	// VST2LNqWB_register_Asm_16
    327912U,	// VST2LNqWB_register_Asm_32
    0U,	// VST2b16
    0U,	// VST2b16wb_fixed
    0U,	// VST2b16wb_register
    0U,	// VST2b32
    0U,	// VST2b32wb_fixed
    0U,	// VST2b32wb_register
    0U,	// VST2b8
    0U,	// VST2b8wb_fixed
    0U,	// VST2b8wb_register
    0U,	// VST2d16
    0U,	// VST2d16wb_fixed
    0U,	// VST2d16wb_register
    0U,	// VST2d32
    0U,	// VST2d32wb_fixed
    0U,	// VST2d32wb_register
    0U,	// VST2d8
    0U,	// VST2d8wb_fixed
    0U,	// VST2d8wb_register
    0U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    0U,	// VST2q16wb_fixed
    0U,	// VST2q16wb_register
    0U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    0U,	// VST2q32wb_fixed
    0U,	// VST2q32wb_register
    0U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    0U,	// VST2q8wb_fixed
    0U,	// VST2q8wb_register
    127162156U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    308U,	// VST3LNd16_UPD
    127162156U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    308U,	// VST3LNd32_UPD
    127162156U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    308U,	// VST3LNd8_UPD
    1256U,	// VST3LNdAsm_16
    1256U,	// VST3LNdAsm_32
    1256U,	// VST3LNdAsm_8
    5352U,	// VST3LNdWB_fixed_Asm_16
    5352U,	// VST3LNdWB_fixed_Asm_32
    5352U,	// VST3LNdWB_fixed_Asm_8
    327912U,	// VST3LNdWB_register_Asm_16
    327912U,	// VST3LNdWB_register_Asm_32
    327912U,	// VST3LNdWB_register_Asm_8
    127162156U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    308U,	// VST3LNq16_UPD
    127162156U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    308U,	// VST3LNq32_UPD
    1256U,	// VST3LNqAsm_16
    1256U,	// VST3LNqAsm_32
    5352U,	// VST3LNqWB_fixed_Asm_16
    5352U,	// VST3LNqWB_fixed_Asm_32
    327912U,	// VST3LNqWB_register_Asm_16
    327912U,	// VST3LNqWB_register_Asm_32
    142934184U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    9528U,	// VST3d16_UPD
    142934184U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    9528U,	// VST3d32_UPD
    142934184U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    9528U,	// VST3d8_UPD
    67U,	// VST3dAsm_16
    67U,	// VST3dAsm_32
    67U,	// VST3dAsm_8
    211U,	// VST3dWB_fixed_Asm_16
    211U,	// VST3dWB_fixed_Asm_32
    211U,	// VST3dWB_fixed_Asm_8
    265763U,	// VST3dWB_register_Asm_16
    265763U,	// VST3dWB_register_Asm_32
    265763U,	// VST3dWB_register_Asm_8
    142934184U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    9528U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    142934184U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    9528U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    142934184U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    9528U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    0U,	// VST3qAsm_16
    0U,	// VST3qAsm_32
    0U,	// VST3qAsm_8
    4U,	// VST3qWB_fixed_Asm_16
    4U,	// VST3qWB_fixed_Asm_32
    4U,	// VST3qWB_fixed_Asm_8
    1192U,	// VST3qWB_register_Asm_16
    1192U,	// VST3qWB_register_Asm_32
    1192U,	// VST3qWB_register_Asm_8
    160716516U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    9972U,	// VST4LNd16_UPD
    160716516U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    9972U,	// VST4LNd32_UPD
    160716516U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    9972U,	// VST4LNd8_UPD
    1256U,	// VST4LNdAsm_16
    1256U,	// VST4LNdAsm_32
    1256U,	// VST4LNdAsm_8
    5352U,	// VST4LNdWB_fixed_Asm_16
    5352U,	// VST4LNdWB_fixed_Asm_32
    5352U,	// VST4LNdWB_fixed_Asm_8
    327912U,	// VST4LNdWB_register_Asm_16
    327912U,	// VST4LNdWB_register_Asm_32
    327912U,	// VST4LNdWB_register_Asm_8
    160716516U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    9972U,	// VST4LNq16_UPD
    160716516U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    9972U,	// VST4LNq32_UPD
    1256U,	// VST4LNqAsm_16
    1256U,	// VST4LNqAsm_32
    5352U,	// VST4LNqWB_fixed_Asm_16
    5352U,	// VST4LNqWB_fixed_Asm_32
    327912U,	// VST4LNqWB_register_Asm_16
    327912U,	// VST4LNqWB_register_Asm_32
    169148584U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    475448U,	// VST4d16_UPD
    169148584U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    475448U,	// VST4d32_UPD
    169148584U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    475448U,	// VST4d8_UPD
    67U,	// VST4dAsm_16
    67U,	// VST4dAsm_32
    67U,	// VST4dAsm_8
    211U,	// VST4dWB_fixed_Asm_16
    211U,	// VST4dWB_fixed_Asm_32
    211U,	// VST4dWB_fixed_Asm_8
    265763U,	// VST4dWB_register_Asm_16
    265763U,	// VST4dWB_register_Asm_32
    265763U,	// VST4dWB_register_Asm_8
    169148584U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    475448U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    169148584U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    475448U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    169148584U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    475448U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    0U,	// VST4qAsm_16
    0U,	// VST4qAsm_32
    0U,	// VST4qAsm_8
    4U,	// VST4qWB_fixed_Asm_16
    4U,	// VST4qWB_fixed_Asm_32
    4U,	// VST4qWB_fixed_Asm_8
    1192U,	// VST4qWB_register_Asm_16
    1192U,	// VST4qWB_register_Asm_32
    1192U,	// VST4qWB_register_Asm_8
    65U,	// VSTMDDB_UPD
    1096U,	// VSTMDIA
    65U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    65U,	// VSTMSDB_UPD
    1096U,	// VSTMSIA
    65U,	// VSTMSIA_UPD
    280U,	// VSTRD
    280U,	// VSTRS
    263712U,	// VSUBD
    1048U,	// VSUBHNv2i32
    1048U,	// VSUBHNv4i16
    1048U,	// VSUBHNv8i8
    1048U,	// VSUBLsv2i64
    1048U,	// VSUBLsv4i32
    1048U,	// VSUBLsv8i16
    1048U,	// VSUBLuv2i64
    1048U,	// VSUBLuv4i32
    1048U,	// VSUBLuv8i16
    263712U,	// VSUBS
    1048U,	// VSUBWsv2i64
    1048U,	// VSUBWsv4i32
    1048U,	// VSUBWsv8i16
    1048U,	// VSUBWuv2i64
    1048U,	// VSUBWuv4i32
    1048U,	// VSUBWuv8i16
    263712U,	// VSUBfd
    263712U,	// VSUBfq
    1048U,	// VSUBhd
    1048U,	// VSUBhq
    1048U,	// VSUBv16i8
    1048U,	// VSUBv1i64
    1048U,	// VSUBv2i32
    1048U,	// VSUBv2i64
    1048U,	// VSUBv4i16
    1048U,	// VSUBv4i32
    1048U,	// VSUBv8i16
    1048U,	// VSUBv8i8
    1024U,	// VSWPd
    1024U,	// VSWPq
    320U,	// VTBL1
    328U,	// VTBL2
    336U,	// VTBL3
    0U,	// VTBL3Pseudo
    344U,	// VTBL4
    0U,	// VTBL4Pseudo
    352U,	// VTBX1
    360U,	// VTBX2
    368U,	// VTBX3
    0U,	// VTBX3Pseudo
    376U,	// VTBX4
    0U,	// VTBX4Pseudo
    0U,	// VTOSHD
    0U,	// VTOSHS
    0U,	// VTOSIRD
    0U,	// VTOSIRS
    0U,	// VTOSIZD
    0U,	// VTOSIZS
    7U,	// VTOSLD
    7U,	// VTOSLS
    0U,	// VTOUHD
    0U,	// VTOUHS
    0U,	// VTOUIRD
    0U,	// VTOUIRS
    0U,	// VTOUIZD
    0U,	// VTOUIZS
    7U,	// VTOULD
    7U,	// VTOULS
    1024U,	// VTRNd16
    1024U,	// VTRNd32
    1024U,	// VTRNd8
    1024U,	// VTRNq16
    1024U,	// VTRNq32
    1024U,	// VTRNq8
    16384U,	// VTSTv16i8
    16384U,	// VTSTv2i32
    16384U,	// VTSTv4i16
    16384U,	// VTSTv4i32
    16384U,	// VTSTv8i16
    16384U,	// VTSTv8i8
    0U,	// VUHTOD
    0U,	// VUHTOS
    0U,	// VUITOD
    0U,	// VUITOS
    7U,	// VULTOD
    7U,	// VULTOS
    1024U,	// VUZPd16
    1024U,	// VUZPd8
    1024U,	// VUZPq16
    1024U,	// VUZPq32
    1024U,	// VUZPq8
    1024U,	// VZIPd16
    1024U,	// VZIPd8
    1024U,	// VZIPq16
    1024U,	// VZIPq32
    1024U,	// VZIPq8
    0U,	// WIN__CHKSTK
    0U,	// WIN__DBZCHK
    10312U,	// sysLDMDA
    385U,	// sysLDMDA_UPD
    10312U,	// sysLDMDB
    385U,	// sysLDMDB_UPD
    10312U,	// sysLDMIA
    385U,	// sysLDMIA_UPD
    10312U,	// sysLDMIB
    385U,	// sysLDMIB_UPD
    10312U,	// sysSTMDA
    385U,	// sysSTMDA_UPD
    10312U,	// sysSTMDB
    385U,	// sysSTMDB_UPD
    10312U,	// sysSTMIA
    385U,	// sysSTMIA_UPD
    10312U,	// sysSTMIB
    385U,	// sysSTMIB_UPD
    0U,	// t2ABS
    16384U,	// t2ADCri
    16384U,	// t2ADCrr
    491520U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    16384U,	// t2ADDri
    16384U,	// t2ADDri12
    16384U,	// t2ADDrr
    491520U,	// t2ADDrs
    8U,	// t2ADR
    16384U,	// t2ANDri
    16384U,	// t2ANDrr
    491520U,	// t2ANDrs
    507904U,	// t2ASRri
    16384U,	// t2ASRrr
    0U,	// t2B
    16U,	// t2BFC
    49176U,	// t2BFI
    16384U,	// t2BICri
    16384U,	// t2BICrr
    491520U,	// t2BICrs
    0U,	// t2BR_JT
    0U,	// t2BXJ
    0U,	// t2Bcc
    544U,	// t2CDP
    544U,	// t2CDP2
    0U,	// t2CLREX
    1024U,	// t2CLZ
    1024U,	// t2CMNri
    1024U,	// t2CMNzrr
    392U,	// t2CMNzrs
    1024U,	// t2CMPri
    1024U,	// t2CMPrr
    392U,	// t2CMPrs
    0U,	// t2CPS1p
    0U,	// t2CPS2p
    1048U,	// t2CPS3p
    1048U,	// t2CRC32B
    1048U,	// t2CRC32CB
    1048U,	// t2CRC32CH
    1048U,	// t2CRC32CW
    1048U,	// t2CRC32H
    1048U,	// t2CRC32W
    0U,	// t2DBG
    0U,	// t2DCPS1
    0U,	// t2DCPS2
    0U,	// t2DCPS3
    0U,	// t2DMB
    0U,	// t2DSB
    16384U,	// t2EORri
    16384U,	// t2EORrr
    491520U,	// t2EORrs
    0U,	// t2HINT
    0U,	// t2HVC
    0U,	// t2ISB
    0U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    80U,	// t2LDA
    80U,	// t2LDAB
    80U,	// t2LDAEX
    80U,	// t2LDAEXB
    245760U,	// t2LDAEXD
    80U,	// t2LDAEXH
    80U,	// t2LDAH
    89U,	// t2LDC2L_OFFSET
    65633U,	// t2LDC2L_OPTION
    82017U,	// t2LDC2L_POST
    105U,	// t2LDC2L_PRE
    89U,	// t2LDC2_OFFSET
    65633U,	// t2LDC2_OPTION
    82017U,	// t2LDC2_POST
    105U,	// t2LDC2_PRE
    89U,	// t2LDCL_OFFSET
    65633U,	// t2LDCL_OPTION
    82017U,	// t2LDCL_POST
    105U,	// t2LDCL_PRE
    89U,	// t2LDC_OFFSET
    65633U,	// t2LDC_OPTION
    82017U,	// t2LDC_POST
    105U,	// t2LDC_PRE
    1096U,	// t2LDMDB
    65U,	// t2LDMDB_UPD
    1096U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    65U,	// t2LDMIA_UPD
    400U,	// t2LDRBT
    10848U,	// t2LDRB_POST
    408U,	// t2LDRB_PRE
    128U,	// t2LDRBi12
    400U,	// t2LDRBi8
    416U,	// t2LDRBpci
    1024U,	// t2LDRBpcrel
    424U,	// t2LDRBs
    11665408U,	// t2LDRD_POST
    524288U,	// t2LDRD_PRE
    540672U,	// t2LDRDi8
    432U,	// t2LDREX
    80U,	// t2LDREXB
    245760U,	// t2LDREXD
    80U,	// t2LDREXH
    400U,	// t2LDRHT
    10848U,	// t2LDRH_POST
    408U,	// t2LDRH_PRE
    128U,	// t2LDRHi12
    400U,	// t2LDRHi8
    416U,	// t2LDRHpci
    1024U,	// t2LDRHpcrel
    424U,	// t2LDRHs
    400U,	// t2LDRSBT
    10848U,	// t2LDRSB_POST
    408U,	// t2LDRSB_PRE
    128U,	// t2LDRSBi12
    400U,	// t2LDRSBi8
    416U,	// t2LDRSBpci
    1024U,	// t2LDRSBpcrel
    424U,	// t2LDRSBs
    400U,	// t2LDRSHT
    10848U,	// t2LDRSH_POST
    408U,	// t2LDRSH_PRE
    128U,	// t2LDRSHi12
    400U,	// t2LDRSHi8
    416U,	// t2LDRSHpci
    1024U,	// t2LDRSHpcrel
    424U,	// t2LDRSHs
    400U,	// t2LDRT
    10848U,	// t2LDR_POST
    408U,	// t2LDR_PRE
    128U,	// t2LDRi12
    400U,	// t2LDRi8
    416U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    1024U,	// t2LDRpcrel
    424U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    16384U,	// t2LSLri
    16384U,	// t2LSLrr
    507904U,	// t2LSRri
    16384U,	// t2LSRrr
    2311712U,	// t2MCR
    2311712U,	// t2MCR2
    3360288U,	// t2MCRR
    3360288U,	// t2MCRR2
    17842176U,	// t2MLA
    17842176U,	// t2MLS
    0U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    0U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    0U,	// t2MOVCClsl
    0U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    0U,	// t2MOVCCror
    392U,	// t2MOVSsi
    56U,	// t2MOVSsr
    1048U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_pcrel
    1024U,	// t2MOVi
    1024U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    1024U,	// t2MOVr
    392U,	// t2MOVsi
    56U,	// t2MOVsr
    11264U,	// t2MOVsra_flag
    11264U,	// t2MOVsrl_flag
    0U,	// t2MRC
    0U,	// t2MRC2
    0U,	// t2MRRC
    0U,	// t2MRRC2
    2U,	// t2MRS_AR
    440U,	// t2MRS_M
    176U,	// t2MRSbanked
    2U,	// t2MRSsys_AR
    64U,	// t2MSR_AR
    64U,	// t2MSR_M
    0U,	// t2MSRbanked
    16384U,	// t2MUL
    0U,	// t2MVNCCi
    1024U,	// t2MVNi
    1024U,	// t2MVNr
    392U,	// t2MVNs
    16384U,	// t2ORNri
    16384U,	// t2ORNrr
    491520U,	// t2ORNrs
    16384U,	// t2ORRri
    16384U,	// t2ORRrr
    491520U,	// t2ORRrs
    4210688U,	// t2PKHBT
    5259264U,	// t2PKHTB
    0U,	// t2PLDWi12
    0U,	// t2PLDWi8
    0U,	// t2PLDWs
    0U,	// t2PLDi12
    0U,	// t2PLDi8
    0U,	// t2PLDpci
    0U,	// t2PLDs
    0U,	// t2PLIi12
    0U,	// t2PLIi8
    0U,	// t2PLIpci
    0U,	// t2PLIs
    16384U,	// t2QADD
    16384U,	// t2QADD16
    16384U,	// t2QADD8
    16384U,	// t2QASX
    16384U,	// t2QDADD
    16384U,	// t2QDSUB
    16384U,	// t2QSAX
    16384U,	// t2QSUB
    16384U,	// t2QSUB16
    16384U,	// t2QSUB8
    1024U,	// t2RBIT
    1024U,	// t2REV
    1024U,	// t2REV16
    1024U,	// t2REVSH
    0U,	// t2RFEDB
    4U,	// t2RFEDBW
    0U,	// t2RFEIA
    4U,	// t2RFEIAW
    16384U,	// t2RORri
    16384U,	// t2RORrr
    1024U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    16384U,	// t2RSBri
    16384U,	// t2RSBrr
    491520U,	// t2RSBrs
    16384U,	// t2SADD16
    16384U,	// t2SADD8
    16384U,	// t2SASX
    16384U,	// t2SBCri
    16384U,	// t2SBCrr
    491520U,	// t2SBCrs
    34619392U,	// t2SBFX
    16384U,	// t2SDIV
    16384U,	// t2SEL
    0U,	// t2SETPAN
    16384U,	// t2SHADD16
    16384U,	// t2SHADD8
    16384U,	// t2SHASX
    16384U,	// t2SHSAX
    16384U,	// t2SHSUB16
    16384U,	// t2SHSUB8
    0U,	// t2SMC
    17842176U,	// t2SMLABB
    17842176U,	// t2SMLABT
    17842176U,	// t2SMLAD
    17842176U,	// t2SMLADX
    17842176U,	// t2SMLAL
    17842176U,	// t2SMLALBB
    17842176U,	// t2SMLALBT
    17842176U,	// t2SMLALD
    17842176U,	// t2SMLALDX
    17842176U,	// t2SMLALTB
    17842176U,	// t2SMLALTT
    17842176U,	// t2SMLATB
    17842176U,	// t2SMLATT
    17842176U,	// t2SMLAWB
    17842176U,	// t2SMLAWT
    17842176U,	// t2SMLSD
    17842176U,	// t2SMLSDX
    17842176U,	// t2SMLSLD
    185876480U,	// t2SMLSLDX
    17842176U,	// t2SMMLA
    17842176U,	// t2SMMLAR
    17842176U,	// t2SMMLS
    17842176U,	// t2SMMLSR
    16384U,	// t2SMMUL
    16384U,	// t2SMMULR
    16384U,	// t2SMUAD
    16384U,	// t2SMUADX
    16384U,	// t2SMULBB
    16384U,	// t2SMULBT
    17842176U,	// t2SMULL
    16384U,	// t2SMULTB
    16384U,	// t2SMULTT
    16384U,	// t2SMULWB
    16384U,	// t2SMULWT
    16384U,	// t2SMUSD
    16384U,	// t2SMUSDX
    0U,	// t2SRSDB
    0U,	// t2SRSDB_UPD
    0U,	// t2SRSIA
    0U,	// t2SRSIA_UPD
    2232U,	// t2SSAT
    1208U,	// t2SSAT16
    16384U,	// t2SSAX
    16384U,	// t2SSUB16
    16384U,	// t2SSUB8
    89U,	// t2STC2L_OFFSET
    65633U,	// t2STC2L_OPTION
    82017U,	// t2STC2L_POST
    105U,	// t2STC2L_PRE
    89U,	// t2STC2_OFFSET
    65633U,	// t2STC2_OPTION
    82017U,	// t2STC2_POST
    105U,	// t2STC2_PRE
    89U,	// t2STCL_OFFSET
    65633U,	// t2STCL_OPTION
    82017U,	// t2STCL_POST
    105U,	// t2STCL_PRE
    89U,	// t2STC_OFFSET
    65633U,	// t2STC_OPTION
    82017U,	// t2STC_POST
    105U,	// t2STC_PRE
    80U,	// t2STL
    80U,	// t2STLB
    245760U,	// t2STLEX
    245760U,	// t2STLEXB
    202391552U,	// t2STLEXD
    245760U,	// t2STLEXH
    80U,	// t2STLH
    1096U,	// t2STMDB
    65U,	// t2STMDB_UPD
    1096U,	// t2STMIA
    65U,	// t2STMIA_UPD
    400U,	// t2STRBT
    10848U,	// t2STRB_POST
    408U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    128U,	// t2STRBi12
    400U,	// t2STRBi8
    424U,	// t2STRBs
    11665432U,	// t2STRD_POST
    524312U,	// t2STRD_PRE
    540672U,	// t2STRDi8
    557056U,	// t2STREX
    245760U,	// t2STREXB
    202391552U,	// t2STREXD
    245760U,	// t2STREXH
    400U,	// t2STRHT
    10848U,	// t2STRH_POST
    408U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    128U,	// t2STRHi12
    400U,	// t2STRHi8
    424U,	// t2STRHs
    400U,	// t2STRT
    10848U,	// t2STR_POST
    408U,	// t2STR_PRE
    0U,	// t2STR_preidx
    128U,	// t2STRi12
    400U,	// t2STRi8
    424U,	// t2STRs
    0U,	// t2SUBS_PC_LR
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    16384U,	// t2SUBri
    16384U,	// t2SUBri12
    16384U,	// t2SUBrr
    491520U,	// t2SUBrs
    6307840U,	// t2SXTAB
    6307840U,	// t2SXTAB16
    6307840U,	// t2SXTAH
    2560U,	// t2SXTB
    2560U,	// t2SXTB16
    2560U,	// t2SXTH
    0U,	// t2TBB
    0U,	// t2TBB_JT
    0U,	// t2TBH
    0U,	// t2TBH_JT
    1024U,	// t2TEQri
    1024U,	// t2TEQrr
    392U,	// t2TEQrs
    1024U,	// t2TSTri
    1024U,	// t2TSTrr
    392U,	// t2TSTrs
    16384U,	// t2UADD16
    16384U,	// t2UADD8
    16384U,	// t2UASX
    34619392U,	// t2UBFX
    0U,	// t2UDF
    16384U,	// t2UDIV
    16384U,	// t2UHADD16
    16384U,	// t2UHADD8
    16384U,	// t2UHASX
    16384U,	// t2UHSAX
    16384U,	// t2UHSUB16
    16384U,	// t2UHSUB8
    17842176U,	// t2UMAAL
    17842176U,	// t2UMLAL
    17842176U,	// t2UMULL
    16384U,	// t2UQADD16
    16384U,	// t2UQADD8
    16384U,	// t2UQASX
    16384U,	// t2UQSAX
    16384U,	// t2UQSUB16
    16384U,	// t2UQSUB8
    16384U,	// t2USAD8
    17842176U,	// t2USADA8
    7356416U,	// t2USAT
    16384U,	// t2USAT16
    16384U,	// t2USAX
    16384U,	// t2USUB16
    16384U,	// t2USUB8
    6307840U,	// t2UXTAB
    6307840U,	// t2UXTAB16
    6307840U,	// t2UXTAH
    2560U,	// t2UXTB
    2560U,	// t2UXTB16
    2560U,	// t2UXTH
    0U,	// tADC
    0U,	// tADDframe
    1048U,	// tADDhirr
    1192U,	// tADDi3
    0U,	// tADDi8
    16384U,	// tADDrSP
    573440U,	// tADDrSPi
    1192U,	// tADDrr
    448U,	// tADDspi
    1048U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    456U,	// tADR
    0U,	// tAND
    464U,	// tASRri
    0U,	// tASRrr
    0U,	// tB
    0U,	// tBIC
    0U,	// tBKPT
    0U,	// tBL
    0U,	// tBLXi
    0U,	// tBLXr
    0U,	// tBRIND
    0U,	// tBR_JTr
    0U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    0U,	// tBcc
    0U,	// tBfar
    0U,	// tCBNZ
    0U,	// tCBZ
    1024U,	// tCMNz
    1024U,	// tCMPhir
    1024U,	// tCMPi8
    1024U,	// tCMPr
    0U,	// tCPS
    0U,	// tEOR
    0U,	// tHINT
    0U,	// tHLT
    0U,	// tInt_WIN_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    1096U,	// tLDMIA
    0U,	// tLDMIA_UPD
    472U,	// tLDRBi
    480U,	// tLDRBr
    488U,	// tLDRHi
    480U,	// tLDRHr
    0U,	// tLDRLIT_ga_abs
    0U,	// tLDRLIT_ga_pcrel
    480U,	// tLDRSB
    480U,	// tLDRSH
    496U,	// tLDRi
    416U,	// tLDRpci
    0U,	// tLDRpci_pic
    480U,	// tLDRr
    504U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    1192U,	// tLSLri
    0U,	// tLSLrr
    464U,	// tLSRri
    0U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    0U,	// tMOVSr
    0U,	// tMOVi8
    1024U,	// tMOVr
    1192U,	// tMUL
    0U,	// tMVN
    0U,	// tORR
    0U,	// tPICADD
    0U,	// tPOP
    0U,	// tPOP_RET
    0U,	// tPUSH
    1024U,	// tREV
    1024U,	// tREV16
    1024U,	// tREVSH
    0U,	// tROR
    0U,	// tRSB
    0U,	// tSBC
    0U,	// tSETEND
    65U,	// tSTMIA_UPD
    472U,	// tSTRBi
    480U,	// tSTRBr
    488U,	// tSTRHi
    480U,	// tSTRHr
    496U,	// tSTRi
    480U,	// tSTRr
    504U,	// tSTRspi
    1192U,	// tSUBi3
    0U,	// tSUBi8
    1192U,	// tSUBrr
    448U,	// tSUBspi
    0U,	// tSVC
    1024U,	// tSXTB
    1024U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTPsoft
    0U,	// tTRAP
    1024U,	// tTST
    0U,	// tUDF
    1024U,	// tUXTB
    1024U,	// tUXTH
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 12) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, CLREX, TRAP, TRAPNaCl...
    return;
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    printSBitModifierOperand(MI, 5, STI, O);
    printPredicateOperand(MI, 3, STI, O);
    break;
  case 2:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, MLA, MOVsr, MVNsr, ORRrsi, RSB...
    printSBitModifierOperand(MI, 6, STI, O);
    printPredicateOperand(MI, 4, STI, O);
    break;
  case 3:
    // ADCrsr, ADDrsr, ANDrsr, BICrsr, EORrsr, ORRrsr, RSBrsr, RSCrsr, SBCrsr...
    printSBitModifierOperand(MI, 7, STI, O);
    printPredicateOperand(MI, 5, STI, O);
    O << "\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printSORegRegOperand(MI, 2, STI, O);
    return;
    break;
  case 4:
    // ADR, CLZ, CMNri, CMNzrr, CMPri, CMPrr, FCONSTD, FCONSTS, FLDMXDB_UPD, ...
    printPredicateOperand(MI, 2, STI, O);
    break;
  case 5:
    // AESD, AESE, AESIMC, AESMC, BKPT, BL, BLX, BLXi, BX, CPS1p, CRC32B, CRC...
    printOperand(MI, 0, STI, O);
    break;
  case 6:
    // BFC, CMNzrsi, CMPrsi, LDRBi12, LDRcp, LDRi12, MOVTi16, QADD, QADD16, Q...
    printPredicateOperand(MI, 3, STI, O);
    break;
  case 7:
    // BFI, CMNzrsr, CMPrsr, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, L...
    printPredicateOperand(MI, 4, STI, O);
    break;
  case 8:
    // BLX_pred, BL_pred, BXJ, BX_pred, Bcc, DBG, FLDMXIA, FSTMXIA, HINT, LDM...
    printPredicateOperand(MI, 1, STI, O);
    break;
  case 9:
    // BX_RET, ERET, FMSTAT, MOVPCLR, t2CLREX, t2DCPS1, t2DCPS2, t2DCPS3, tBL...
    printPredicateOperand(MI, 0, STI, O);
    break;
  case 10:
    // CDP, LDRD_POST, LDRD_PRE, MCR, MRC, STRD_POST, STRD_PRE, VLD4DUPd16, V...
    printPredicateOperand(MI, 6, STI, O);
    break;
  case 11:
    // CDP2, LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, ...
    printPImmediate(MI, 0, STI, O);
    O << ", ";
    break;
  case 12:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIMod(MI, 0, STI, O);
    break;
  case 13:
    // DMB, DSB
    printMemBOption(MI, 0, STI, O);
    return;
    break;
  case 14:
    // ISB
    printInstSyncBOption(MI, 0, STI, O);
    return;
    break;
  case 15:
    // ITasm, t2IT
    printThumbITMask(MI, 1, STI, O);
    break;
  case 16:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRB_PRE...
    printPredicateOperand(MI, 5, STI, O);
    break;
  case 17:
    // MOVi, MOVr, MOVr_TC, MVNi, MVNr, RRXi, t2MOVi, t2MOVr, t2MVNi, t2MVNr,...
    printSBitModifierOperand(MI, 4, STI, O);
    printPredicateOperand(MI, 2, STI, O);
    break;
  case 18:
    // MRC2
    printPImmediate(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printCImmediate(MI, 3, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 5, STI, O);
    return;
    break;
  case 19:
    // PLDWi12, PLDi12, PLIi12
    printAddrModeImm12Operand<false>(MI, 0, STI, O);
    return;
    break;
  case 20:
    // PLDWrs, PLDrs, PLIrs
    printAddrMode2Operand(MI, 0, STI, O);
    return;
    break;
  case 21:
    // SETEND, tSETEND
    printSetendOperand(MI, 0, STI, O);
    return;
    break;
  case 22:
    // SMLAL, UMLAL
    printSBitModifierOperand(MI, 8, STI, O);
    printPredicateOperand(MI, 6, STI, O);
    O << "\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 23:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printPredicateOperand(MI, 7, STI, O);
    break;
  case 24:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, STI, O);
    break;
  case 25:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, STI, O);
    break;
  case 26:
    // VLD4DUPd16_UPD, VLD4DUPd32_UPD, VLD4DUPd8_UPD, VLD4DUPq16_UPD, VLD4DUP...
    printPredicateOperand(MI, 8, STI, O);
    break;
  case 27:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, STI, O);
    break;
  case 28:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, STI, O);
    break;
  }


  // Fragment 1 encoded into 7 bits for 70 unique commands.
  switch ((Bits >> 17) & 127) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    O << "\t";
    break;
  case 1:
    // AESD, AESE, AESIMC, AESMC, CRC32B, CRC32CB, CRC32CH, CRC32CW, CRC32H, ...
    O << ", ";
    break;
  case 2:
    // ASRi, ASRr, ITasm, LDRBT_POST, LDRT_POST, LSLi, LSLr, LSRi, LSRr, RORi...
    O << ' ';
    break;
  case 3:
    // BKPT, BL, BLX, BLXi, BX, CPS1p, ERET, HLT, HVC, RFEDA, RFEDB, RFEIA, R...
    return;
    break;
  case 4:
    // BX_RET
    O << "\tlr";
    return;
    break;
  case 5:
    // CDP2, MCR2, MCRR2, MRRC2
    printOperand(MI, 1, STI, O);
    O << ", ";
    break;
  case 6:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VFMAD, V...
    O << ".f64\t";
    printOperand(MI, 0, STI, O);
    break;
  case 7:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfq, VACGEfd, VACGEfq, VACG...
    O << ".f32\t";
    printOperand(MI, 0, STI, O);
    break;
  case 8:
    // FMSTAT
    O << "\tAPSR_nzcv, fpscr";
    return;
    break;
  case 9:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    printCImmediate(MI, 1, STI, O);
    O << ", ";
    break;
  case 10:
    // MOVPCLR
    O << "\tpc, lr";
    return;
    break;
  case 11:
    // RFEDA_UPD, RFEDB_UPD, RFEIA_UPD, RFEIB_UPD
    O << '!';
    return;
    break;
  case 12:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 13:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 14:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 15:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 16:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 17:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 18:
    // VABDhd, VABDhq, VABShd, VABShq, VACGEhd, VACGEhq, VACGThd, VACGThq, VA...
    O << ".f16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 19:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 20:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VBICiv2i32, VBICiv4i32, VCEQv2i32, ...
    O << ".i32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 21:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VBICiv4i16, VBICiv8i16, VCEQv4i16, V...
    O << ".i16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 22:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    O << ".i8\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 23:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VLD1...
    O << ".8\t";
    break;
  case 24:
    // VCVTBDH, VCVTTDH
    O << ".f16.f64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 25:
    // VCVTBHD, VCVTTHD
    O << ".f64.f16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 26:
    // VCVTBHS, VCVTTHS, VCVTh2f
    O << ".f32.f16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 27:
    // VCVTBSH, VCVTTSH, VCVTf2h
    O << ".f16.f32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 28:
    // VCVTDS
    O << ".f64.f32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 29:
    // VCVTSD
    O << ".f32.f64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 30:
    // VCVTf2sd, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSIZS, VTOSLS
    O << ".s32.f32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 31:
    // VCVTf2ud, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUIZS, VTOULS
    O << ".u32.f32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 32:
    // VCVTh2sd, VCVTh2sq, VCVTh2xsd, VCVTh2xsq
    O << ".s16.f16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 33:
    // VCVTh2ud, VCVTh2uq, VCVTh2xud, VCVTh2xuq
    O << ".u16.f16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 34:
    // VCVTs2fd, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    O << ".f32.s32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 35:
    // VCVTs2hd, VCVTs2hq, VCVTxs2hd, VCVTxs2hq
    O << ".f16.s16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 36:
    // VCVTu2fd, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    O << ".f32.u32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 37:
    // VCVTu2hd, VCVTu2hq, VCVTxu2hd, VCVTxu2hq
    O << ".f16.u16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 38:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VLD1DUPd16, ...
    O << ".16\t";
    break;
  case 39:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VEXTd32, VEXTq32, VGETLNi32, V...
    O << ".32\t";
    break;
  case 40:
    // VEXTq64, VLD1d64, VLD1d64Q, VLD1d64Qwb_fixed, VLD1d64Qwb_register, VLD...
    O << ".64\t";
    break;
  case 41:
    // VLD1LNd16, VLD1LNd16_UPD, VLD2LNd16, VLD2LNd16_UPD, VLD2LNq16, VLD2LNq...
    O << ".16\t{";
    break;
  case 42:
    // VLD1LNd32, VLD1LNd32_UPD, VLD2LNd32, VLD2LNd32_UPD, VLD2LNq32, VLD2LNq...
    O << ".32\t{";
    break;
  case 43:
    // VLD1LNd8, VLD1LNd8_UPD, VLD2LNd8, VLD2LNd8_UPD, VLD3DUPd8, VLD3DUPd8_U...
    O << ".8\t{";
    break;
  case 44:
    // VMSR
    O << "\tfpscr, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 45:
    // VMSR_FPEXC
    O << "\tfpexc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 46:
    // VMSR_FPINST
    O << "\tfpinst, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 47:
    // VMSR_FPINST2
    O << "\tfpinst2, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 48:
    // VMSR_FPSID
    O << "\tfpsid, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 49:
    // VMULLp8, VMULpd, VMULpq
    O << ".p8\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 50:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 51:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 52:
    // VSHTOD
    O << ".f64.s16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 53:
    // VSHTOS
    O << ".f32.s16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 54:
    // VSITOD, VSLTOD
    O << ".f64.s32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 55:
    // VTOSHD
    O << ".s16.f64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 56:
    // VTOSHS
    O << ".s16.f32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 57:
    // VTOSIRD, VTOSIZD, VTOSLD
    O << ".s32.f64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 58:
    // VTOUHD
    O << ".u16.f64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 59:
    // VTOUHS
    O << ".u16.f32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 60:
    // VTOUIRD, VTOUIZD, VTOULD
    O << ".u32.f64\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 61:
    // VUHTOD
    O << ".f64.u16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 62:
    // VUHTOS
    O << ".f32.u16\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printFBits16(MI, 2, STI, O);
    return;
    break;
  case 63:
    // VUITOD, VULTOD
    O << ".f64.u32\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    break;
  case 64:
    // t2ADCrr, t2ADCrs, t2ADDri, t2ADDrr, t2ADDrs, t2ADR, t2ANDrr, t2ANDrs, ...
    O << ".w\t";
    break;
  case 65:
    // t2SRSDB, t2SRSIA
    O << "\tsp, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 66:
    // t2SRSDB_UPD, t2SRSIA_UPD
    O << "\tsp!, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 67:
    // t2SUBS_PC_LR
    O << "\tpc, lr, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 68:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, STI, O);
    O << "\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 69:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, STI, O);
    O << "\t";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    break;
  }


  // Fragment 2 encoded into 6 bits for 59 unique commands.
  switch ((Bits >> 24) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    printOperand(MI, 0, STI, O);
    break;
  case 1:
    // AESD, AESE, MCR2, MCRR2, MRRC2, SHA1C, SHA1M, SHA1P, SHA1SU0, SHA1SU1,...
    printOperand(MI, 2, STI, O);
    break;
  case 2:
    // AESIMC, AESMC, CRC32B, CRC32CB, CRC32CH, CRC32CW, CRC32H, CRC32W, FLDM...
    printOperand(MI, 1, STI, O);
    break;
  case 3:
    // CDP, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OP...
    printPImmediate(MI, 0, STI, O);
    O << ", ";
    break;
  case 4:
    // CDP2
    printCImmediate(MI, 2, STI, O);
    O << ", ";
    printCImmediate(MI, 3, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 5, STI, O);
    return;
    break;
  case 5:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIFlag(MI, 1, STI, O);
    break;
  case 6:
    // FCONSTD, FCONSTS, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VACGEf...
    O << ", ";
    break;
  case 7:
    // ITasm, t2IT
    printMandatoryPredicateOperand(MI, 0, STI, O);
    return;
    break;
  case 8:
    // LDAEXD, LDREXD
    printGPRPairOperand(MI, 0, STI, O);
    O << ", ";
    printAddrMode7Operand(MI, 1, STI, O);
    return;
    break;
  case 9:
    // LDC2L_OFFSET, LDC2_OFFSET, STC2L_OFFSET, STC2_OFFSET
    printAddrMode5Operand<false>(MI, 2, STI, O);
    return;
    break;
  case 10:
    // LDC2L_OPTION, LDC2L_POST, LDC2_OPTION, LDC2_POST, STC2L_OPTION, STC2L_...
    printAddrMode7Operand(MI, 2, STI, O);
    O << ", ";
    break;
  case 11:
    // LDC2L_PRE, LDC2_PRE, STC2L_PRE, STC2_PRE
    printAddrMode5Operand<true>(MI, 2, STI, O);
    O << '!';
    return;
    break;
  case 12:
    // MRC, t2MRC, t2MRC2
    printPImmediate(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printCImmediate(MI, 3, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 5, STI, O);
    return;
    break;
  case 13:
    // MRRC, t2MRRC, t2MRRC2
    printPImmediate(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    return;
    break;
  case 14:
    // MSR, MSRi, t2MSR_AR, t2MSR_M
    printMSRMaskOperand(MI, 0, STI, O);
    O << ", ";
    break;
  case 15:
    // MSRbanked, t2MSRbanked
    printBankedRegOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 16:
    // VBICiv2i32, VBICiv4i16, VBICiv4i32, VBICiv8i16, VMOVv16i8, VMOVv1i64, ...
    printNEONModImmOperand(MI, 1, STI, O);
    return;
    break;
  case 17:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    O << ", #0";
    return;
    break;
  case 18:
    // VCVTf2sd, VCVTf2sq, VCVTf2ud, VCVTf2uq, VCVTh2sd, VCVTh2sq, VCVTh2ud, ...
    return;
    break;
  case 19:
    // VLD1DUPd16, VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32, VLD...
    printVectorListOneAllLanes(MI, 0, STI, O);
    O << ", ";
    break;
  case 20:
    // VLD1DUPq16, VLD1DUPq16wb_fixed, VLD1DUPq16wb_register, VLD1DUPq32, VLD...
    printVectorListTwoAllLanes(MI, 0, STI, O);
    O << ", ";
    break;
  case 21:
    // VLD1d16, VLD1d16wb_fixed, VLD1d16wb_register, VLD1d32, VLD1d32wb_fixed...
    printVectorListOne(MI, 0, STI, O);
    O << ", ";
    break;
  case 22:
    // VLD1d16Q, VLD1d16Qwb_fixed, VLD1d16Qwb_register, VLD1d32Q, VLD1d32Qwb_...
    printVectorListFour(MI, 0, STI, O);
    O << ", ";
    break;
  case 23:
    // VLD1d16T, VLD1d16Twb_fixed, VLD1d16Twb_register, VLD1d32T, VLD1d32Twb_...
    printVectorListThree(MI, 0, STI, O);
    O << ", ";
    break;
  case 24:
    // VLD1q16, VLD1q16wb_fixed, VLD1q16wb_register, VLD1q32, VLD1q32wb_fixed...
    printVectorListTwo(MI, 0, STI, O);
    O << ", ";
    break;
  case 25:
    // VLD2DUPd16x2, VLD2DUPd16x2wb_fixed, VLD2DUPd16x2wb_register, VLD2DUPd3...
    printVectorListTwoSpacedAllLanes(MI, 0, STI, O);
    O << ", ";
    break;
  case 26:
    // VLD2b16, VLD2b16wb_fixed, VLD2b16wb_register, VLD2b32, VLD2b32wb_fixed...
    printVectorListTwoSpaced(MI, 0, STI, O);
    O << ", ";
    break;
  case 27:
    // VLD3DUPdAsm_16, VLD3DUPdAsm_32, VLD3DUPdAsm_8, VLD3DUPdWB_fixed_Asm_16...
    printVectorListThreeAllLanes(MI, 0, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 28:
    // VLD3DUPqAsm_16, VLD3DUPqAsm_32, VLD3DUPqAsm_8, VLD3DUPqWB_fixed_Asm_16...
    printVectorListThreeSpacedAllLanes(MI, 0, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 29:
    // VLD3qAsm_16, VLD3qAsm_32, VLD3qAsm_8, VLD3qWB_fixed_Asm_16, VLD3qWB_fi...
    printVectorListThreeSpaced(MI, 0, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 30:
    // VLD4DUPdAsm_16, VLD4DUPdAsm_32, VLD4DUPdAsm_8, VLD4DUPdWB_fixed_Asm_16...
    printVectorListFourAllLanes(MI, 0, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 31:
    // VLD4DUPqAsm_16, VLD4DUPqAsm_32, VLD4DUPqAsm_8, VLD4DUPqWB_fixed_Asm_16...
    printVectorListFourSpacedAllLanes(MI, 0, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 32:
    // VLD4qAsm_16, VLD4qAsm_32, VLD4qAsm_8, VLD4qWB_fixed_Asm_16, VLD4qWB_fi...
    printVectorListFourSpaced(MI, 0, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 33:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST2LNd16_UPD, VST2LNd32_U...
    printOperand(MI, 4, STI, O);
    break;
  case 34:
    // VST1d16, VST1d32, VST1d64, VST1d8
    printVectorListOne(MI, 2, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 35:
    // VST1d16Q, VST1d32Q, VST1d64Q, VST1d8Q, VST2q16, VST2q32, VST2q8
    printVectorListFour(MI, 2, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 36:
    // VST1d16Qwb_fixed, VST1d32Qwb_fixed, VST1d64Qwb_fixed, VST1d8Qwb_fixed,...
    printVectorListFour(MI, 3, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << '!';
    return;
    break;
  case 37:
    // VST1d16Qwb_register, VST1d32Qwb_register, VST1d64Qwb_register, VST1d8Q...
    printVectorListFour(MI, 4, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 38:
    // VST1d16T, VST1d32T, VST1d64T, VST1d8T
    printVectorListThree(MI, 2, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 39:
    // VST1d16Twb_fixed, VST1d32Twb_fixed, VST1d64Twb_fixed, VST1d8Twb_fixed
    printVectorListThree(MI, 3, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << '!';
    return;
    break;
  case 40:
    // VST1d16Twb_register, VST1d32Twb_register, VST1d64Twb_register, VST1d8T...
    printVectorListThree(MI, 4, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 41:
    // VST1d16wb_fixed, VST1d32wb_fixed, VST1d64wb_fixed, VST1d8wb_fixed
    printVectorListOne(MI, 3, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << '!';
    return;
    break;
  case 42:
    // VST1d16wb_register, VST1d32wb_register, VST1d64wb_register, VST1d8wb_r...
    printVectorListOne(MI, 4, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 43:
    // VST1q16, VST1q32, VST1q64, VST1q8, VST2d16, VST2d32, VST2d8
    printVectorListTwo(MI, 2, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 44:
    // VST1q16wb_fixed, VST1q32wb_fixed, VST1q64wb_fixed, VST1q8wb_fixed, VST...
    printVectorListTwo(MI, 3, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << '!';
    return;
    break;
  case 45:
    // VST1q16wb_register, VST1q32wb_register, VST1q64wb_register, VST1q8wb_r...
    printVectorListTwo(MI, 4, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 46:
    // VST2b16, VST2b32, VST2b8
    printVectorListTwoSpaced(MI, 2, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 47:
    // VST2b16wb_fixed, VST2b32wb_fixed, VST2b8wb_fixed
    printVectorListTwoSpaced(MI, 3, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << '!';
    return;
    break;
  case 48:
    // VST2b16wb_register, VST2b32wb_register, VST2b8wb_register
    printVectorListTwoSpaced(MI, 4, STI, O);
    O << ", ";
    printAddrMode6Operand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 49:
    // t2DMB, t2DSB
    printMemBOption(MI, 0, STI, O);
    return;
    break;
  case 50:
    // t2ISB
    printInstSyncBOption(MI, 0, STI, O);
    return;
    break;
  case 51:
    // t2PLDWi12, t2PLDi12, t2PLIi12
    printAddrModeImm12Operand<false>(MI, 0, STI, O);
    return;
    break;
  case 52:
    // t2PLDWi8, t2PLDi8, t2PLIi8
    printT2AddrModeImm8Operand<false>(MI, 0, STI, O);
    return;
    break;
  case 53:
    // t2PLDWs, t2PLDs, t2PLIs
    printT2AddrModeSoRegOperand(MI, 0, STI, O);
    return;
    break;
  case 54:
    // t2PLDpci, t2PLIpci
    printThumbLdrLabelOperand(MI, 0, STI, O);
    return;
    break;
  case 55:
    // t2TBB
    printAddrModeTBB(MI, 0, STI, O);
    return;
    break;
  case 56:
    // t2TBH
    printAddrModeTBH(MI, 0, STI, O);
    return;
    break;
  case 57:
    // tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tORR, tROR, tS...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 58:
    // tPOP, tPUSH
    printRegisterList(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 30) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    O << ", ";
    break;
  case 1:
    // AESD, AESE, AESIMC, AESMC, BLX_pred, BL_pred, BXJ, BX_pred, Bcc, CPS2p...
    return;
    break;
  case 2:
    // CDP, MCR, MCRR, MSR, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VAC...
    printOperand(MI, 1, STI, O);
    break;
  case 3:
    // FCONSTD, FCONSTS, VMOVv2f32, VMOVv4f32
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 4:
    // FLDMXDB_UPD, FLDMXIA_UPD, FSTMXDB_UPD, FSTMXIA_UPD, LDMDA_UPD, LDMDB_U...
    O << "!, ";
    printRegisterList(MI, 4, STI, O);
    break;
  case 5:
    // LDC2L_OPTION, LDC2_OPTION, STC2L_OPTION, STC2_OPTION
    printCoprocOptionImm(MI, 3, STI, O);
    return;
    break;
  case 6:
    // LDC2L_POST, LDC2_POST, STC2L_POST, STC2_POST
    printPostIdxImm8s4Operand(MI, 3, STI, O);
    return;
    break;
  case 7:
    // LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OPTION,...
    printCImmediate(MI, 1, STI, O);
    O << ", ";
    break;
  case 8:
    // MRS, t2MRS_AR
    O << ", apsr";
    return;
    break;
  case 9:
    // MRSsys, t2MRSsys_AR
    O << ", spsr";
    return;
    break;
  case 10:
    // MSRi
    printModImmOperand(MI, 1, STI, O);
    return;
    break;
  case 11:
    // VCEQzv16i8, VCEQzv2i32, VCEQzv4f16, VCEQzv4i16, VCEQzv4i32, VCEQzv8f16...
    O << ", #0";
    return;
    break;
  case 12:
    // VCVTf2xsd, VCVTf2xsq, VCVTf2xud, VCVTf2xuq, VCVTh2xsd, VCVTh2xsq, VCVT...
    printOperand(MI, 2, STI, O);
    break;
  case 13:
    // VGETLNs16, VGETLNs8, VGETLNu16, VGETLNu8
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 14:
    // VLD1DUPd16, VLD1DUPd32, VLD1DUPd8, VLD1DUPq16, VLD1DUPq32, VLD1DUPq8, ...
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 15:
    // VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32wb_fixed, VLD1DUP...
    printAddrMode6Operand(MI, 2, STI, O);
    break;
  case 16:
    // VLD1LNd16, VLD1LNd16_UPD, VLD1LNd32, VLD1LNd32_UPD, VLD1LNd8, VLD1LNd8...
    O << '[';
    break;
  case 17:
    // VLD3DUPd16, VLD3DUPd16_UPD, VLD3DUPd32, VLD3DUPd32_UPD, VLD3DUPd8, VLD...
    O << "[], ";
    printOperand(MI, 1, STI, O);
    O << "[], ";
    printOperand(MI, 2, STI, O);
    break;
  case 18:
    // VLD3DUPdWB_fixed_Asm_16, VLD3DUPdWB_fixed_Asm_32, VLD3DUPdWB_fixed_Asm...
    O << '!';
    return;
    break;
  case 19:
    // VMRS
    O << ", fpscr";
    return;
    break;
  case 20:
    // VMRS_FPEXC
    O << ", fpexc";
    return;
    break;
  case 21:
    // VMRS_FPINST
    O << ", fpinst";
    return;
    break;
  case 22:
    // VMRS_FPINST2
    O << ", fpinst2";
    return;
    break;
  case 23:
    // VMRS_FPSID
    O << ", fpsid";
    return;
    break;
  case 24:
    // VMRS_MVFR0
    O << ", mvfr0";
    return;
    break;
  case 25:
    // VMRS_MVFR1
    O << ", mvfr1";
    return;
    break;
  case 26:
    // VMRS_MVFR2
    O << ", mvfr2";
    return;
    break;
  case 27:
    // VSETLNi16, VSETLNi32, VSETLNi8
    printVectorIndex(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 28:
    // VSLTOD, VSLTOS, VTOSLD, VTOSLS, VTOULD, VTOULS, VULTOD, VULTOS
    printFBits32(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 64 unique commands.
  switch ((Bits >> 35) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ANDri, ANDrr, ANDrsi, ASRi...
    printOperand(MI, 1, STI, O);
    break;
  case 1:
    // ADR, t2ADR
    printAdrLabelOperand<0>(MI, 1, STI, O);
    return;
    break;
  case 2:
    // BFC, t2BFC
    printBitfieldInvMaskImmOperand(MI, 2, STI, O);
    return;
    break;
  case 3:
    // BFI, CPS3p, CRC32B, CRC32CB, CRC32CH, CRC32CW, CRC32H, CRC32W, MOVTi16...
    printOperand(MI, 2, STI, O);
    break;
  case 4:
    // CDP, MCR, MCRR, VABDfd, VABDfq, VACGEfd, VACGEfq, VACGTfd, VACGTfq, VA...
    O << ", ";
    break;
  case 5:
    // CMNri, CMPri, MOVi, MVNi, TEQri, TSTri
    printModImmOperand(MI, 1, STI, O);
    return;
    break;
  case 6:
    // CMNzrsi, CMPrsi, MOVsi, MVNsi, TEQrsi, TSTrsi
    printSORegImmOperand(MI, 1, STI, O);
    return;
    break;
  case 7:
    // CMNzrsr, CMPrsr, MOVsr, MVNsr, TEQrsr, TSTrsr, t2MOVSsr, t2MOVsr
    printSORegRegOperand(MI, 1, STI, O);
    return;
    break;
  case 8:
    // FLDMXDB_UPD, FLDMXIA_UPD, FSTMXDB_UPD, FSTMXIA_UPD, LDMDA_UPD, LDMDB_U...
    return;
    break;
  case 9:
    // FLDMXIA, FSTMXIA, LDMDA, LDMDB, LDMIA, LDMIB, STMDA, STMDB, STMIA, STM...
    printRegisterList(MI, 3, STI, O);
    break;
  case 10:
    // LDA, LDAB, LDAEX, LDAEXB, LDAEXH, LDAH, LDRBT_POST, LDREX, LDREXB, LDR...
    printAddrMode7Operand(MI, 1, STI, O);
    return;
    break;
  case 11:
    // LDCL_OFFSET, LDC_OFFSET, STCL_OFFSET, STC_OFFSET, t2LDC2L_OFFSET, t2LD...
    printAddrMode5Operand<false>(MI, 2, STI, O);
    return;
    break;
  case 12:
    // LDCL_OPTION, LDCL_POST, LDC_OPTION, LDC_POST, LDRBT_POST_IMM, LDRBT_PO...
    printAddrMode7Operand(MI, 2, STI, O);
    break;
  case 13:
    // LDCL_PRE, LDC_PRE, STCL_PRE, STC_PRE, t2LDC2L_PRE, t2LDC2_PRE, t2LDCL_...
    printAddrMode5Operand<true>(MI, 2, STI, O);
    O << '!';
    return;
    break;
  case 14:
    // LDRB_PRE_IMM, LDR_PRE_IMM, STRB_PRE_IMM, STR_PRE_IMM
    printAddrModeImm12Operand<true>(MI, 2, STI, O);
    O << '!';
    return;
    break;
  case 15:
    // LDRB_PRE_REG, LDR_PRE_REG, STRB_PRE_REG, STR_PRE_REG
    printAddrMode2Operand(MI, 2, STI, O);
    O << '!';
    return;
    break;
  case 16:
    // LDRBi12, LDRcp, LDRi12, STRBi12, STRi12, t2LDRBi12, t2LDRHi12, t2LDRSB...
    printAddrModeImm12Operand<false>(MI, 1, STI, O);
    return;
    break;
  case 17:
    // LDRBrs, LDRrs, STRBrs, STRrs
    printAddrMode2Operand(MI, 1, STI, O);
    return;
    break;
  case 18:
    // LDRH, LDRSB, LDRSH, STRH
    printAddrMode3Operand<false>(MI, 1, STI, O);
    return;
    break;
  case 19:
    // LDRH_PRE, LDRSB_PRE, LDRSH_PRE, STRH_PRE
    printAddrMode3Operand<true>(MI, 2, STI, O);
    O << '!';
    return;
    break;
  case 20:
    // MCR2
    printCImmediate(MI, 3, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 5, STI, O);
    return;
    break;
  case 21:
    // MCRR2, MRRC2, SHA1C, SHA1M, SHA1P, SHA1SU0, SHA256H, SHA256H2, SHA256S...
    printOperand(MI, 3, STI, O);
    break;
  case 22:
    // MRSbanked, t2MRSbanked
    printBankedRegOperand(MI, 1, STI, O);
    return;
    break;
  case 23:
    // SSAT, SSAT16, t2SSAT, t2SSAT16
    printImmPlusOneOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    break;
  case 24:
    // STLEXD, STREXD
    printGPRPairOperand(MI, 1, STI, O);
    O << ", ";
    printAddrMode7Operand(MI, 2, STI, O);
    return;
    break;
  case 25:
    // VCEQzv2f32, VCEQzv4f32, VCGEzv2f32, VCGEzv4f32, VCGTzv2f32, VCGTzv4f32...
    O << ", #0";
    return;
    break;
  case 26:
    // VLD1DUPd16wb_fixed, VLD1DUPd32wb_fixed, VLD1DUPd8wb_fixed, VLD1DUPq16w...
    O << '!';
    return;
    break;
  case 27:
    // VLD1LNd16, VLD1LNd32, VLD1LNd8, VST2LNd16, VST2LNd32, VST2LNd8, VST2LN...
    printNoHashImmediate(MI, 4, STI, O);
    break;
  case 28:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printNoHashImmediate(MI, 6, STI, O);
    break;
  case 29:
    // VLD1LNdAsm_16, VLD1LNdAsm_32, VLD1LNdAsm_8, VLD1LNdWB_fixed_Asm_16, VL...
    printAddrMode6Operand(MI, 2, STI, O);
    break;
  case 30:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printNoHashImmediate(MI, 8, STI, O);
    O << "], ";
    break;
  case 31:
    // VLD3DUPd16, VLD3DUPd16_UPD, VLD3DUPd32, VLD3DUPd32_UPD, VLD3DUPd8, VLD...
    O << "[]}, ";
    break;
  case 32:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printNoHashImmediate(MI, 10, STI, O);
    O << "], ";
    printOperand(MI, 1, STI, O);
    O << '[';
    printNoHashImmediate(MI, 10, STI, O);
    O << "], ";
    printOperand(MI, 2, STI, O);
    O << '[';
    printNoHashImmediate(MI, 10, STI, O);
    break;
  case 33:
    // VLD4DUPd16, VLD4DUPd16_UPD, VLD4DUPd32, VLD4DUPd32_UPD, VLD4DUPd8, VLD...
    O << "[], ";
    printOperand(MI, 3, STI, O);
    O << "[]}, ";
    break;
  case 34:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printNoHashImmediate(MI, 12, STI, O);
    O << "], ";
    printOperand(MI, 1, STI, O);
    O << '[';
    printNoHashImmediate(MI, 12, STI, O);
    O << "], ";
    printOperand(MI, 2, STI, O);
    O << '[';
    printNoHashImmediate(MI, 12, STI, O);
    O << "], ";
    printOperand(MI, 3, STI, O);
    O << '[';
    printNoHashImmediate(MI, 12, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 5, STI, O);
    printAddrMode6OffsetOperand(MI, 7, STI, O);
    return;
    break;
  case 35:
    // VLDRD, VLDRS, VSTRD, VSTRS
    printAddrMode5Operand<false>(MI, 1, STI, O);
    return;
    break;
  case 36:
    // VST1LNd16, VST1LNd32, VST1LNd8
    printNoHashImmediate(MI, 3, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 37:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST3LNd16, VST3LNd32, VST3...
    printNoHashImmediate(MI, 5, STI, O);
    break;
  case 38:
    // VST3LNd16_UPD, VST3LNd32_UPD, VST3LNd8_UPD, VST3LNq16_UPD, VST3LNq32_U...
    printNoHashImmediate(MI, 7, STI, O);
    O << "], ";
    printOperand(MI, 5, STI, O);
    O << '[';
    printNoHashImmediate(MI, 7, STI, O);
    O << "], ";
    printOperand(MI, 6, STI, O);
    O << '[';
    printNoHashImmediate(MI, 7, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 1, STI, O);
    printAddrMode6OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 39:
    // VST3d16_UPD, VST3d32_UPD, VST3d8_UPD, VST3q16_UPD, VST3q32_UPD, VST3q8...
    printOperand(MI, 5, STI, O);
    O << ", ";
    printOperand(MI, 6, STI, O);
    break;
  case 40:
    // VTBL1
    printVectorListOne(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 41:
    // VTBL2
    printVectorListTwo(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 42:
    // VTBL3
    printVectorListThree(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 43:
    // VTBL4
    printVectorListFour(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 44:
    // VTBX1
    printVectorListOne(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 45:
    // VTBX2
    printVectorListTwo(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 46:
    // VTBX3
    printVectorListThree(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 47:
    // VTBX4
    printVectorListFour(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 48:
    // sysLDMDA_UPD, sysLDMDB_UPD, sysLDMIA_UPD, sysLDMIB_UPD, sysSTMDA_UPD, ...
    O << " ^";
    return;
    break;
  case 49:
    // t2CMNzrs, t2CMPrs, t2MOVSsi, t2MOVsi, t2MVNs, t2TEQrs, t2TSTrs
    printT2SOOperand(MI, 1, STI, O);
    return;
    break;
  case 50:
    // t2LDRBT, t2LDRBi8, t2LDRHT, t2LDRHi8, t2LDRSBT, t2LDRSBi8, t2LDRSHT, t...
    printT2AddrModeImm8Operand<false>(MI, 1, STI, O);
    return;
    break;
  case 51:
    // t2LDRB_PRE, t2LDRH_PRE, t2LDRSB_PRE, t2LDRSH_PRE, t2LDR_PRE, t2STRB_PR...
    printT2AddrModeImm8Operand<true>(MI, 2, STI, O);
    O << '!';
    return;
    break;
  case 52:
    // t2LDRBpci, t2LDRHpci, t2LDRSBpci, t2LDRSHpci, t2LDRpci, tLDRpci
    printThumbLdrLabelOperand(MI, 1, STI, O);
    return;
    break;
  case 53:
    // t2LDRBs, t2LDRHs, t2LDRSBs, t2LDRSHs, t2LDRs, t2STRBs, t2STRHs, t2STRs
    printT2AddrModeSoRegOperand(MI, 1, STI, O);
    return;
    break;
  case 54:
    // t2LDREX
    printT2AddrModeImm0_1020s4Operand(MI, 1, STI, O);
    return;
    break;
  case 55:
    // t2MRS_M
    printMSRMaskOperand(MI, 1, STI, O);
    return;
    break;
  case 56:
    // tADDspi, tSUBspi
    printThumbS4ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 57:
    // tADR
    printAdrLabelOperand<2>(MI, 1, STI, O);
    return;
    break;
  case 58:
    // tASRri, tLSRri
    printThumbSRImm(MI, 3, STI, O);
    return;
    break;
  case 59:
    // tLDRBi, tSTRBi
    printThumbAddrModeImm5S1Operand(MI, 1, STI, O);
    return;
    break;
  case 60:
    // tLDRBr, tLDRHr, tLDRSB, tLDRSH, tLDRr, tSTRBr, tSTRHr, tSTRr
    printThumbAddrModeRROperand(MI, 1, STI, O);
    return;
    break;
  case 61:
    // tLDRHi, tSTRHi
    printThumbAddrModeImm5S2Operand(MI, 1, STI, O);
    return;
    break;
  case 62:
    // tLDRi, tSTRi
    printThumbAddrModeImm5S4Operand(MI, 1, STI, O);
    return;
    break;
  case 63:
    // tLDRspi, tSTRspi
    printThumbAddrModeSPOperand(MI, 1, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 41) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ANDri, ANDrr, ANDrsi, ASRi...
    O << ", ";
    break;
  case 1:
    // CDP, t2CDP, t2CDP2
    printCImmediate(MI, 2, STI, O);
    O << ", ";
    printCImmediate(MI, 3, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 5, STI, O);
    return;
    break;
  case 2:
    // CLZ, CMNzrr, CMPrr, CPS3p, CRC32B, CRC32CB, CRC32CH, CRC32CW, CRC32H, ...
    return;
    break;
  case 3:
    // MCR, MCRR, VABDfd, VABDfq, VACGEfd, VACGEfq, VACGTfd, VACGTfq, VADDD, ...
    printOperand(MI, 2, STI, O);
    break;
  case 4:
    // SSAT, t2SSAT
    printShiftImmOperand(MI, 3, STI, O);
    return;
    break;
  case 5:
    // SXTB, SXTB16, SXTH, UXTB, UXTB16, UXTH, t2SXTB, t2SXTB16, t2SXTH, t2UX...
    printRotImmOperand(MI, 2, STI, O);
    return;
    break;
  case 6:
    // VDUPLN16d, VDUPLN16q, VDUPLN32d, VDUPLN32q, VDUPLN8d, VDUPLN8q, VGETLN...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 7:
    // VFMAD, VFMAS, VFMAfd, VFMAfq, VFMSD, VFMSS, VFMSfd, VFMSfq, VFNMAD, VF...
    printOperand(MI, 3, STI, O);
    break;
  case 8:
    // VLD1DUPd16wb_register, VLD1DUPd32wb_register, VLD1DUPd8wb_register, VL...
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 9:
    // VLD1LNd16, VLD1LNd16_UPD, VLD1LNd32, VLD1LNd32_UPD, VLD1LNd8, VLD1LNd8...
    O << "]}, ";
    break;
  case 10:
    // VLD1LNdWB_fixed_Asm_16, VLD1LNdWB_fixed_Asm_32, VLD1LNdWB_fixed_Asm_8,...
    O << '!';
    return;
    break;
  case 11:
    // VLD2LNd16, VLD2LNd32, VLD2LNd8, VLD2LNq16, VLD2LNq32, VLD4LNd16, VLD4L...
    O << "], ";
    break;
  case 12:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printOperand(MI, 1, STI, O);
    O << '[';
    printNoHashImmediate(MI, 8, STI, O);
    break;
  case 13:
    // VLD3DUPd16, VLD3DUPd32, VLD3DUPd8, VLD3DUPq16, VLD3DUPq32, VLD3DUPq8
    printAddrMode6Operand(MI, 3, STI, O);
    return;
    break;
  case 14:
    // VLD3DUPd16_UPD, VLD3DUPd32_UPD, VLD3DUPd8_UPD, VLD3DUPq16_UPD, VLD3DUP...
    printAddrMode6Operand(MI, 4, STI, O);
    break;
  case 15:
    // VLD4DUPd16_UPD, VLD4DUPd32_UPD, VLD4DUPd8_UPD, VLD4DUPq16_UPD, VLD4DUP...
    printAddrMode6Operand(MI, 5, STI, O);
    printAddrMode6OffsetOperand(MI, 7, STI, O);
    return;
    break;
  case 16:
    // VMLALslsv2i32, VMLALslsv4i16, VMLALsluv2i32, VMLALsluv4i16, VMLAslhd, ...
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 17:
    // VMULLslsv2i32, VMULLslsv4i16, VMULLsluv2i32, VMULLsluv4i16, VMULslhd, ...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 18:
    // VST3d16_UPD, VST3d32_UPD, VST3d8_UPD, VST3q16_UPD, VST3q32_UPD, VST3q8...
    O << "}, ";
    printAddrMode6Operand(MI, 1, STI, O);
    printAddrMode6OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 19:
    // VST4LNd16_UPD, VST4LNd32_UPD, VST4LNd8_UPD, VST4LNq16_UPD, VST4LNq32_U...
    printOperand(MI, 5, STI, O);
    O << '[';
    printNoHashImmediate(MI, 8, STI, O);
    O << "], ";
    printOperand(MI, 6, STI, O);
    O << '[';
    printNoHashImmediate(MI, 8, STI, O);
    O << "], ";
    printOperand(MI, 7, STI, O);
    O << '[';
    printNoHashImmediate(MI, 8, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 1, STI, O);
    printAddrMode6OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 20:
    // sysLDMDA, sysLDMDB, sysLDMIA, sysLDMIB, sysSTMDA, sysSTMDB, sysSTMIA, ...
    O << " ^";
    return;
    break;
  case 21:
    // t2LDRB_POST, t2LDRH_POST, t2LDRSB_POST, t2LDRSH_POST, t2LDR_POST, t2ST...
    printT2AddrModeImm8OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 22:
    // t2MOVsra_flag, t2MOVsrl_flag
    O << ", #1";
    return;
    break;
  }


  // Fragment 6 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 46) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCri, ADDri, ANDri, BICri, EORri, ORRri, RSBri, RSCri, SBCri, SUBri
    printModImmOperand(MI, 2, STI, O);
    return;
    break;
  case 1:
    // ADCrr, ADDrr, ANDrr, ASRi, ASRr, BICrr, EORrr, LSLi, LSLr, LSRi, LSRr,...
    printOperand(MI, 2, STI, O);
    break;
  case 2:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, ORRrsi, RSBrsi, RSCrsi, SBCrsi...
    printSORegImmOperand(MI, 2, STI, O);
    return;
    break;
  case 3:
    // BFI, t2BFI
    printBitfieldInvMaskImmOperand(MI, 3, STI, O);
    return;
    break;
  case 4:
    // LDCL_OPTION, LDC_OPTION, STCL_OPTION, STC_OPTION, t2LDC2L_OPTION, t2LD...
    printCoprocOptionImm(MI, 3, STI, O);
    return;
    break;
  case 5:
    // LDCL_POST, LDC_POST, STCL_POST, STC_POST, t2LDC2L_POST, t2LDC2_POST, t...
    printPostIdxImm8s4Operand(MI, 3, STI, O);
    return;
    break;
  case 6:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRT_POS...
    printAddrMode2OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 7:
    // LDRD, STRD
    printAddrMode3Operand<false>(MI, 2, STI, O);
    return;
    break;
  case 8:
    // LDRD_POST, STRD_POST, t2LDRD_POST, t2STRD_POST
    printAddrMode7Operand(MI, 3, STI, O);
    break;
  case 9:
    // LDRD_PRE, STRD_PRE
    printAddrMode3Operand<true>(MI, 3, STI, O);
    O << '!';
    return;
    break;
  case 10:
    // LDRHTi, LDRSBTi, LDRSHTi, STRHTi
    printPostIdxImm8Operand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // LDRHTr, LDRSBTr, LDRSHTr, STRHTr
    printPostIdxRegOperand(MI, 3, STI, O);
    return;
    break;
  case 12:
    // LDRH_POST, LDRSB_POST, LDRSH_POST, STRH_POST
    printAddrMode3OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 13:
    // MCR, MCRR, t2MCR, t2MCR2, t2MCRR, t2MCRR2
    O << ", ";
    break;
  case 14:
    // MCRR2, MRRC2
    printCImmediate(MI, 4, STI, O);
    return;
    break;
  case 15:
    // STLEX, STLEXB, STLEXH, STREX, STREXB, STREXH, SWP, SWPB, t2LDAEXD, t2L...
    printAddrMode7Operand(MI, 2, STI, O);
    return;
    break;
  case 16:
    // VABDfd, VABDfq, VACGEfd, VACGEfq, VACGTfd, VACGTfq, VADDD, VADDS, VADD...
    return;
    break;
  case 17:
    // VBIFd, VBIFq, VBITd, VBITq, VBSLd, VBSLq, VLD4LNd16, VLD4LNd32, VLD4LN...
    printOperand(MI, 3, STI, O);
    break;
  case 18:
    // VLD1LNd16, VLD1LNd32, VLD1LNd8, VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8...
    printAddrMode6Operand(MI, 1, STI, O);
    break;
  case 19:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD
    printAddrMode6Operand(MI, 2, STI, O);
    printAddrMode6OffsetOperand(MI, 4, STI, O);
    return;
    break;
  case 20:
    // VLD1LNdWB_register_Asm_16, VLD1LNdWB_register_Asm_32, VLD1LNdWB_regist...
    printOperand(MI, 4, STI, O);
    break;
  case 21:
    // VLD2LNd16, VLD2LNd32, VLD2LNd8, VLD2LNq16, VLD2LNq32
    printOperand(MI, 1, STI, O);
    O << '[';
    printNoHashImmediate(MI, 6, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 2, STI, O);
    return;
    break;
  case 22:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    O << "]}, ";
    printAddrMode6Operand(MI, 3, STI, O);
    printAddrMode6OffsetOperand(MI, 5, STI, O);
    return;
    break;
  case 23:
    // VLD3DUPd16_UPD, VLD3DUPd32_UPD, VLD3DUPd8_UPD, VLD3DUPq16_UPD, VLD3DUP...
    printAddrMode6OffsetOperand(MI, 6, STI, O);
    return;
    break;
  case 24:
    // VLD3LNd16, VLD3LNd32, VLD3LNd8, VLD3LNq16, VLD3LNq32
    O << "], ";
    printOperand(MI, 2, STI, O);
    O << '[';
    printNoHashImmediate(MI, 8, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 3, STI, O);
    return;
    break;
  case 25:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printAddrMode6Operand(MI, 4, STI, O);
    printAddrMode6OffsetOperand(MI, 6, STI, O);
    return;
    break;
  case 26:
    // VMLAslfd, VMLAslfq, VMLSslfd, VMLSslfq
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 27:
    // VMULslfd, VMULslfq
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 28:
    // VST2LNd16_UPD, VST2LNd32_UPD, VST2LNd8_UPD, VST2LNq16_UPD, VST2LNq32_U...
    printOperand(MI, 5, STI, O);
    O << '[';
    printNoHashImmediate(MI, 6, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 1, STI, O);
    printAddrMode6OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 29:
    // VST4d16_UPD, VST4d32_UPD, VST4d8_UPD, VST4q16_UPD, VST4q32_UPD, VST4q8...
    printOperand(MI, 7, STI, O);
    O << "}, ";
    printAddrMode6Operand(MI, 1, STI, O);
    printAddrMode6OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 30:
    // t2ADCrs, t2ADDrs, t2ANDrs, t2BICrs, t2EORrs, t2ORNrs, t2ORRrs, t2RSBrs...
    printT2SOOperand(MI, 2, STI, O);
    return;
    break;
  case 31:
    // t2ASRri, t2LSRri
    printThumbSRImm(MI, 2, STI, O);
    return;
    break;
  case 32:
    // t2LDRD_PRE, t2STRD_PRE
    printT2AddrModeImm8s4Operand<true>(MI, 3, STI, O);
    O << '!';
    return;
    break;
  case 33:
    // t2LDRDi8, t2STRDi8
    printT2AddrModeImm8s4Operand<false>(MI, 2, STI, O);
    return;
    break;
  case 34:
    // t2STREX
    printT2AddrModeImm0_1020s4Operand(MI, 2, STI, O);
    return;
    break;
  case 35:
    // tADDrSPi
    printThumbS4ImmOperand(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 7 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 52) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCrr, ADDrr, ANDrr, ASRi, ASRr, BICrr, EORrr, LSLi, LSLr, LSRi, LSRr,...
    return;
    break;
  case 1:
    // LDRD_POST, MLA, MLS, SBFX, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SML...
    O << ", ";
    break;
  case 2:
    // MCR, t2MCR, t2MCR2
    printCImmediate(MI, 3, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 5, STI, O);
    return;
    break;
  case 3:
    // MCRR, t2MCRR, t2MCRR2
    printOperand(MI, 3, STI, O);
    O << ", ";
    printCImmediate(MI, 4, STI, O);
    return;
    break;
  case 4:
    // PKHBT, t2PKHBT
    printPKHLSLShiftImm(MI, 3, STI, O);
    return;
    break;
  case 5:
    // PKHTB, t2PKHTB
    printPKHASRShiftImm(MI, 3, STI, O);
    return;
    break;
  case 6:
    // SXTAB, SXTAB16, SXTAH, UXTAB, UXTAB16, UXTAH, t2SXTAB, t2SXTAB16, t2SX...
    printRotImmOperand(MI, 3, STI, O);
    return;
    break;
  case 7:
    // USAT, t2USAT
    printShiftImmOperand(MI, 3, STI, O);
    return;
    break;
  case 8:
    // VLD3d16, VLD3d16_UPD, VLD3d32, VLD3d32_UPD, VLD3d8, VLD3d8_UPD, VLD3q1...
    O << "}, ";
    break;
  case 9:
    // VLD4LNd16, VLD4LNd32, VLD4LNd8, VLD4LNq16, VLD4LNq32, VST2LNd16, VST2L...
    O << '[';
    break;
  case 10:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD
    printAddrMode6OffsetOperand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // t2LDRD_POST, t2STRD_POST
    printT2AddrModeImm8s4OffsetOperand(MI, 4, STI, O);
    return;
    break;
  }


  // Fragment 8 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 56) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // LDRD_POST, STRD_POST
    printAddrMode3OffsetOperand(MI, 4, STI, O);
    return;
    break;
  case 1:
    // MLA, MLS, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SMLALBT, SMLALD, SML...
    printOperand(MI, 3, STI, O);
    break;
  case 2:
    // SBFX, UBFX, t2SBFX, t2UBFX
    printImmPlusOneOperand(MI, 3, STI, O);
    return;
    break;
  case 3:
    // VLD3d16, VLD3d32, VLD3d8, VLD3q16, VLD3q32, VLD3q8
    printAddrMode6Operand(MI, 3, STI, O);
    return;
    break;
  case 4:
    // VLD3d16_UPD, VLD3d32_UPD, VLD3d8_UPD, VLD3q16_UPD, VLD3q32_UPD, VLD3q8...
    printAddrMode6Operand(MI, 4, STI, O);
    printAddrMode6OffsetOperand(MI, 6, STI, O);
    return;
    break;
  case 5:
    // VLD4LNd16, VLD4LNd32, VLD4LNd8, VLD4LNq16, VLD4LNq32
    printNoHashImmediate(MI, 10, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 4, STI, O);
    return;
    break;
  case 6:
    // VST2LNd16, VST2LNd32, VST2LNd8, VST2LNq16, VST2LNq32
    printNoHashImmediate(MI, 4, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 7:
    // VST3LNd16, VST3LNd32, VST3LNd8, VST3LNq16, VST3LNq32
    printNoHashImmediate(MI, 5, STI, O);
    O << "], ";
    printOperand(MI, 4, STI, O);
    O << '[';
    printNoHashImmediate(MI, 5, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 8:
    // VST3d16, VST3d32, VST3d8, VST3q16, VST3q32, VST3q8
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 9:
    // VST4LNd16, VST4LNd32, VST4LNd8, VST4LNq16, VST4LNq32
    printNoHashImmediate(MI, 6, STI, O);
    O << "], ";
    printOperand(MI, 4, STI, O);
    O << '[';
    printNoHashImmediate(MI, 6, STI, O);
    O << "], ";
    printOperand(MI, 5, STI, O);
    O << '[';
    printNoHashImmediate(MI, 6, STI, O);
    O << "]}, ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 10:
    // VST4d16, VST4d32, VST4d8, VST4q16, VST4q32, VST4q8
    printOperand(MI, 5, STI, O);
    O << "}, ";
    printAddrMode6Operand(MI, 0, STI, O);
    return;
    break;
  case 11:
    // t2SMLSLDX
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 12:
    // t2STLEXD, t2STREXD
    printAddrMode7Operand(MI, 3, STI, O);
    return;
    break;
  }


  // Fragment 9 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 60) & 1) {
    // VLD4d16, VLD4d16_UPD, VLD4d32, VLD4d32_UPD, VLD4d8, VLD4d8_UPD, VLD4q1...
    O << "}, ";
  } else {
    // MLA, MLS, SMLABB, SMLABT, SMLAD, SMLADX, SMLALBB, SMLALBT, SMLALD, SML...
    return;
  }


  // Fragment 10 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 61) & 1) {
    // VLD4d16_UPD, VLD4d32_UPD, VLD4d8_UPD, VLD4q16_UPD, VLD4q32_UPD, VLD4q8...
    printAddrMode6Operand(MI, 5, STI, O);
    printAddrMode6OffsetOperand(MI, 7, STI, O);
    return;
  } else {
    // VLD4d16, VLD4d32, VLD4d8, VLD4q16, VLD4q32, VLD4q8
    printAddrMode6Operand(MI, 4, STI, O);
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 289 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'D', '4', '_', 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', 0,
  /* 13 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 26 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 39 */ 'd', '1', '0', 0,
  /* 43 */ 'q', '1', '0', 0,
  /* 47 */ 'r', '1', '0', 0,
  /* 51 */ 's', '1', '0', 0,
  /* 55 */ 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', 0,
  /* 71 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 87 */ 'd', '2', '0', 0,
  /* 91 */ 's', '2', '0', 0,
  /* 95 */ 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', '_', 'D', '3', '0', 0,
  /* 111 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 127 */ 'd', '3', '0', 0,
  /* 131 */ 's', '3', '0', 0,
  /* 135 */ 'd', '0', 0,
  /* 138 */ 'q', '0', 0,
  /* 141 */ 'm', 'v', 'f', 'r', '0', 0,
  /* 147 */ 's', '0', 0,
  /* 150 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 161 */ 'D', '5', '_', 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', 0,
  /* 174 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 188 */ 'R', '1', '0', '_', 'R', '1', '1', 0,
  /* 196 */ 'd', '1', '1', 0,
  /* 200 */ 'q', '1', '1', 0,
  /* 204 */ 'r', '1', '1', 0,
  /* 208 */ 's', '1', '1', 0,
  /* 212 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 224 */ 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', 0,
  /* 240 */ 'd', '2', '1', 0,
  /* 244 */ 's', '2', '1', 0,
  /* 248 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 260 */ 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', '_', 'D', '3', '1', 0,
  /* 276 */ 'd', '3', '1', 0,
  /* 280 */ 's', '3', '1', 0,
  /* 284 */ 'Q', '0', '_', 'Q', '1', 0,
  /* 290 */ 'R', '0', '_', 'R', '1', 0,
  /* 296 */ 'd', '1', 0,
  /* 299 */ 'q', '1', 0,
  /* 302 */ 'm', 'v', 'f', 'r', '1', 0,
  /* 308 */ 's', '1', 0,
  /* 311 */ 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', 0,
  /* 325 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 340 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 355 */ 'd', '1', '2', 0,
  /* 359 */ 'q', '1', '2', 0,
  /* 363 */ 'r', '1', '2', 0,
  /* 367 */ 's', '1', '2', 0,
  /* 371 */ 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', 0,
  /* 387 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 403 */ 'd', '2', '2', 0,
  /* 407 */ 's', '2', '2', 0,
  /* 411 */ 'D', '0', '_', 'D', '2', 0,
  /* 417 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 426 */ 'Q', '1', '_', 'Q', '2', 0,
  /* 432 */ 'd', '2', 0,
  /* 435 */ 'q', '2', 0,
  /* 438 */ 'm', 'v', 'f', 'r', '2', 0,
  /* 444 */ 's', '2', 0,
  /* 447 */ 'f', 'p', 'i', 'n', 's', 't', '2', 0,
  /* 455 */ 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', 0,
  /* 469 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 481 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 497 */ 'd', '1', '3', 0,
  /* 501 */ 'q', '1', '3', 0,
  /* 505 */ 's', '1', '3', 0,
  /* 509 */ 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', 0,
  /* 525 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 537 */ 'd', '2', '3', 0,
  /* 541 */ 's', '2', '3', 0,
  /* 545 */ 'D', '1', '_', 'D', '3', 0,
  /* 551 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 560 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 572 */ 'R', '2', '_', 'R', '3', 0,
  /* 578 */ 'd', '3', 0,
  /* 581 */ 'q', '3', 0,
  /* 584 */ 'r', '3', 0,
  /* 587 */ 's', '3', 0,
  /* 590 */ 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', 0,
  /* 605 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 621 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 637 */ 'd', '1', '4', 0,
  /* 641 */ 'q', '1', '4', 0,
  /* 645 */ 's', '1', '4', 0,
  /* 649 */ 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', 0,
  /* 665 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 681 */ 'd', '2', '4', 0,
  /* 685 */ 's', '2', '4', 0,
  /* 689 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', 0,
  /* 698 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 710 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 722 */ 'd', '4', 0,
  /* 725 */ 'q', '4', 0,
  /* 728 */ 'r', '4', 0,
  /* 731 */ 's', '4', 0,
  /* 734 */ 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', 0,
  /* 749 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 761 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 777 */ 'd', '1', '5', 0,
  /* 781 */ 'q', '1', '5', 0,
  /* 785 */ 's', '1', '5', 0,
  /* 789 */ 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', 0,
  /* 805 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 817 */ 'd', '2', '5', 0,
  /* 821 */ 's', '2', '5', 0,
  /* 825 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', 0,
  /* 834 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 843 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 855 */ 'R', '4', '_', 'R', '5', 0,
  /* 861 */ 'd', '5', 0,
  /* 864 */ 'q', '5', 0,
  /* 867 */ 'r', '5', 0,
  /* 870 */ 's', '5', 0,
  /* 873 */ 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', 0,
  /* 889 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 905 */ 'd', '1', '6', 0,
  /* 909 */ 's', '1', '6', 0,
  /* 913 */ 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', 0,
  /* 929 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 945 */ 'd', '2', '6', 0,
  /* 949 */ 's', '2', '6', 0,
  /* 953 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', '_', 'D', '6', 0,
  /* 965 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 977 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 989 */ 'd', '6', 0,
  /* 992 */ 'q', '6', 0,
  /* 995 */ 'r', '6', 0,
  /* 998 */ 's', '6', 0,
  /* 1001 */ 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', 0,
  /* 1017 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1029 */ 'd', '1', '7', 0,
  /* 1033 */ 's', '1', '7', 0,
  /* 1037 */ 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', 0,
  /* 1053 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1065 */ 'd', '2', '7', 0,
  /* 1069 */ 's', '2', '7', 0,
  /* 1073 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', '_', 'D', '7', 0,
  /* 1085 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1094 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1106 */ 'R', '6', '_', 'R', '7', 0,
  /* 1112 */ 'd', '7', 0,
  /* 1115 */ 'q', '7', 0,
  /* 1118 */ 'r', '7', 0,
  /* 1121 */ 's', '7', 0,
  /* 1124 */ 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', 0,
  /* 1140 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1156 */ 'd', '1', '8', 0,
  /* 1160 */ 's', '1', '8', 0,
  /* 1164 */ 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', 0,
  /* 1180 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1196 */ 'd', '2', '8', 0,
  /* 1200 */ 's', '2', '8', 0,
  /* 1204 */ 'D', '2', '_', 'D', '4', '_', 'D', '6', '_', 'D', '8', 0,
  /* 1216 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1228 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1240 */ 'd', '8', 0,
  /* 1243 */ 'q', '8', 0,
  /* 1246 */ 'r', '8', 0,
  /* 1249 */ 's', '8', 0,
  /* 1252 */ 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', 0,
  /* 1268 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1280 */ 'd', '1', '9', 0,
  /* 1284 */ 's', '1', '9', 0,
  /* 1288 */ 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', 0,
  /* 1304 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1316 */ 'd', '2', '9', 0,
  /* 1320 */ 's', '2', '9', 0,
  /* 1324 */ 'D', '3', '_', 'D', '5', '_', 'D', '7', '_', 'D', '9', 0,
  /* 1336 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1345 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1357 */ 'R', '8', '_', 'R', '9', 0,
  /* 1363 */ 'd', '9', 0,
  /* 1366 */ 'q', '9', 0,
  /* 1369 */ 'r', '9', 0,
  /* 1372 */ 's', '9', 0,
  /* 1375 */ 'R', '1', '2', '_', 'S', 'P', 0,
  /* 1382 */ 'p', 'c', 0,
  /* 1385 */ 'f', 'p', 'e', 'x', 'c', 0,
  /* 1391 */ 'f', 'p', 's', 'i', 'd', 0,
  /* 1397 */ 'i', 't', 's', 't', 'a', 't', 'e', 0,
  /* 1405 */ 's', 'p', 0,
  /* 1408 */ 'f', 'p', 's', 'c', 'r', 0,
  /* 1414 */ 'l', 'r', 0,
  /* 1417 */ 'a', 'p', 's', 'r', 0,
  /* 1422 */ 'c', 'p', 's', 'r', 0,
  /* 1427 */ 's', 'p', 's', 'r', 0,
  /* 1432 */ 'f', 'p', 'i', 'n', 's', 't', 0,
  /* 1439 */ 'f', 'p', 's', 'c', 'r', '_', 'n', 'z', 'c', 'v', 0,
  /* 1450 */ 'a', 'p', 's', 'r', '_', 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    1417, 1450, 1422, 1385, 1432, 1408, 1439, 1391, 1397, 1414, 1382, 1405, 1427, 135, 
    296, 432, 578, 722, 861, 989, 1112, 1240, 1363, 39, 196, 355, 497, 637, 
    777, 905, 1029, 1156, 1280, 87, 240, 403, 537, 681, 817, 945, 1065, 1196, 
    1316, 127, 276, 447, 141, 302, 438, 138, 299, 435, 581, 725, 864, 992, 
    1115, 1243, 1366, 43, 200, 359, 501, 641, 781, 144, 305, 441, 584, 728, 
    867, 995, 1118, 1246, 1369, 47, 204, 363, 147, 308, 444, 587, 731, 870, 
    998, 1121, 1249, 1372, 51, 208, 367, 505, 645, 785, 909, 1033, 1160, 1284, 
    91, 244, 407, 541, 685, 821, 949, 1069, 1200, 1320, 131, 280, 411, 545, 
    692, 828, 959, 1079, 1210, 1330, 6, 167, 317, 461, 597, 741, 881, 1009, 
    1132, 1260, 63, 232, 379, 517, 657, 797, 921, 1045, 1172, 1296, 103, 268, 
    284, 426, 566, 716, 849, 983, 1100, 1234, 1351, 32, 180, 347, 489, 629, 
    769, 560, 710, 843, 977, 1094, 1228, 1345, 26, 174, 340, 481, 621, 761, 
    1375, 290, 572, 855, 1106, 1357, 188, 417, 551, 701, 834, 968, 1085, 1219, 
    1336, 16, 150, 328, 469, 609, 749, 893, 1017, 1144, 1268, 75, 212, 391, 
    525, 669, 805, 933, 1053, 1184, 1304, 115, 248, 689, 825, 956, 1076, 1207, 
    1327, 3, 164, 314, 458, 593, 737, 877, 1005, 1128, 1256, 59, 228, 375, 
    513, 653, 793, 917, 1041, 1168, 1292, 99, 264, 953, 1073, 1204, 1324, 0, 
    161, 311, 455, 590, 734, 873, 1001, 1124, 1252, 55, 224, 371, 509, 649, 
    789, 913, 1037, 1164, 1288, 95, 260, 420, 704, 971, 1222, 19, 332, 613, 
    897, 1148, 79, 395, 673, 937, 1188, 119, 698, 965, 1216, 13, 325, 605, 
    889, 1140, 71, 387, 665, 929, 1180, 111, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool ARMInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case ARM::ANDri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDri GPR:$Rd, GPR:$Rn, mod_imm_not:$imm, pred:$p, cc_out:$s)
      AsmString = "bic$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (ANDri GPR:$Rdn, GPR:$Rdn, mod_imm_not:$imm, pred:$p, cc_out:$s)
      AsmString = "bic$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::BICri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BICri GPR:$Rd, GPR:$Rn, mod_imm_not:$imm, pred:$p, cc_out:$s)
      AsmString = "and$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (BICri GPR:$Rdn, GPR:$Rdn, mod_imm_not:$imm, pred:$p, cc_out:$s)
      AsmString = "and$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::BKPT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (BKPT 0)
      AsmString = "bkpt";
      break;
    }
    return false;
  case ARM::CMNri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (CMNri rGPR:$Rd, mod_imm_neg:$imm, pred:$p)
      AsmString = "cmp$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::CMPri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (CMPri rGPR:$Rd, mod_imm_neg:$imm, pred:$p)
      AsmString = "cmn$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::DMB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM::DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM::FCONSTD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (FCONSTD DPR:$Dd, vfp_f64imm:$val, pred:$p)
      AsmString = "fconstd$\xFF\x03\x01 $\x01, $\xFF\x02\x03";
      break;
    }
    return false;
  case ARM::FCONSTS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (FCONSTS SPR:$Sd, vfp_f32imm:$val, pred:$p)
      AsmString = "fconsts$\xFF\x03\x01 $\x01, $\xFF\x02\x03";
      break;
    }
    return false;
  case ARM::FMSTAT:
    if (MI->getNumOperands() == 2) {
      // (FMSTAT pred:$p)
      AsmString = "fmstat$\xFF\x01\x01";
      break;
    }
    return false;
  case ARM::HINT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT 0, pred:$p)
      AsmString = "nop$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT 1, pred:$p)
      AsmString = "yield$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT 2, pred:$p)
      AsmString = "wfe$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT 3, pred:$p)
      AsmString = "wfi$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT 4, pred:$p)
      AsmString = "sev$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT 5, pred:$p)
      AsmString = "sevl$\xFF\x02\x01";
      break;
    }
    return false;
  case ARM::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case ARM::LDMIA_UPD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == ARM::SP) {
      // (LDMIA_UPD SP, pred:$p, reglist:$regs)
      AsmString = "pop$\xFF\x02\x01 $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::MCR:
    if (MI->getNumOperands() == 8 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (MCR p_imm:$cop, imm0_7:$opc1, GPR:$Rt, c_imm:$CRn, c_imm:$CRm, 0, pred:$p)
      AsmString = "mcr$\xFF\x07\x01 $\xFF\x01\x05, $\x02, $\x03, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::MCR2:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (MCR2 p_imm:$cop, imm0_7:$opc1, GPR:$Rt, c_imm:$CRn, c_imm:$CRm, 0)
      AsmString = "mcr2 $\xFF\x01\x05, $\x02, $\x03, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::MLA:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(3).getReg())) {
      // (MLA GPRnopc:$Rd, GPRnopc:$Rn, GPRnopc:$Rm, GPRnopc:$Ra, pred:$p, cc_out:$s)
      AsmString = "mla$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case ARM::MOVi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MOVi rGPR:$Rd, mod_imm_not:$imm, pred:$p, cc_out:$s)
      AsmString = "mvn$\xFF\x05\x02$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::MOVi16:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MOVi16 GPR:$Rd, imm0_65535_expr:$imm, pred:$p)
      AsmString = "mov$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::MRC:
    if (MI->getNumOperands() == 8 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRwithAPSRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (MRC GPRwithAPSR:$Rt, p_imm:$cop, imm0_7:$opc1, c_imm:$CRn, c_imm:$CRm, 0, pred:$p)
      AsmString = "mrc$\xFF\x07\x01 $\xFF\x02\x05, $\x03, $\x01, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::MRC2:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRwithAPSRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (MRC2 GPRwithAPSR:$Rt, p_imm:$cop, imm0_7:$opc1, c_imm:$CRn, c_imm:$CRm, 0)
      AsmString = "mrc2 $\xFF\x02\x05, $\x03, $\x01, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::MRS:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MRS GPRnopc:$Rd, pred:$p)
      AsmString = "mrs$\xFF\x02\x01 $\x01, cpsr";
      break;
    }
    return false;
  case ARM::MUL:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg())) {
      // (MUL GPRnopc:$Rd, GPRnopc:$Rn, GPRnopc:$Rm, pred:$p, cc_out:$s)
      AsmString = "mul$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::MVNi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MVNi rGPR:$Rd, mod_imm_not:$imm, pred:$p, cc_out:$s)
      AsmString = "mov$\xFF\x05\x02$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::RSBri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RSBri GPR:$Rd, GPR:$Rm, 0, pred:$p, cc_out:$s)
      AsmString = "neg$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::SMLAL:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (SMLAL GPR:$RdLo, GPR:$RdHi, GPR:$Rn, GPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "smlal$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case ARM::SMULL:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (SMULL GPR:$RdLo, GPR:$RdHi, GPR:$Rn, GPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "smull$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case ARM::SRSDA:
    if (MI->getNumOperands() == 1) {
      // (SRSDA imm0_31:$mode)
      AsmString = "srsda $\x01";
      break;
    }
    return false;
  case ARM::SRSDA_UPD:
    if (MI->getNumOperands() == 1) {
      // (SRSDA_UPD imm0_31:$mode)
      AsmString = "srsda $\x01!";
      break;
    }
    return false;
  case ARM::SRSDB:
    if (MI->getNumOperands() == 1) {
      // (SRSDB imm0_31:$mode)
      AsmString = "srsdb $\x01";
      break;
    }
    return false;
  case ARM::SRSDB_UPD:
    if (MI->getNumOperands() == 1) {
      // (SRSDB_UPD imm0_31:$mode)
      AsmString = "srsdb $\x01!";
      break;
    }
    return false;
  case ARM::SRSIA:
    if (MI->getNumOperands() == 1) {
      // (SRSIA imm0_31:$mode)
      AsmString = "srsia $\x01";
      break;
    }
    return false;
  case ARM::SRSIA_UPD:
    if (MI->getNumOperands() == 1) {
      // (SRSIA_UPD imm0_31:$mode)
      AsmString = "srsia $\x01!";
      break;
    }
    return false;
  case ARM::SRSIB:
    if (MI->getNumOperands() == 1) {
      // (SRSIB imm0_31:$mode)
      AsmString = "srsib $\x01";
      break;
    }
    return false;
  case ARM::SRSIB_UPD:
    if (MI->getNumOperands() == 1) {
      // (SRSIB_UPD imm0_31:$mode)
      AsmString = "srsib $\x01!";
      break;
    }
    return false;
  case ARM::SSAT:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SSAT GPRnopc:$Rd, imm1_32:$sat_imm, GPRnopc:$Rn, 0, pred:$p)
      AsmString = "ssat$\xFF\x05\x01 $\x01, $\xFF\x02\x07, $\x03";
      break;
    }
    return false;
  case ARM::STMDB_UPD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == ARM::SP) {
      // (STMDB_UPD SP, pred:$p, reglist:$regs)
      AsmString = "push$\xFF\x02\x01 $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::SUBri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBri GPR:$Rd, GPR:$Rn, mod_imm_neg:$imm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (SUBri GPR:$Rd, GPR:$Rd, mod_imm_neg:$imm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::SXTAB:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SXTAB GPRnopc:$Rd, GPR:$Rn, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "sxtab$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::SXTAB16:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SXTAB16 GPRnopc:$Rd, GPR:$Rn, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "sxtab16$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::SXTAH:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SXTAH GPRnopc:$Rd, GPR:$Rn, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "sxtah$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::SXTB:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SXTB GPRnopc:$Rd, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "sxtb$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::SXTB16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SXTB16 GPRnopc:$Rd, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "sxtb16$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::SXTH:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SXTH GPRnopc:$Rd, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "sxth$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::UMLAL:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (UMLAL GPR:$RdLo, GPR:$RdHi, GPR:$Rn, GPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "umlal$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case ARM::UMULL:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (UMULL GPR:$RdLo, GPR:$RdHi, GPR:$Rn, GPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "umull$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case ARM::USAT:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (USAT GPRnopc:$Rd, imm0_31:$sat_imm, GPRnopc:$Rn, 0, pred:$p)
      AsmString = "usat$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::UXTAB:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (UXTAB GPRnopc:$Rd, GPR:$Rn, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "uxtab$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::UXTAB16:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (UXTAB16 GPRnopc:$Rd, GPR:$Rn, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "uxtab16$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::UXTAH:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (UXTAH GPRnopc:$Rd, GPR:$Rn, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "uxtah$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::UXTB:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (UXTB GPRnopc:$Rd, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "uxtb$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::UXTB16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (UXTB16 GPRnopc:$Rd, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "uxtb16$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::UXTH:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (UXTH GPRnopc:$Rd, GPRnopc:$Rm, 0, pred:$p)
      AsmString = "uxth$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGEfd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGEfd DPR:$Vd, DPR:$Vm, DPR:$Vn, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGEfd DPR:$Vd, DPR:$Vm, DPR:$Vd, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f32 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGEfq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGEfq QPR:$Vd, QPR:$Vm, QPR:$Vn, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGEfq QPR:$Vd, QPR:$Vm, QPR:$Vd, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f32 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGEhd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGEhd DPR:$Vd, DPR:$Vm, DPR:$Vn, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGEhd DPR:$Vd, DPR:$Vm, DPR:$Vd, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f16 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGEhq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGEhq QPR:$Vd, QPR:$Vm, QPR:$Vn, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGEhq QPR:$Vd, QPR:$Vm, QPR:$Vd, pred:$p)
      AsmString = "vacle$\xFF\x04\x01.f16 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGTfd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGTfd DPR:$Vd, DPR:$Vm, DPR:$Vn, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGTfd DPR:$Vd, DPR:$Vm, DPR:$Vd, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f32 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGTfq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGTfq QPR:$Vd, QPR:$Vm, QPR:$Vn, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGTfq QPR:$Vd, QPR:$Vm, QPR:$Vd, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f32 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGThd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGThd DPR:$Vd, DPR:$Vm, DPR:$Vn, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGThd DPR:$Vd, DPR:$Vm, DPR:$Vd, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f16 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VACGThq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VACGThq QPR:$Vd, QPR:$Vm, QPR:$Vn, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (VACGThq QPR:$Vd, QPR:$Vm, QPR:$Vd, pred:$p)
      AsmString = "vaclt$\xFF\x04\x01.f16 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VADDD:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VADDD DPR:$Dd, DPR:$Dn, DPR:$Dm, pred:$p)
      AsmString = "faddd$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::VADDS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VADDS SPR:$Sd, SPR:$Sn, SPR:$Sm, pred:$p)
      AsmString = "fadds$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::VBICiv2i32:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VBICiv2i32 DPR:$Vd, nImmSplatNotI32:$imm, pred:$p)
      AsmString = "vand$\xFF\x03\x01.i32 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VBICiv4i16:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VBICiv4i16 DPR:$Vd, nImmSplatNotI16:$imm, pred:$p)
      AsmString = "vand$\xFF\x03\x01.i16 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VBICiv4i32:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VBICiv4i32 QPR:$Vd, nImmSplatNotI32:$imm, pred:$p)
      AsmString = "vand$\xFF\x03\x01.i32 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VBICiv8i16:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VBICiv8i16 QPR:$Vd, nImmSplatNotI16:$imm, pred:$p)
      AsmString = "vand$\xFF\x03\x01.i16 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VCGEfd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEfd DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEfq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEfq QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEhd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEhd DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEhq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEhq QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEsv16i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEsv16i8 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.s8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEsv2i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEsv2i32 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.s32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEsv4i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEsv4i16 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.s16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEsv4i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEsv4i32 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.s32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEsv8i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEsv8i16 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.s16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEsv8i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEsv8i8 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.s8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEuv16i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEuv16i8 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.u8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEuv2i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEuv2i32 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.u32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEuv4i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEuv4i16 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.u16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEuv4i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEuv4i32 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.u32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEuv8i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEuv8i16 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.u16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGEuv8i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGEuv8i8 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vcle$\xFF\x04\x01.u8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTfd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTfd DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTfq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTfq QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.f32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGThd:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGThd DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGThq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGThq QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.f16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTsv16i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTsv16i8 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.s8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTsv2i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTsv2i32 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.s32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTsv4i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTsv4i16 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.s16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTsv4i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTsv4i32 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.s32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTsv8i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTsv8i16 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.s16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTsv8i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTsv8i8 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.s8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTuv16i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTuv16i8 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.u8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTuv2i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTuv2i32 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.u32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTuv4i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTuv4i16 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.u16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTuv4i32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTuv4i32 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.u32 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTuv8i16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTuv8i16 QPR:$Qd, QPR:$Qm, QPR:$Qn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.u16 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCGTuv8i8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VCGTuv8i8 DPR:$Dd, DPR:$Dm, DPR:$Dn, pred:$p)
      AsmString = "vclt$\xFF\x04\x01.u8 $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case ARM::VCMPZD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VCMPZD DPR:$val, pred:$p)
      AsmString = "fcmpzd$\xFF\x02\x01 $\x01";
      break;
    }
    return false;
  case ARM::VCMPZS:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VCMPZS SPR:$val, pred:$p)
      AsmString = "fcmpzs$\xFF\x02\x01 $\x01";
      break;
    }
    return false;
  case ARM::VLDRD:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VLDRD DPR:$Dd, addrmode5:$addr, pred:$p)
      AsmString = "vldr$\xFF\x04\x01.64 $\x01, $\xFF\x02\x08";
      break;
    }
    return false;
  case ARM::VLDRS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VLDRS SPR:$Sd, addrmode5:$addr, pred:$p)
      AsmString = "vldr$\xFF\x04\x01.32 $\x01, $\xFF\x02\x08";
      break;
    }
    return false;
  case ARM::VMOVDRR:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VMOVDRR DPR:$Dn, GPR:$Rt, GPR:$Rt2, pred:$p)
      AsmString = "vmov$\xFF\x04\x01.f64 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::VMOVRRD:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VMOVRRD GPR:$Rt, GPR:$Rt2, DPR:$Dn, pred:$p)
      AsmString = "vmov$\xFF\x04\x01.f64 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::VMOVS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VMOVS SPR:$Sd, SPR:$Sm, pred:$p)
      AsmString = "vmov$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VMVNv2i32:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VMVNv2i32 DPR:$Vd, nImmVMOVI32Neg:$imm, pred:$p)
      AsmString = "vmov$\xFF\x03\x01.i32 $\x01, $\xFF\x02\x09";
      break;
    }
    return false;
  case ARM::VMVNv4i32:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VMVNv4i32 QPR:$Vd, nImmVMOVI32Neg:$imm, pred:$p)
      AsmString = "vmov$\xFF\x03\x01.i32 $\x01, $\xFF\x02\x09";
      break;
    }
    return false;
  case ARM::VRINTAD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTAD DPR:$Dd, DPR:$Dm)
      AsmString = "vrinta.f64.f64	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTANDf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTANDf DPR:$Dd, DPR:$Dm)
      AsmString = "vrinta.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTANDh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTANDh DPR:$Dd, DPR:$Dm)
      AsmString = "vrinta.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTANQf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTANQf QPR:$Qd, QPR:$Qm)
      AsmString = "vrinta.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTANQh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTANQh QPR:$Qd, QPR:$Qm)
      AsmString = "vrinta.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTAS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTAS SPR:$Sd, SPR:$Sm)
      AsmString = "vrinta.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTMD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMD DPR:$Dd, DPR:$Dm)
      AsmString = "vrintm.f64.f64	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTMNDf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMNDf DPR:$Dd, DPR:$Dm)
      AsmString = "vrintm.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTMNDh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMNDh DPR:$Dd, DPR:$Dm)
      AsmString = "vrintm.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTMNQf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMNQf QPR:$Qd, QPR:$Qm)
      AsmString = "vrintm.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTMNQh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMNQh QPR:$Qd, QPR:$Qm)
      AsmString = "vrintm.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTMS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTMS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintm.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTND DPR:$Dd, DPR:$Dm)
      AsmString = "vrintn.f64.f64	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTNNDf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNNDf DPR:$Dd, DPR:$Dm)
      AsmString = "vrintn.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTNNDh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNNDh DPR:$Dd, DPR:$Dm)
      AsmString = "vrintn.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTNNQf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNNQf QPR:$Qd, QPR:$Qm)
      AsmString = "vrintn.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTNNQh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNNQh QPR:$Qd, QPR:$Qm)
      AsmString = "vrintn.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTNS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTNS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintn.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTPD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPD DPR:$Dd, DPR:$Dm)
      AsmString = "vrintp.f64.f64	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTPNDf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPNDf DPR:$Dd, DPR:$Dm)
      AsmString = "vrintp.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTPNDh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPNDh DPR:$Dd, DPR:$Dm)
      AsmString = "vrintp.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTPNQf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPNQf QPR:$Qd, QPR:$Qm)
      AsmString = "vrintp.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTPNQh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPNQh QPR:$Qd, QPR:$Qm)
      AsmString = "vrintp.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTPS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTPS SPR:$Sd, SPR:$Sm)
      AsmString = "vrintp.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTRD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTRD DPR:$Dd, DPR:$Dm, pred:$p)
      AsmString = "vrintr$\xFF\x03\x01.f64.f64	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTRS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTRS SPR:$Sd, SPR:$Sm, pred:$p)
      AsmString = "vrintr$\xFF\x03\x01.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTXD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXD DPR:$Dd, DPR:$Dm, pred:$p)
      AsmString = "vrintx$\xFF\x03\x01.f64.f64	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTXNDf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXNDf DPR:$Dd, DPR:$Dm)
      AsmString = "vrintx.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTXNDh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXNDh DPR:$Dd, DPR:$Dm)
      AsmString = "vrintx.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTXNQf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXNQf QPR:$Qd, QPR:$Qm)
      AsmString = "vrintx.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTXNQh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXNQh QPR:$Qd, QPR:$Qm)
      AsmString = "vrintx.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTXS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTXS SPR:$Sd, SPR:$Sm, pred:$p)
      AsmString = "vrintx$\xFF\x03\x01.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTZD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZD DPR:$Dd, DPR:$Dm, pred:$p)
      AsmString = "vrintz$\xFF\x03\x01.f64.f64	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTZNDf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZNDf DPR:$Dd, DPR:$Dm)
      AsmString = "vrintz.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTZNDh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZNDh DPR:$Dd, DPR:$Dm)
      AsmString = "vrintz.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTZNQf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZNQf QPR:$Qd, QPR:$Qm)
      AsmString = "vrintz.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTZNQh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::QPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZNQh QPR:$Qd, QPR:$Qm)
      AsmString = "vrintz.f16.f16	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VRINTZS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VRINTZS SPR:$Sd, SPR:$Sm, pred:$p)
      AsmString = "vrintz$\xFF\x03\x01.f32.f32	$\x01, $\x02";
      break;
    }
    return false;
  case ARM::VSETLNi32:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (VSETLNi32 DPR:$Dd, GPR:$Rn, 1, pred:$p)
      AsmString = "fmdhr$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (VSETLNi32 DPR:$Dd, GPR:$Rn, 0, pred:$p)
      AsmString = "fmdlr$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VSQRTD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VSQRTD DPR:$Dd, DPR:$Dm, pred:$p)
      AsmString = "vsqrt$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VSQRTS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (VSQRTS SPR:$Sd, SPR:$Sm, pred:$p)
      AsmString = "vsqrt$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::VSTRD:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VSTRD DPR:$Dd, addrmode5:$addr, pred:$p)
      AsmString = "vstr$\xFF\x04\x01.64 $\x01, $\xFF\x02\x08";
      break;
    }
    return false;
  case ARM::VSTRS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (VSTRS SPR:$Sd, addrmode5:$addr, pred:$p)
      AsmString = "vstr$\xFF\x04\x01.32 $\x01, $\xFF\x02\x08";
      break;
    }
    return false;
  case ARM::VSUBD:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::DPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VSUBD DPR:$Dd, DPR:$Dn, DPR:$Dm, pred:$p)
      AsmString = "fsubd$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::VSUBS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::SPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (VSUBS SPR:$Sd, SPR:$Sn, SPR:$Sm, pred:$p)
      AsmString = "fsubs$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2ADCrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2ADCrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "adc$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2ADCrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ADCrs rGPR:$Rd, rGPR:$Rn, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "adc$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2ADDri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ADDri GPRnopc:$Rd, GPRnopc:$Rn, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2ADDri GPRnopc:$Rdn, GPRnopc:$Rdn, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::t2ADDri12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ADDri12 GPRnopc:$Rd, GPR:$Rn, imm0_4095:$imm, pred:$p)
      AsmString = "add$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2ADDri12 GPRnopc:$Rdn, GPRnopc:$Rdn, imm0_4095:$imm, pred:$p)
      AsmString = "add$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::t2ADDrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2ADDrr GPRnopc:$Rd, GPRnopc:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2ADDrr GPRnopc:$Rdn, GPRnopc:$Rdn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::t2ADDrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ADDrs GPRnopc:$Rd, GPRnopc:$Rn, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2ADDrs GPRnopc:$Rdn, GPRnopc:$Rdn, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "add$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2ADR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2ADR rGPR:$Rd, t2adrlabel:$addr, pred:$p)
      AsmString = "adr$\xFF\x03\x01 $\x01, $\xFF\x02\x0B";
      break;
    }
    return false;
  case ARM::t2ANDrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2ANDrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "and$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2ANDrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ANDrs rGPR:$Rd, rGPR:$Rn, t2_so_reg:$shift, pred:$p, cc_out:$s)
      AsmString = "and$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2ASRri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ASRri rGPR:$Rd, rGPR:$Rn, imm_sr:$imm, pred:$p, cc_out:$s)
      AsmString = "asr$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\xFF\x03\x0C";
      break;
    }
    return false;
  case ARM::t2ASRrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2ASRrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "asr$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2BICrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2BICrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "bic$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2BICrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2BICrs rGPR:$Rd, rGPR:$Rn, t2_so_reg:$shift, pred:$p, cc_out:$s)
      AsmString = "bic$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2CMNri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2CMNri GPRnopc:$Rn, t2_so_imm:$imm, pred:$p)
      AsmString = "cmn$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2CMNri rGPR:$Rd, t2_so_imm_neg:$imm, pred:$p)
      AsmString = "cmp$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2CMNzrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2CMNzrr GPRnopc:$Rn, rGPR:$Rm, pred:$p)
      AsmString = "cmn$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2CMNzrs:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2CMNzrs GPRnopc:$Rn, t2_so_reg:$shift, pred:$p)
      AsmString = "cmn$\xFF\x04\x01 $\x01, $\xFF\x02\x0A";
      break;
    }
    return false;
  case ARM::t2CMPri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2CMPri rGPR:$Rd, t2_so_imm_neg:$imm, pred:$p)
      AsmString = "cmn$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2CMPri GPRnopc:$Rn, t2_so_imm:$imm, pred:$p)
      AsmString = "cmp$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2CMPrs:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2CMPrs GPRnopc:$Rn, t2_so_reg:$shift, pred:$p)
      AsmString = "cmp$\xFF\x04\x01 $\x01, $\xFF\x02\x0A";
      break;
    }
    return false;
  case ARM::t2DMB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (t2DMB 15, pred:$p)
      AsmString = "dmb$\xFF\x02\x01";
      break;
    }
    return false;
  case ARM::t2DSB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (t2DSB 15, pred:$p)
      AsmString = "dsb$\xFF\x02\x01";
      break;
    }
    return false;
  case ARM::t2EORri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2EORri rGPR:$Rd, rGPR:$Rn, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "eor$\xFF\x06\x02$\xFF\x04\x01.w $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2EORrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2EORrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "eor$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2EORrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2EORrs rGPR:$Rd, rGPR:$Rn, t2_so_reg:$shift, pred:$p, cc_out:$s)
      AsmString = "eor$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2HINT:
    if (MI->getNumOperands() == 3) {
      // (t2HINT imm0_239:$imm, pred:$p)
      AsmString = "hint$\xFF\x02\x01 $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (t2HINT 0, pred:$p)
      AsmString = "nop$\xFF\x02\x01.w";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (t2HINT 1, pred:$p)
      AsmString = "yield$\xFF\x02\x01.w";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (t2HINT 2, pred:$p)
      AsmString = "wfe$\xFF\x02\x01.w";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (t2HINT 3, pred:$p)
      AsmString = "wfi$\xFF\x02\x01.w";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (t2HINT 4, pred:$p)
      AsmString = "sev$\xFF\x02\x01.w";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (t2HINT 5, pred:$p)
      AsmString = "sevl$\xFF\x02\x01.w";
      break;
    }
    return false;
  case ARM::t2HVC:
    if (MI->getNumOperands() == 1) {
      // (t2HVC imm0_65535:$imm16)
      AsmString = "hvc	$\x01";
      break;
    }
    return false;
  case ARM::t2ISB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (t2ISB 15, pred:$p)
      AsmString = "isb$\xFF\x02\x01";
      break;
    }
    return false;
  case ARM::t2LDMDB:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDMDB GPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "ldmdb$\xFF\x02\x01.w $\x01, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::t2LDMDB_UPD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDMDB_UPD GPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "ldmdb$\xFF\x02\x01.w $\x01!, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::t2LDMIA:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDMIA GPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "ldm$\xFF\x02\x01 $\x01, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::t2LDMIA_UPD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDMIA_UPD GPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "ldm$\xFF\x02\x01 $\x01!, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::t2LDRBi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRBi12 rGPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "ldrb$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2LDRBpci:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRBpci rGPR:$Rt, t2ldrlabel:$addr, pred:$p)
      AsmString = "ldrb$\xFF\x03\x01 $\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case ARM::t2LDRBpcrel:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRBpcrel GPRnopc:$Rt, t2ldr_pcrel_imm12:$addr, pred:$p)
      AsmString = "ldrb$\xFF\x03\x01.w $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2LDRBs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRBs rGPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "ldrb$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2LDRHi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRHi12 rGPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "ldrh$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2LDRHpci:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRHpci rGPR:$Rt, t2ldrlabel:$addr, pred:$p)
      AsmString = "ldrh$\xFF\x03\x01 $\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case ARM::t2LDRHpcrel:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRHpcrel GPRnopc:$Rt, t2ldr_pcrel_imm12:$addr, pred:$p)
      AsmString = "ldrh$\xFF\x03\x01.w $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2LDRHs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRHs rGPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "ldrh$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2LDRSBi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSBi12 rGPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "ldrsb$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2LDRSBpci:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSBpci rGPR:$Rt, t2ldrlabel:$addr, pred:$p)
      AsmString = "ldrsb$\xFF\x03\x01 $\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case ARM::t2LDRSBpcrel:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSBpcrel GPRnopc:$Rt, t2ldr_pcrel_imm12:$addr, pred:$p)
      AsmString = "ldrsb$\xFF\x03\x01.w $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2LDRSBs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSBs rGPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "ldrsb$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2LDRSHi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSHi12 rGPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "ldrsh$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2LDRSHpci:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSHpci rGPR:$Rt, t2ldrlabel:$addr, pred:$p)
      AsmString = "ldrsh$\xFF\x03\x01 $\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case ARM::t2LDRSHpcrel:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSHpcrel GPRnopc:$Rt, t2ldr_pcrel_imm12:$addr, pred:$p)
      AsmString = "ldrsh$\xFF\x03\x01.w $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2LDRSHs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRSHs rGPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "ldrsh$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2LDRi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRi12 GPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "ldr$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2LDRpci:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRpci GPRnopc:$Rt, t2ldrlabel:$addr, pred:$p)
      AsmString = "ldr$\xFF\x03\x01 $\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case ARM::t2LDRs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2LDRs GPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "ldr$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2LSLri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2LSLri rGPR:$Rd, rGPR:$Rn, imm0_31:$imm, pred:$p, cc_out:$s)
      AsmString = "lsl$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2LSLrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2LSLrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "lsl$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2LSRri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2LSRri rGPR:$Rd, rGPR:$Rn, imm_sr:$imm, pred:$p, cc_out:$s)
      AsmString = "lsr$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\xFF\x03\x0C";
      break;
    }
    return false;
  case ARM::t2LSRrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2LSRrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "lsr$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2MCR:
    if (MI->getNumOperands() == 8 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (t2MCR p_imm:$cop, imm0_7:$opc1, GPR:$Rt, c_imm:$CRn, c_imm:$CRm, 0, pred:$p)
      AsmString = "mcr$\xFF\x07\x01 $\xFF\x01\x05, $\x02, $\x03, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::t2MCR2:
    if (MI->getNumOperands() == 8 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (t2MCR2 p_imm:$cop, imm0_7:$opc1, GPR:$Rt, c_imm:$CRn, c_imm:$CRm, 0, pred:$p)
      AsmString = "mcr2$\xFF\x07\x01 $\xFF\x01\x05, $\x02, $\x03, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::t2MOVi16:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2MOVi16 rGPR:$Rd, imm256_65535_expr:$imm, pred:$p)
      AsmString = "mov$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2MRC:
    if (MI->getNumOperands() == 8 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRwithAPSRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (t2MRC GPRwithAPSR:$Rt, p_imm:$cop, imm0_7:$opc1, c_imm:$CRn, c_imm:$CRm, 0, pred:$p)
      AsmString = "mrc$\xFF\x07\x01 $\xFF\x02\x05, $\x03, $\x01, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::t2MRC2:
    if (MI->getNumOperands() == 8 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRwithAPSRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (t2MRC2 GPRwithAPSR:$Rt, p_imm:$cop, imm0_7:$opc1, c_imm:$CRn, c_imm:$CRm, 0, pred:$p)
      AsmString = "mrc2$\xFF\x07\x01 $\xFF\x02\x05, $\x03, $\x01, $\xFF\x04\x06, $\xFF\x05\x06";
      break;
    }
    return false;
  case ARM::t2MRS_AR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2MRS_AR GPR:$Rd, pred:$p)
      AsmString = "mrs$\xFF\x02\x01 $\x01, cpsr";
      break;
    }
    return false;
  case ARM::t2MUL:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (t2MUL rGPR:$Rn, rGPR:$Rm, rGPR:$Rn, pred:$p)
      AsmString = "mul$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2MVNi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2MVNi rGPR:$Rd, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "mvn$\xFF\x05\x02$\xFF\x03\x01.w $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2MVNr:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2MVNr rGPR:$Rd, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "mvn$\xFF\x05\x02$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2MVNs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2MVNs rGPR:$Rd, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "mvn$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\xFF\x02\x0A";
      break;
    }
    return false;
  case ARM::t2ORNri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2ORNri rGPR:$Rdn, rGPR:$Rdn, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "orn$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::t2ORNrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2ORNrr rGPR:$Rdn, rGPR:$Rdn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "orn$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::t2ORNrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2ORNrs rGPR:$Rdn, rGPR:$Rdn, t2_so_reg:$shift, pred:$p, cc_out:$s)
      AsmString = "orn$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2ORRri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ORRri rGPR:$Rd, rGPR:$Rn, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "orr$\xFF\x06\x02$\xFF\x04\x01.w $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2ORRrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2ORRrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "orr$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2ORRrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2ORRrs rGPR:$Rd, rGPR:$Rn, t2_so_reg:$shift, pred:$p, cc_out:$s)
      AsmString = "orr$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2PLDpci:
    if (MI->getNumOperands() == 3) {
      // (t2PLDpci t2ldr_pcrel_imm12:$addr, pred:$p)
      AsmString = "pld$\xFF\x02\x01 $\x01";
      break;
    }
    return false;
  case ARM::t2PLIpci:
    if (MI->getNumOperands() == 3) {
      // (t2PLIpci t2ldr_pcrel_imm12:$addr, pred:$p)
      AsmString = "pli$\xFF\x02\x01 $\x01";
      break;
    }
    return false;
  case ARM::t2REV:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2REV rGPR:$Rd, rGPR:$Rm, pred:$p)
      AsmString = "rev$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2REV16:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2REV16 rGPR:$Rd, rGPR:$Rm, pred:$p)
      AsmString = "rev16$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2REVSH:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2REVSH rGPR:$Rd, rGPR:$Rm, pred:$p)
      AsmString = "revsh$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2RORri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2RORri rGPR:$Rd, rGPR:$Rn, imm0_31:$imm, pred:$p, cc_out:$s)
      AsmString = "ror$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2RORrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2RORrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "ror$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2RSBri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2RSBri rGPR:$Rd, rGPR:$Rn, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "rsb$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2RSBri rGPR:$Rdn, rGPR:$Rdn, t2_so_imm:$imm, pred:$p, cc_out:$s)
      AsmString = "rsb$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (t2RSBri rGPR:$Rd, rGPR:$Rm, 0, pred:$p, cc_out:$s)
      AsmString = "neg$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2RSBrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2RSBrr rGPR:$Rdn, rGPR:$Rdn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "rsb$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::t2RSBrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2RSBrs rGPR:$Rdn, rGPR:$Rdn, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "rsb$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2SBCrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2SBCrr rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "sbc$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2SBCrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2SBCrs rGPR:$Rd, rGPR:$Rn, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "sbc$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2SRSDB:
    if (MI->getNumOperands() == 3) {
      // (t2SRSDB imm0_31:$mode, pred:$p)
      AsmString = "srsdb$\xFF\x02\x01 $\x01";
      break;
    }
    return false;
  case ARM::t2SRSDB_UPD:
    if (MI->getNumOperands() == 3) {
      // (t2SRSDB_UPD imm0_31:$mode, pred:$p)
      AsmString = "srsdb$\xFF\x02\x01 $\x01!";
      break;
    }
    return false;
  case ARM::t2SRSIA:
    if (MI->getNumOperands() == 3) {
      // (t2SRSIA imm0_31:$mode, pred:$p)
      AsmString = "srsia$\xFF\x02\x01 $\x01";
      break;
    }
    return false;
  case ARM::t2SRSIA_UPD:
    if (MI->getNumOperands() == 3) {
      // (t2SRSIA_UPD imm0_31:$mode, pred:$p)
      AsmString = "srsia$\xFF\x02\x01 $\x01!";
      break;
    }
    return false;
  case ARM::t2SSAT:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2SSAT rGPR:$Rd, imm1_32:$sat_imm, rGPR:$Rn, 0, pred:$p)
      AsmString = "ssat$\xFF\x05\x01 $\x01, $\xFF\x02\x07, $\x03";
      break;
    }
    return false;
  case ARM::t2STMDB:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STMDB GPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "stmdb$\xFF\x02\x01.w $\x01, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::t2STMDB_UPD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STMDB_UPD GPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "stmdb$\xFF\x02\x01.w $\x01!, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::t2STMIA_UPD:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STMIA_UPD GPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "stm$\xFF\x02\x01 $\x01!, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::t2STRBi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STRBi12 rGPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "strb$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2STRBs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STRBs rGPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "strb$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2STRHi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STRHi12 rGPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "strh$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2STRHs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STRHs rGPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "strh$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2STRi12:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STRi12 GPR:$Rt, t2addrmode_imm12:$addr, pred:$p)
      AsmString = "str$\xFF\x04\x01 $\x01, $\xFF\x02\x0D";
      break;
    }
    return false;
  case ARM::t2STRs:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2STRs GPR:$Rt, t2addrmode_so_reg:$addr, pred:$p)
      AsmString = "str$\xFF\x05\x01 $\x01, $\xFF\x02\x0F";
      break;
    }
    return false;
  case ARM::t2SUBS_PC_LR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (t2SUBS_PC_LR 0, pred:$p)
      AsmString = "eret$\xFF\x02\x01";
      break;
    }
    return false;
  case ARM::t2SUBrr:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (t2SUBrr GPRnopc:$Rd, GPRnopc:$Rn, rGPR:$Rm, pred:$p, cc_out:$s)
      AsmString = "sub$\xFF\x06\x02$\xFF\x04\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2SUBrs:
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2SUBrs GPRnopc:$Rd, GPRnopc:$Rn, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "sub$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\x02, $\xFF\x03\x0A";
      break;
    }
    if (MI->getNumOperands() == 7 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (t2SUBrs GPRnopc:$Rdn, GPRnopc:$Rdn, t2_so_reg:$ShiftedRm, pred:$p, cc_out:$s)
      AsmString = "sub$\xFF\x07\x02$\xFF\x05\x01 $\x01, $\xFF\x03\x0A";
      break;
    }
    return false;
  case ARM::t2SXTAB:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2SXTAB rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, 0, pred:$p)
      AsmString = "sxtab$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2SXTAB16:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2SXTAB16 rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, 0, pred:$p)
      AsmString = "sxtab16$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2SXTAH:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2SXTAH rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, 0, pred:$p)
      AsmString = "sxtah$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2SXTB:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2SXTB rGPR:$Rd, rGPR:$Rm, rot_imm:$rot, pred:$p)
      AsmString = "sxtb$\xFF\x04\x01 $\x01, $\x02$\xFF\x03\x10";
      break;
    }
    return false;
  case ARM::t2SXTB16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (t2SXTB16 rGPR:$Rd, rGPR:$Rm, 0, pred:$p)
      AsmString = "sxtb16$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2SXTB16 rGPR:$Rd, rGPR:$Rm, rot_imm:$rot, pred:$p)
      AsmString = "sxtb16$\xFF\x04\x01 $\x01, $\x02$\xFF\x03\x10";
      break;
    }
    return false;
  case ARM::t2SXTH:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2SXTH rGPR:$Rd, rGPR:$Rm, rot_imm:$rot, pred:$p)
      AsmString = "sxth$\xFF\x04\x01 $\x01, $\x02$\xFF\x03\x10";
      break;
    }
    return false;
  case ARM::t2TEQri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2TEQri GPRnopc:$Rn, t2_so_imm:$imm, pred:$p)
      AsmString = "teq$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2TEQrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2TEQrr GPRnopc:$Rn, rGPR:$Rm, pred:$p)
      AsmString = "teq$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2TEQrs:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2TEQrs GPRnopc:$Rn, t2_so_reg:$shift, pred:$p)
      AsmString = "teq$\xFF\x04\x01 $\x01, $\xFF\x02\x0A";
      break;
    }
    return false;
  case ARM::t2TSTri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2TSTri GPRnopc:$Rn, t2_so_imm:$imm, pred:$p)
      AsmString = "tst$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2TSTrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2TSTrr GPRnopc:$Rn, rGPR:$Rm, pred:$p)
      AsmString = "tst$\xFF\x03\x01 $\x01, $\x02";
      break;
    }
    return false;
  case ARM::t2TSTrs:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::GPRnopcRegClassID).contains(MI->getOperand(0).getReg())) {
      // (t2TSTrs GPRnopc:$Rn, t2_so_reg:$shift, pred:$p)
      AsmString = "tst$\xFF\x04\x01 $\x01, $\xFF\x02\x0A";
      break;
    }
    return false;
  case ARM::t2USAT:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2USAT rGPR:$Rd, imm0_31:$sat_imm, rGPR:$Rn, 0, pred:$p)
      AsmString = "usat$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2UXTAB:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2UXTAB rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, 0, pred:$p)
      AsmString = "uxtab$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2UXTAB16:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2UXTAB16 rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, 0, pred:$p)
      AsmString = "uxtab16$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2UXTAH:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (t2UXTAH rGPR:$Rd, rGPR:$Rn, rGPR:$Rm, 0, pred:$p)
      AsmString = "uxtah$\xFF\x05\x01 $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case ARM::t2UXTB:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2UXTB rGPR:$Rd, rGPR:$Rm, rot_imm:$rot, pred:$p)
      AsmString = "uxtb$\xFF\x04\x01 $\x01, $\x02$\xFF\x03\x10";
      break;
    }
    return false;
  case ARM::t2UXTB16:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (t2UXTB16 rGPR:$Rd, rGPR:$Rm, 0, pred:$p)
      AsmString = "uxtb16$\xFF\x04\x01 $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2UXTB16 rGPR:$Rd, rGPR:$Rm, rot_imm:$rot, pred:$p)
      AsmString = "uxtb16$\xFF\x04\x01 $\x01, $\x02$\xFF\x03\x10";
      break;
    }
    return false;
  case ARM::t2UXTH:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(ARM::rGPRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (t2UXTH rGPR:$Rd, rGPR:$Rm, rot_imm:$rot, pred:$p)
      AsmString = "uxth$\xFF\x04\x01 $\x01, $\x02$\xFF\x03\x10";
      break;
    }
    return false;
  case ARM::tASRri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (tASRri tGPR:$Rdm, cc_out:$s, tGPR:$Rdm, imm_sr:$imm, pred:$p)
      AsmString = "asr$\xFF\x02\x02$\xFF\x05\x01 $\x01, $\xFF\x04\x0C";
      break;
    }
    return false;
  case ARM::tBKPT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (tBKPT 0)
      AsmString = "bkpt";
      break;
    }
    return false;
  case ARM::tHINT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (tHINT 0, pred:$p)
      AsmString = "nop$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (tHINT 1, pred:$p)
      AsmString = "yield$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (tHINT 2, pred:$p)
      AsmString = "wfe$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (tHINT 3, pred:$p)
      AsmString = "wfi$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (tHINT 4, pred:$p)
      AsmString = "sev$\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (tHINT 5, pred:$p)
      AsmString = "sevl$\xFF\x02\x01";
      break;
    }
    return false;
  case ARM::tLDMIA:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(0).getReg())) {
      // (tLDMIA tGPR:$Rn, pred:$p, reglist:$regs)
      AsmString = "ldm$\xFF\x02\x01 $\x01!, $\xFF\x04\x04";
      break;
    }
    return false;
  case ARM::tLSLri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (tLSLri tGPR:$Rdm, cc_out:$s, tGPR:$Rdm, imm0_31:$imm, pred:$p)
      AsmString = "lsl$\xFF\x02\x02$\xFF\x05\x01 $\x01, $\x04";
      break;
    }
    return false;
  case ARM::tLSRri:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (tLSRri tGPR:$Rdm, cc_out:$s, tGPR:$Rdm, imm_sr:$imm, pred:$p)
      AsmString = "lsr$\xFF\x02\x02$\xFF\x05\x01 $\x01, $\xFF\x04\x0C";
      break;
    }
    return false;
  case ARM::tMOVi8:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == ARM::CPSR &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (tMOVi8 tGPR:$Rdn, CPSR, imm0_255:$imm, 14, 0)
      AsmString = "movs $\x01, $\x03";
      break;
    }
    return false;
  case ARM::tMOVr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == ARM::R8 &&
        MI->getOperand(1).getReg() == ARM::R8 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (tMOVr R8, R8, 14, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case ARM::tMUL:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (tMUL tGPR:$Rdm, s_cc_out:$s, tGPR:$Rn, pred:$p)
      AsmString = "mul$\xFF\x02\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::tRSB:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(ARM::tGPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (tRSB tGPR:$Rd, s_cc_out:$s, tGPR:$Rm, pred:$p)
      AsmString = "neg$\xFF\x02\x02$\xFF\x04\x01 $\x01, $\x03";
      break;
    }
    return false;
  case ARM::tSUBspi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == ARM::SP) {
      // (tSUBspi SP, t_imm0_508s4_neg:$imm, pred:$p)
      AsmString = "add$\xFF\x03\x01 sp, $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void ARMInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printPredicateOperand(MI, OpIdx, STI, OS);
    break;
  case 1:
    printSBitModifierOperand(MI, OpIdx, STI, OS);
    break;
  case 2:
    printFPImmOperand(MI, OpIdx, STI, OS);
    break;
  case 3:
    printRegisterList(MI, OpIdx, STI, OS);
    break;
  case 4:
    printPImmediate(MI, OpIdx, STI, OS);
    break;
  case 5:
    printCImmediate(MI, OpIdx, STI, OS);
    break;
  case 6:
    printImmPlusOneOperand(MI, OpIdx, STI, OS);
    break;
  case 7:
    printAddrMode5Operand<false>(MI, OpIdx, STI, OS);
    break;
  case 8:
    printNEONModImmOperand(MI, OpIdx, STI, OS);
    break;
  case 9:
    printT2SOOperand(MI, OpIdx, STI, OS);
    break;
  case 10:
    printAdrLabelOperand<0>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printThumbSRImm(MI, OpIdx, STI, OS);
    break;
  case 12:
    printAddrModeImm12Operand<false>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printThumbLdrLabelOperand(MI, OpIdx, STI, OS);
    break;
  case 14:
    printT2AddrModeSoRegOperand(MI, OpIdx, STI, OS);
    break;
  case 15:
    printRotImmOperand(MI, OpIdx, STI, OS);
    break;
  case 16:
    printCPSIMod(MI, OpIdx, STI, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
