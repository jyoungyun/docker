/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', '"', 32, 0,
  /* 26 */ 'i', 'f', 32, '(', '!', 'p', '0', ')', 32, 0,
  /* 36 */ 'i', 'f', 32, '(', 'p', '0', ')', 32, 0,
  /* 45 */ 'i', 'f', 32, '(', '!', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 0,
  /* 59 */ 'i', 'f', 32, '(', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 0,
  /* 72 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 78 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 84 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 91 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 98 */ 'i', 'f', 32, '(', '!', 0,
  /* 104 */ 'i', 'f', '(', '!', 0,
  /* 109 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 0,
  /* 118 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 't', 'r', 'y', 32, 't', 'o', 32, 'e', 'm', 'i', 't', 32, 'I', 'n', 's', 'e', 'r', 't', '4', '"', 0,
  /* 160 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 't', 'r', 'y', 32, 't', 'o', 32, 'e', 'm', 'i', 't', 32, 'V', 'M', 'U', 'L', 'W', '_', 'A', 'C', 'C', '"', 0,
  /* 204 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 't', 'r', 'y', 32, 't', 'o', 32, 'e', 'm', 'i', 't', 32, 'V', 'M', 'U', 'L', 'W', '"', 0,
  /* 244 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', '"', 0,
  /* 269 */ 'm', 'e', 'm', 'd', '(', 'r', '2', '9', 32, '+', 32, '#', 0,
  /* 282 */ 'm', 'e', 'm', 'w', '(', 'r', '2', '9', 32, '+', 32, '#', 0,
  /* 295 */ 'j', 'u', 'm', 'p', 32, '#', 0,
  /* 302 */ 'j', 'u', 'm', 'p', 32, '#', '#', 0,
  /* 310 */ 'm', 'e', 'm', 'b', '(', '#', '#', 0,
  /* 318 */ 'm', 'e', 'm', 'h', '(', '#', '#', 0,
  /* 326 */ 'm', 'e', 'm', 'w', '(', '#', '#', 0,
  /* 334 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 341 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 348 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 361 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 368 */ 'i', 'm', 'm', 'e', 'x', 't', '(', '#', 0,
  /* 377 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 384 */ 'i', 'f', 32, '(', 0,
  /* 389 */ 'p', '3', 32, '=', 32, 's', 'p', '1', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 404 */ 'p', '3', 32, '=', 32, 's', 'p', '2', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 419 */ 'p', '3', 32, '=', 32, 's', 'p', '3', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 434 */ 'l', 'o', 'o', 'p', '1', '(', 0,
  /* 441 */ 'l', '2', 'u', 'n', 'l', 'o', 'c', 'k', 'a', '(', 0,
  /* 452 */ 'd', 'c', 'c', 'l', 'e', 'a', 'n', 'a', '(', 0,
  /* 462 */ 'd', 'c', 'z', 'e', 'r', 'o', 'a', '(', 0,
  /* 471 */ 'd', 'c', 'i', 'n', 'v', 'a', '(', 0,
  /* 479 */ 'i', 'c', 'i', 'n', 'v', 'a', '(', 0,
  /* 487 */ 'd', 'c', 'c', 'l', 'e', 'a', 'n', 'i', 'n', 'v', 'a', '(', 0,
  /* 500 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'b', '(', 0,
  /* 514 */ 'm', 'e', 'm', 'd', '_', 'l', 'o', 'c', 'k', 'e', 'd', '(', 0,
  /* 527 */ 'm', 'e', 'm', 'w', '_', 'l', 'o', 'c', 'k', 'e', 'd', '(', 0,
  /* 540 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'd', '(', 0,
  /* 554 */ 't', 'r', 'a', 'c', 'e', '(', 0,
  /* 561 */ 'v', 's', 'h', 'u', 'f', 'f', '(', 0,
  /* 569 */ 'i', 'f', '(', 0,
  /* 573 */ 'l', '2', 'f', 'e', 't', 'c', 'h', '(', 0,
  /* 582 */ 'd', 'c', 'f', 'e', 't', 'c', 'h', '(', 0,
  /* 591 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'h', '(', 0,
  /* 605 */ 'v', 'd', 'e', 'a', 'l', '(', 0,
  /* 612 */ 'v', 'v', 'm', 'e', 'm', '(', 0,
  /* 619 */ 'l', '2', 'g', 'c', 'l', 'e', 'a', 'n', '(', 0,
  /* 629 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 642 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 655 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 668 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 680 */ 'h', 'i', 'n', 't', 'j', 'r', '(', 0,
  /* 688 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 701 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 714 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 727 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 739 */ 'p', '0', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 752 */ 'p', '1', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 765 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 778 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 790 */ 'v', 'h', 'i', 's', 't', '(', 0,
  /* 797 */ 'v', 'm', 'e', 'm', 'u', '(', 0,
  /* 804 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 818 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 832 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 846 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 859 */ 'l', '2', 'g', 'c', 'l', 'e', 'a', 'n', 'i', 'n', 'v', '(', 0,
  /* 872 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'w', '(', 0,
  /* 886 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 896 */ 'i', 'f', 32, '(', '!', 'p', '0', ')', 32, 'j', 'u', 'm', 'p', 'r', 32, 'r', '3', '1', 0,
  /* 915 */ 'i', 'f', 32, '(', 'p', '0', ')', 32, 'j', 'u', 'm', 'p', 'r', 32, 'r', '3', '1', 0,
  /* 933 */ 'i', 'f', 32, '(', '!', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'j', 'u', 'm', 'p', 'r', ':', 'n', 't', 32, 'r', '3', '1', 0,
  /* 959 */ 'i', 'f', 32, '(', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'j', 'u', 'm', 'p', 'r', ':', 'n', 't', 32, 'r', '3', '1', 0,
  /* 984 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '1', 0,
  /* 994 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1007 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1014 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1024 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1039 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 1045 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 1058 */ 'l', '2', 'g', 'u', 'n', 'l', 'o', 'c', 'k', 0,
  /* 1068 */ 'l', '2', 'g', 'c', 'l', 'e', 'a', 'n', 0,
  /* 1077 */ 'i', 'f', 32, '(', '!', 'p', '0', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 1101 */ 'i', 'f', 32, '(', 'p', '0', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 1124 */ 'n', 'o', 'p', 0,
  /* 1128 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 1136 */ 's', 'y', 'n', 'c', 'h', 't', 0,
  /* 1143 */ 'i', 'f', 32, '(', '!', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', ':', 'n', 't', 0,
  /* 1174 */ 'i', 'f', 32, '(', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', ':', 'n', 't', 0,
  /* 1204 */ 'v', 'h', 'i', 's', 't', 0,
  /* 1210 */ 'l', '2', 'g', 'c', 'l', 'e', 'a', 'n', 'i', 'n', 'v', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1015U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1008U,	// BUNDLE
    1025U,	// LIFETIME_START
    995U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    2074U,	// A2_abs
    2074U,	// A2_absp
    16779290U,	// A2_abssat
    33572890U,	// A2_add
    33572890U,	// A2_addh_h16_hh
    33572890U,	// A2_addh_h16_hl
    33572890U,	// A2_addh_h16_lh
    33572890U,	// A2_addh_h16_ll
    33572890U,	// A2_addh_h16_sat_hh
    33572890U,	// A2_addh_h16_sat_hl
    33572890U,	// A2_addh_h16_sat_lh
    33572890U,	// A2_addh_h16_sat_ll
    33572890U,	// A2_addh_l16_hl
    33572890U,	// A2_addh_l16_ll
    33572890U,	// A2_addh_l16_sat_hl
    33572890U,	// A2_addh_l16_sat_ll
    33572890U,	// A2_addi
    33572890U,	// A2_addp
    33572890U,	// A2_addpsat
    33572890U,	// A2_addsat
    33572890U,	// A2_addsp
    33572890U,	// A2_addsph
    33572890U,	// A2_addspl
    50366490U,	// A2_and
    67143706U,	// A2_andir
    50366490U,	// A2_andp
    51226U,	// A2_aslh
    67610U,	// A2_asrh
    83970074U,	// A2_combine_hh
    83970074U,	// A2_combine_hl
    100747290U,	// A2_combine_lh
    100747290U,	// A2_combine_ll
    117540890U,	// A2_combineii
    50415642U,	// A2_combinew
    116762U,	// A2_max
    116762U,	// A2_maxp
    133146U,	// A2_maxu
    133146U,	// A2_maxup
    149530U,	// A2_min
    149530U,	// A2_minp
    165914U,	// A2_minu
    165914U,	// A2_minup
    182298U,	// A2_negp
    16959514U,	// A2_negsat
    1125U,	// A2_nop
    198682U,	// A2_not
    198682U,	// A2_notp
    50546714U,	// A2_or
    67323930U,	// A2_orir
    50546714U,	// A2_orp
    134451299U,	// A2_paddf
    134467683U,	// A2_paddfnew
    134451299U,	// A2_paddif
    134467683U,	// A2_paddifnew
    134451585U,	// A2_paddit
    134467969U,	// A2_padditnew
    134451585U,	// A2_paddt
    134467969U,	// A2_paddtnew
    151228515U,	// A2_pandf
    151244899U,	// A2_pandfnew
    151228801U,	// A2_pandt
    151245185U,	// A2_pandtnew
    168005731U,	// A2_porf
    168022115U,	// A2_porfnew
    168006017U,	// A2_port
    168022401U,	// A2_portnew
    184782947U,	// A2_psubf
    184799331U,	// A2_psubfnew
    184783233U,	// A2_psubt
    184799617U,	// A2_psubtnew
    201560163U,	// A2_pxorf
    201576547U,	// A2_pxorfnew
    201560449U,	// A2_pxort
    201576833U,	// A2_pxortnew
    17041434U,	// A2_roundsat
    280602U,	// A2_sat
    296986U,	// A2_satb
    313370U,	// A2_sath
    329754U,	// A2_satub
    346138U,	// A2_satuh
    33916954U,	// A2_sub
    33916954U,	// A2_subh_h16_hh
    33916954U,	// A2_subh_h16_hl
    33916954U,	// A2_subh_h16_lh
    33916954U,	// A2_subh_h16_ll
    33916954U,	// A2_subh_h16_sat_hh
    33916954U,	// A2_subh_h16_sat_hl
    33916954U,	// A2_subh_h16_sat_lh
    33916954U,	// A2_subh_h16_sat_ll
    33916954U,	// A2_subh_l16_hl
    33916954U,	// A2_subh_l16_ll
    33916954U,	// A2_subh_l16_sat_hl
    33916954U,	// A2_subh_l16_sat_ll
    33916954U,	// A2_subp
    50710554U,	// A2_subri
    33916954U,	// A2_subsat
    395290U,	// A2_svaddh
    17172506U,	// A2_svaddhs
    411674U,	// A2_svadduhs
    428058U,	// A2_svavgh
    218531866U,	// A2_svavghs
    444442U,	// A2_svnavgh
    460826U,	// A2_svsubh
    17238042U,	// A2_svsubhs
    477210U,	// A2_svsubuhs
    493594U,	// A2_swiz
    509978U,	// A2_sxtb
    526362U,	// A2_sxth
    542746U,	// A2_sxtw
    235440154U,	// A2_tfr
    235440154U,	// A2_tfrcrr
    251891811U,	// A2_tfrf
    251908195U,	// A2_tfrfnew
    575514U,	// A2_tfrih
    591898U,	// A2_tfril
    235440154U,	// A2_tfrp
    251891811U,	// A2_tfrpf
    251908195U,	// A2_tfrpfnew
    34162714U,	// A2_tfrpi
    251892097U,	// A2_tfrpt
    251908481U,	// A2_tfrptnew
    235440154U,	// A2_tfrrcr
    118048794U,	// A2_tfrsi
    251892097U,	// A2_tfrt
    251908481U,	// A2_tfrtnew
    624666U,	// A2_vabsh
    17401882U,	// A2_vabshsat
    641050U,	// A2_vabsw
    17418266U,	// A2_vabswsat
    395290U,	// A2_vaddh
    17172506U,	// A2_vaddhs
    657434U,	// A2_vaddub
    17434650U,	// A2_vaddubs
    411674U,	// A2_vadduhs
    673818U,	// A2_vaddw
    17451034U,	// A2_vaddws
    428058U,	// A2_vavgh
    268863514U,	// A2_vavghcr
    218531866U,	// A2_vavghr
    690202U,	// A2_vavgub
    218794010U,	// A2_vavgubr
    706586U,	// A2_vavguh
    218810394U,	// A2_vavguhr
    722970U,	// A2_vavguw
    218826778U,	// A2_vavguwr
    739354U,	// A2_vavgw
    269174810U,	// A2_vavgwcr
    218843162U,	// A2_vavgwr
    51087386U,	// A2_vcmpbeq
    51103770U,	// A2_vcmpbgtu
    51120154U,	// A2_vcmpheq
    51136538U,	// A2_vcmphgt
    51152922U,	// A2_vcmphgtu
    51169306U,	// A2_vcmpweq
    51185690U,	// A2_vcmpwgt
    51202074U,	// A2_vcmpwgtu
    886810U,	// A2_vconj
    903194U,	// A2_vmaxb
    919578U,	// A2_vmaxh
    935962U,	// A2_vmaxub
    952346U,	// A2_vmaxuh
    968730U,	// A2_vmaxuw
    985114U,	// A2_vmaxw
    1001498U,	// A2_vminb
    1017882U,	// A2_vminh
    1034266U,	// A2_vminub
    1050650U,	// A2_vminuh
    1067034U,	// A2_vminuw
    1083418U,	// A2_vminw
    444442U,	// A2_vnavgh
    285657114U,	// A2_vnavghcr
    302434330U,	// A2_vnavghr
    1099802U,	// A2_vnavgw
    286312474U,	// A2_vnavgwcr
    303089690U,	// A2_vnavgwr
    1116186U,	// A2_vraddub
    1132570U,	// A2_vraddub_acc
    1148954U,	// A2_vrsadub
    1165338U,	// A2_vrsadub_acc
    460826U,	// A2_vsubh
    17238042U,	// A2_vsubhs
    1181722U,	// A2_vsubub
    17958938U,	// A2_vsububs
    477210U,	// A2_vsubuhs
    1198106U,	// A2_vsubw
    17975322U,	// A2_vsubws
    34768922U,	// A2_xor
    34768922U,	// A2_xorp
    1230874U,	// A2_zxtb
    1247258U,	// A2_zxth
    318785562U,	// A4_addp_c
    335579162U,	// A4_andn
    335579162U,	// A4_andnp
    51595290U,	// A4_bitsplit
    68372506U,	// A4_bitspliti
    1280026U,	// A4_boundscheck
    353617946U,	// A4_boundscheck_hi
    370395162U,	// A4_boundscheck_lo
    51644442U,	// A4_cmpbeq
    68421658U,	// A4_cmpbeqi
    51660826U,	// A4_cmpbgt
    68438042U,	// A4_cmpbgti
    51677210U,	// A4_cmpbgtu
    68454426U,	// A4_cmpbgtui
    51693594U,	// A4_cmpheq
    68470810U,	// A4_cmpheqi
    51709978U,	// A4_cmphgt
    68487194U,	// A4_cmphgti
    51726362U,	// A4_cmphgtu
    68503578U,	// A4_cmphgtui
    33654810U,	// A4_combineii
    117540890U,	// A4_combineir
    67192858U,	// A4_combineri
    68519962U,	// A4_cround_ri
    51742746U,	// A4_cround_rr
    1427825U,	// A4_ext
    1431921U,	// A4_ext_b
    1431921U,	// A4_ext_c
    8561U,	// A4_ext_g
    1443866U,	// A4_modwrapu
    335759386U,	// A4_orn
    335759386U,	// A4_ornp
    386109539U,	// A4_paslhf
    386125923U,	// A4_paslhfnew
    386109825U,	// A4_paslht
    386126209U,	// A4_paslhtnew
    402886755U,	// A4_pasrhf
    402903139U,	// A4_pasrhfnew
    402887041U,	// A4_pasrht
    402903425U,	// A4_pasrhtnew
    419663971U,	// A4_psxtbf
    419680355U,	// A4_psxtbfnew
    419664257U,	// A4_psxtbt
    419680641U,	// A4_psxtbtnew
    436441187U,	// A4_psxthf
    436457571U,	// A4_psxthfnew
    436441473U,	// A4_psxtht
    436457857U,	// A4_psxthtnew
    453218403U,	// A4_pzxtbf
    453234787U,	// A4_pzxtbfnew
    453218689U,	// A4_pzxtbt
    453235073U,	// A4_pzxtbtnew
    469995619U,	// A4_pzxthf
    470012003U,	// A4_pzxthfnew
    469995905U,	// A4_pzxtht
    470012289U,	// A4_pzxthtnew
    51791898U,	// A4_rcmpeq
    68569114U,	// A4_rcmpeqi
    51808282U,	// A4_rcmpneq
    68585498U,	// A4_rcmpneqi
    67373082U,	// A4_round_ri
    67373082U,	// A4_round_ri_sat
    50595866U,	// A4_round_rr
    50595866U,	// A4_round_rr_sat
    319129626U,	// A4_subp_c
    235440154U,	// A4_tfrcpp
    235440154U,	// A4_tfrpcp
    1493018U,	// A4_tlbmatch
    1509402U,	// A4_vcmpbeq_any
    67864602U,	// A4_vcmpbeqi
    51857434U,	// A4_vcmpbgt
    68634650U,	// A4_vcmpbgti
    67880986U,	// A4_vcmpbgtui
    67897370U,	// A4_vcmpheqi
    67913754U,	// A4_vcmphgti
    67930138U,	// A4_vcmphgtui
    67946522U,	// A4_vcmpweqi
    67962906U,	// A4_vcmpwgti
    67979290U,	// A4_vcmpwgtui
    1542170U,	// A4_vrmaxh
    1558554U,	// A4_vrmaxuh
    1574938U,	// A4_vrmaxuw
    1591322U,	// A4_vrmaxw
    1607706U,	// A4_vrminh
    1624090U,	// A4_vrminuh
    1640474U,	// A4_vrminuw
    1656858U,	// A4_vrminw
    35227674U,	// A5_ACS
    1689626U,	// A5_vaddhubs
    1U,	// ADJCALLSTACKDOWN
    1U,	// ADJCALLSTACKUP
    0U,	// ALIGNA
    0U,	// ALLOCA
    235440154U,	// ARGEXTEND
    1706010U,	// C2_all8
    50366490U,	// C2_and
    486574106U,	// C2_andn
    1722394U,	// C2_any8
    52070426U,	// C2_bitsclr
    68847642U,	// C2_bitsclri
    1755162U,	// C2_bitsset
    503550051U,	// C2_ccombinewf
    503566435U,	// C2_ccombinewnewf
    503566721U,	// C2_ccombinewnewt
    503550337U,	// C2_ccombinewt
    520327267U,	// C2_cmoveif
    520327553U,	// C2_cmoveit
    520343651U,	// C2_cmovenewif
    520343937U,	// C2_cmovenewit
    51791898U,	// C2_cmpeq
    68569114U,	// C2_cmpeqi
    51791898U,	// C2_cmpeqp
    1771546U,	// C2_cmpgei
    1787930U,	// C2_cmpgeui
    52135962U,	// C2_cmpgt
    68913178U,	// C2_cmpgti
    52135962U,	// C2_cmpgtp
    52152346U,	// C2_cmpgtu
    68929562U,	// C2_cmpgtui
    52152346U,	// C2_cmpgtup
    1837082U,	// C2_mask
    52185114U,	// C2_mux
    68962330U,	// C2_muxii
    52185114U,	// C2_muxir
    68962330U,	// C2_muxri
    198682U,	// C2_not
    50546714U,	// C2_or
    486754330U,	// C2_orn
    235440154U,	// C2_pxfer_map
    235440154U,	// C2_tfrpr
    235440154U,	// C2_tfrrp
    1869850U,	// C2_vitpack
    52217882U,	// C2_vmux
    34768922U,	// C2_xor
    1902618U,	// C4_addipc
    536905754U,	// C4_and_and
    536905754U,	// C4_and_andn
    553682970U,	// C4_and_or
    553682970U,	// C4_and_orn
    52250650U,	// C4_cmplte
    69027866U,	// C4_cmpltei
    52267034U,	// C4_cmplteu
    69044250U,	// C4_cmplteui
    51808282U,	// C4_cmpneq
    68585498U,	// C4_cmpneqi
    1951770U,	// C4_fastcorner9
    1968154U,	// C4_fastcorner9_not
    52316186U,	// C4_nbitsclr
    69093402U,	// C4_nbitsclri
    2000922U,	// C4_nbitsset
    537085978U,	// C4_or_and
    537085978U,	// C4_or_andn
    553863194U,	// C4_or_or
    553863194U,	// C4_or_orn
    2017365U,	// CALLRv3nr
    2021449U,	// CALLv3nr
    572459034U,	// CONST32
    35588122U,	// CONST32_Float_Real
    35588122U,	// CONST32_Int_Real
    2050074U,	// CONST64_Float_Real
    2050074U,	// CONST64_Int_Real
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    2017372U,	// EH_RETURN_JMPR
    887U,	// ENDLOOP0
    985U,	// ENDLOOP1
    2066458U,	// F2_conv_d2df
    2082842U,	// F2_conv_d2sf
    2099226U,	// F2_conv_df2d
    589301786U,	// F2_conv_df2d_chop
    2115610U,	// F2_conv_df2sf
    2131994U,	// F2_conv_df2ud
    589334554U,	// F2_conv_df2ud_chop
    2148378U,	// F2_conv_df2uw
    589350938U,	// F2_conv_df2uw_chop
    2164762U,	// F2_conv_df2w
    589367322U,	// F2_conv_df2w_chop
    2181146U,	// F2_conv_sf2d
    589383706U,	// F2_conv_sf2d_chop
    2197530U,	// F2_conv_sf2df
    2213914U,	// F2_conv_sf2ud
    589416474U,	// F2_conv_sf2ud_chop
    2230298U,	// F2_conv_sf2uw
    589432858U,	// F2_conv_sf2uw_chop
    2246682U,	// F2_conv_sf2w
    589449242U,	// F2_conv_sf2w_chop
    2263066U,	// F2_conv_ud2df
    2279450U,	// F2_conv_ud2sf
    2295834U,	// F2_conv_uw2df
    2312218U,	// F2_conv_uw2sf
    2328602U,	// F2_conv_w2df
    2344986U,	// F2_conv_w2sf
    2361370U,	// F2_dfclass
    2377754U,	// F2_dfcmpeq
    2394138U,	// F2_dfcmpge
    2410522U,	// F2_dfcmpgt
    2426906U,	// F2_dfcmpuo
    606423066U,	// F2_dfimm_n
    623200282U,	// F2_dfimm_p
    2459674U,	// F2_sfadd
    2476058U,	// F2_sfclass
    2492442U,	// F2_sfcmpeq
    2508826U,	// F2_sfcmpge
    2525210U,	// F2_sfcmpgt
    2541594U,	// F2_sfcmpuo
    2557978U,	// F2_sffixupd
    2574362U,	// F2_sffixupn
    2590746U,	// F2_sffixupr
    2607130U,	// F2_sffma
    640141338U,	// F2_sffma_lib
    52938778U,	// F2_sffma_sc
    2623514U,	// F2_sffms
    640157722U,	// F2_sffms_lib
    606619674U,	// F2_sfimm_n
    623396890U,	// F2_sfimm_p
    36210714U,	// F2_sfinvsqrta
    2672666U,	// F2_sfmax
    2689050U,	// F2_sfmin
    2705434U,	// F2_sfmpy
    36210714U,	// F2_sfrecipa
    2721818U,	// F2_sfsub
    572459034U,	// FCONST32_nsdata
    2738202U,	// HEXAGON_V6_hi
    2738202U,	// HEXAGON_V6_hi_128B
    2754586U,	// HEXAGON_V6_lo
    2754586U,	// HEXAGON_V6_lo_128B
    2770970U,	// HEXAGON_V6_vassignp
    2787354U,	// HEXAGON_V6_vassignp_128B
    2803738U,	// HEXAGON_V6_vd0_pseudo
    2803738U,	// HEXAGON_V6_vd0_pseudo_128B
    36374554U,	// HI
    573245466U,	// HI_GOT
    573245466U,	// HI_GOTREL
    2836506U,	// HI_L
    36374554U,	// HI_PIC
    119U,	// Insert4
    2021449U,	// J2_call
    2852963U,	// J2_callf
    2017365U,	// J2_callr
    2869347U,	// J2_callrf
    2869633U,	// J2_callrt
    2853249U,	// J2_callt
    2021455U,	// J2_jump
    2021679U,	// J2_jump_ext
    2885731U,	// J2_jump_extf
    2902115U,	// J2_jump_extfnew
    2918499U,	// J2_jump_extfnewpt
    2886017U,	// J2_jump_extt
    2902401U,	// J2_jump_exttnew
    2918785U,	// J2_jump_exttnewpt
    2021672U,	// J2_jump_noext
    2934883U,	// J2_jump_noextf
    2951267U,	// J2_jump_noextfnew
    2967651U,	// J2_jump_noextfnewpt
    2935169U,	// J2_jump_noextt
    2951553U,	// J2_jump_noexttnew
    2967937U,	// J2_jump_noexttnewpt
    2984035U,	// J2_jumpf
    3000419U,	// J2_jumpfnew
    3016803U,	// J2_jumpfnewpt
    2017372U,	// J2_jumpr
    3033187U,	// J2_jumprf
    3049571U,	// J2_jumprfnew
    3065955U,	// J2_jumprfnewpt
    3082625U,	// J2_jumprgtez
    3099009U,	// J2_jumprgtezpt
    3115393U,	// J2_jumprltez
    3131777U,	// J2_jumprltezpt
    3148161U,	// J2_jumprnz
    3164545U,	// J2_jumprnzpt
    3033473U,	// J2_jumprt
    3049857U,	// J2_jumprtnew
    3066241U,	// J2_jumprtnewpt
    3180929U,	// J2_jumprz
    3197313U,	// J2_jumprzpt
    2984321U,	// J2_jumpt
    3000705U,	// J2_jumptnew
    3017089U,	// J2_jumptnewpt
    3217806U,	// J2_loop0i
    3217806U,	// J2_loop0iext
    36215182U,	// J2_loop0r
    36215182U,	// J2_loop0rext
    3217843U,	// J2_loop1i
    3217843U,	// J2_loop1iext
    36215219U,	// J2_loop1r
    36215219U,	// J2_loop1rext
    3217798U,	// J2_ploop1si
    36215174U,	// J2_ploop1sr
    3217813U,	// J2_ploop2si
    36215189U,	// J2_ploop2sr
    3217828U,	// J2_ploop3si
    36215204U,	// J2_ploop3sr
    657541776U,	// J4_cmpeq_f_jumpnv_nt
    674318992U,	// J4_cmpeq_f_jumpnv_t
    36211318U,	// J4_cmpeq_fp0_jump_nt
    36211318U,	// J4_cmpeq_fp0_jump_t
    36211331U,	// J4_cmpeq_fp1_jump_nt
    36211331U,	// J4_cmpeq_fp1_jump_t
    657541789U,	// J4_cmpeq_t_jumpnv_nt
    674319005U,	// J4_cmpeq_t_jumpnv_t
    36211318U,	// J4_cmpeq_tp0_jump_nt
    36211318U,	// J4_cmpeq_tp0_jump_t
    36211331U,	// J4_cmpeq_tp1_jump_nt
    36211331U,	// J4_cmpeq_tp1_jump_t
    657558160U,	// J4_cmpeqi_f_jumpnv_nt
    674335376U,	// J4_cmpeqi_f_jumpnv_t
    691079798U,	// J4_cmpeqi_fp0_jump_nt
    707857014U,	// J4_cmpeqi_fp0_jump_t
    724634243U,	// J4_cmpeqi_fp1_jump_nt
    741411459U,	// J4_cmpeqi_fp1_jump_t
    657558173U,	// J4_cmpeqi_t_jumpnv_nt
    674335389U,	// J4_cmpeqi_t_jumpnv_t
    758188662U,	// J4_cmpeqi_tp0_jump_nt
    774965878U,	// J4_cmpeqi_tp0_jump_t
    791743107U,	// J4_cmpeqi_tp1_jump_nt
    808520323U,	// J4_cmpeqi_tp1_jump_t
    3263120U,	// J4_cmpeqn1_f_jumpnv_nt
    3279504U,	// J4_cmpeqn1_f_jumpnv_t
    3295862U,	// J4_cmpeqn1_fp0_jump_nt
    3312246U,	// J4_cmpeqn1_fp0_jump_t
    3328643U,	// J4_cmpeqn1_fp1_jump_nt
    3345027U,	// J4_cmpeqn1_fp1_jump_t
    3263133U,	// J4_cmpeqn1_t_jumpnv_nt
    3279517U,	// J4_cmpeqn1_t_jumpnv_t
    3361398U,	// J4_cmpeqn1_tp0_jump_nt
    3377782U,	// J4_cmpeqn1_tp0_jump_t
    3394179U,	// J4_cmpeqn1_tp1_jump_nt
    3410563U,	// J4_cmpeqn1_tp1_jump_t
    657541835U,	// J4_cmpgt_f_jumpnv_nt
    674319051U,	// J4_cmpgt_f_jumpnv_t
    36211377U,	// J4_cmpgt_fp0_jump_nt
    36211377U,	// J4_cmpgt_fp0_jump_t
    36211390U,	// J4_cmpgt_fp1_jump_nt
    36211390U,	// J4_cmpgt_fp1_jump_t
    657541848U,	// J4_cmpgt_t_jumpnv_nt
    674319064U,	// J4_cmpgt_t_jumpnv_t
    36211377U,	// J4_cmpgt_tp0_jump_nt
    36211377U,	// J4_cmpgt_tp0_jump_t
    36211390U,	// J4_cmpgt_tp1_jump_nt
    36211390U,	// J4_cmpgt_tp1_jump_t
    657558219U,	// J4_cmpgti_f_jumpnv_nt
    674335435U,	// J4_cmpgti_f_jumpnv_t
    691079857U,	// J4_cmpgti_fp0_jump_nt
    707857073U,	// J4_cmpgti_fp0_jump_t
    724634302U,	// J4_cmpgti_fp1_jump_nt
    741411518U,	// J4_cmpgti_fp1_jump_t
    657558232U,	// J4_cmpgti_t_jumpnv_nt
    674335448U,	// J4_cmpgti_t_jumpnv_t
    758188721U,	// J4_cmpgti_tp0_jump_nt
    774965937U,	// J4_cmpgti_tp0_jump_t
    791743166U,	// J4_cmpgti_tp1_jump_nt
    808520382U,	// J4_cmpgti_tp1_jump_t
    3263179U,	// J4_cmpgtn1_f_jumpnv_nt
    3279563U,	// J4_cmpgtn1_f_jumpnv_t
    3295921U,	// J4_cmpgtn1_fp0_jump_nt
    3312305U,	// J4_cmpgtn1_fp0_jump_t
    3328702U,	// J4_cmpgtn1_fp1_jump_nt
    3345086U,	// J4_cmpgtn1_fp1_jump_t
    3263192U,	// J4_cmpgtn1_t_jumpnv_nt
    3279576U,	// J4_cmpgtn1_t_jumpnv_t
    3361457U,	// J4_cmpgtn1_tp0_jump_nt
    3377841U,	// J4_cmpgtn1_tp0_jump_t
    3394238U,	// J4_cmpgtn1_tp1_jump_nt
    3410622U,	// J4_cmpgtn1_tp1_jump_t
    657541953U,	// J4_cmpgtu_f_jumpnv_nt
    674319169U,	// J4_cmpgtu_f_jumpnv_t
    36211493U,	// J4_cmpgtu_fp0_jump_nt
    36211493U,	// J4_cmpgtu_fp0_jump_t
    36211507U,	// J4_cmpgtu_fp1_jump_nt
    36211507U,	// J4_cmpgtu_fp1_jump_t
    657541967U,	// J4_cmpgtu_t_jumpnv_nt
    674319183U,	// J4_cmpgtu_t_jumpnv_t
    36211493U,	// J4_cmpgtu_tp0_jump_nt
    36211493U,	// J4_cmpgtu_tp0_jump_t
    36211507U,	// J4_cmpgtu_tp1_jump_nt
    36211507U,	// J4_cmpgtu_tp1_jump_t
    657558337U,	// J4_cmpgtui_f_jumpnv_nt
    674335553U,	// J4_cmpgtui_f_jumpnv_t
    691079973U,	// J4_cmpgtui_fp0_jump_nt
    707857189U,	// J4_cmpgtui_fp0_jump_t
    724634419U,	// J4_cmpgtui_fp1_jump_nt
    741411635U,	// J4_cmpgtui_fp1_jump_t
    657558351U,	// J4_cmpgtui_t_jumpnv_nt
    674335567U,	// J4_cmpgtui_t_jumpnv_t
    758188837U,	// J4_cmpgtui_tp0_jump_nt
    774966053U,	// J4_cmpgtui_tp0_jump_t
    791743283U,	// J4_cmpgtui_tp1_jump_nt
    808520499U,	// J4_cmpgtui_tp1_jump_t
    36211403U,	// J4_cmplt_f_jumpnv_nt
    36211403U,	// J4_cmplt_f_jumpnv_t
    36211416U,	// J4_cmplt_t_jumpnv_nt
    36211416U,	// J4_cmplt_t_jumpnv_t
    36211521U,	// J4_cmpltu_f_jumpnv_nt
    36211521U,	// J4_cmpltu_f_jumpnv_t
    36211535U,	// J4_cmpltu_t_jumpnv_nt
    36211535U,	// J4_cmpltu_t_jumpnv_t
    1428137U,	// J4_hintjumpr
    34162714U,	// J4_jumpseti
    822642714U,	// J4_jumpsetr
    3427070U,	// J4_tstbit0_f_jumpnv_nt
    3443454U,	// J4_tstbit0_f_jumpnv_t
    3459812U,	// J4_tstbit0_fp0_jump_nt
    3476196U,	// J4_tstbit0_fp0_jump_t
    3492593U,	// J4_tstbit0_fp1_jump_nt
    3508977U,	// J4_tstbit0_fp1_jump_t
    3427083U,	// J4_tstbit0_t_jumpnv_nt
    3443467U,	// J4_tstbit0_t_jumpnv_t
    3525348U,	// J4_tstbit0_tp0_jump_nt
    3541732U,	// J4_tstbit0_tp0_jump_t
    3558129U,	// J4_tstbit0_tp1_jump_nt
    3574513U,	// J4_tstbit0_tp1_jump_t
    2017372U,	// JMPret
    3033187U,	// JMPretf
    3049571U,	// JMPretfnew
    3065955U,	// JMPretfnewpt
    3033473U,	// JMPrett
    3049857U,	// JMPrettnew
    3066241U,	// JMPrettnewpt
    1046U,	// L2_deallocframe
    322357274U,	// L2_loadalignb_io
    322357274U,	// L2_loadalignb_pbr
    322357274U,	// L2_loadalignb_pci
    842450970U,	// L2_loadalignb_pcr
    842450970U,	// L2_loadalignb_pi
    842450970U,	// L2_loadalignb_pr
    322373658U,	// L2_loadalignh_io
    322373658U,	// L2_loadalignh_pbr
    322373658U,	// L2_loadalignh_pci
    842467354U,	// L2_loadalignh_pcr
    842467354U,	// L2_loadalignh_pi
    842467354U,	// L2_loadalignh_pr
    37177370U,	// L2_loadbsw2_io
    322390042U,	// L2_loadbsw2_pbr
    322390042U,	// L2_loadbsw2_pci
    322390042U,	// L2_loadbsw2_pcr
    322390042U,	// L2_loadbsw2_pi
    322390042U,	// L2_loadbsw2_pr
    37177370U,	// L2_loadbsw4_io
    322390042U,	// L2_loadbsw4_pbr
    322390042U,	// L2_loadbsw4_pci
    322390042U,	// L2_loadbsw4_pcr
    322390042U,	// L2_loadbsw4_pi
    322390042U,	// L2_loadbsw4_pr
    37193754U,	// L2_loadbzw2_io
    322406426U,	// L2_loadbzw2_pbr
    322406426U,	// L2_loadbzw2_pci
    322406426U,	// L2_loadbzw2_pcr
    322406426U,	// L2_loadbzw2_pi
    322406426U,	// L2_loadbzw2_pr
    37193754U,	// L2_loadbzw4_io
    322406426U,	// L2_loadbzw4_pbr
    322406426U,	// L2_loadbzw4_pci
    322406426U,	// L2_loadbzw4_pcr
    322406426U,	// L2_loadbzw4_pi
    322406426U,	// L2_loadbzw4_pr
    37210138U,	// L2_loadrb_io
    322422810U,	// L2_loadrb_pbr
    322424942U,	// L2_loadrb_pbr_pseudo
    322422810U,	// L2_loadrb_pci
    322424942U,	// L2_loadrb_pci_pseudo
    322422810U,	// L2_loadrb_pcr
    322422810U,	// L2_loadrb_pi
    322422810U,	// L2_loadrb_pr
    37226522U,	// L2_loadrbgp
    37242906U,	// L2_loadrd_io
    322455578U,	// L2_loadrd_pbr
    322457710U,	// L2_loadrd_pbr_pseudo
    322455578U,	// L2_loadrd_pci
    322457710U,	// L2_loadrd_pci_pseudo
    322455578U,	// L2_loadrd_pcr
    322455578U,	// L2_loadrd_pi
    322455578U,	// L2_loadrd_pr
    37259290U,	// L2_loadrdgp
    37275674U,	// L2_loadrh_io
    322488346U,	// L2_loadrh_pbr
    322490478U,	// L2_loadrh_pbr_pseudo
    322488346U,	// L2_loadrh_pci
    322490478U,	// L2_loadrh_pci_pseudo
    322488346U,	// L2_loadrh_pcr
    322488346U,	// L2_loadrh_pi
    322488346U,	// L2_loadrh_pr
    37292058U,	// L2_loadrhgp
    37308442U,	// L2_loadri_io
    322521114U,	// L2_loadri_pbr
    322523246U,	// L2_loadri_pbr_pseudo
    322521114U,	// L2_loadri_pci
    322523246U,	// L2_loadri_pci_pseudo
    322521114U,	// L2_loadri_pcr
    322521114U,	// L2_loadri_pi
    322521114U,	// L2_loadri_pr
    37324826U,	// L2_loadrigp
    37341210U,	// L2_loadrub_io
    322553882U,	// L2_loadrub_pbr
    322556014U,	// L2_loadrub_pbr_pseudo
    322553882U,	// L2_loadrub_pci
    322556014U,	// L2_loadrub_pci_pseudo
    322553882U,	// L2_loadrub_pcr
    322553882U,	// L2_loadrub_pi
    322553882U,	// L2_loadrub_pr
    37357594U,	// L2_loadrubgp
    37373978U,	// L2_loadruh_io
    322586650U,	// L2_loadruh_pbr
    322588782U,	// L2_loadruh_pbr_pseudo
    322586650U,	// L2_loadruh_pci
    322588782U,	// L2_loadruh_pci_pseudo
    322586650U,	// L2_loadruh_pcr
    322586650U,	// L2_loadruh_pi
    322586650U,	// L2_loadruh_pr
    37390362U,	// L2_loadruhgp
    3852314U,	// L2_loadw_locked
    855871587U,	// L2_ploadrbf_io
    855877731U,	// L2_ploadrbf_pi
    855887971U,	// L2_ploadrbfnew_io
    855894115U,	// L2_ploadrbfnew_pi
    855871873U,	// L2_ploadrbt_io
    855878017U,	// L2_ploadrbt_pi
    855888257U,	// L2_ploadrbtnew_io
    855894401U,	// L2_ploadrbtnew_pi
    872648803U,	// L2_ploadrdf_io
    872654947U,	// L2_ploadrdf_pi
    872665187U,	// L2_ploadrdfnew_io
    872671331U,	// L2_ploadrdfnew_pi
    872649089U,	// L2_ploadrdt_io
    872655233U,	// L2_ploadrdt_pi
    872665473U,	// L2_ploadrdtnew_io
    872671617U,	// L2_ploadrdtnew_pi
    889426019U,	// L2_ploadrhf_io
    889432163U,	// L2_ploadrhf_pi
    889442403U,	// L2_ploadrhfnew_io
    889448547U,	// L2_ploadrhfnew_pi
    889426305U,	// L2_ploadrht_io
    889432449U,	// L2_ploadrht_pi
    889442689U,	// L2_ploadrhtnew_io
    889448833U,	// L2_ploadrhtnew_pi
    906203235U,	// L2_ploadrif_io
    906209379U,	// L2_ploadrif_pi
    906219619U,	// L2_ploadrifnew_io
    906225763U,	// L2_ploadrifnew_pi
    906203521U,	// L2_ploadrit_io
    906209665U,	// L2_ploadrit_pi
    906219905U,	// L2_ploadritnew_io
    906226049U,	// L2_ploadritnew_pi
    922980451U,	// L2_ploadrubf_io
    922986595U,	// L2_ploadrubf_pi
    922996835U,	// L2_ploadrubfnew_io
    923002979U,	// L2_ploadrubfnew_pi
    922980737U,	// L2_ploadrubt_io
    922986881U,	// L2_ploadrubt_pi
    922997121U,	// L2_ploadrubtnew_io
    923003265U,	// L2_ploadrubtnew_pi
    939757667U,	// L2_ploadruhf_io
    939763811U,	// L2_ploadruhf_pi
    939774051U,	// L2_ploadruhfnew_io
    939780195U,	// L2_ploadruhfnew_pi
    939757953U,	// L2_ploadruht_io
    939764097U,	// L2_ploadruht_pi
    939774337U,	// L2_ploadruhtnew_io
    939780481U,	// L2_ploadruhtnew_pi
    121309693U,	// L4_add_memopb_io
    121309784U,	// L4_add_memoph_io
    121310065U,	// L4_add_memopw_io
    121309693U,	// L4_and_memopb_io
    121309784U,	// L4_and_memoph_io
    121310065U,	// L4_and_memopw_io
    121309693U,	// L4_iadd_memopb_io
    121309784U,	// L4_iadd_memoph_io
    121310065U,	// L4_iadd_memopw_io
    121309693U,	// L4_iand_memopb_io
    121309784U,	// L4_iand_memoph_io
    121310065U,	// L4_iand_memopw_io
    121309693U,	// L4_ior_memopb_io
    121309784U,	// L4_ior_memoph_io
    121310065U,	// L4_ior_memopw_io
    121309693U,	// L4_isub_memopb_io
    121309784U,	// L4_isub_memoph_io
    121310065U,	// L4_isub_memopw_io
    37144602U,	// L4_loadalignb_ap
    37144602U,	// L4_loadalignb_ur
    37160986U,	// L4_loadalignh_ap
    37160986U,	// L4_loadalignh_ur
    37177370U,	// L4_loadbsw2_ap
    37177370U,	// L4_loadbsw2_ur
    37177370U,	// L4_loadbsw4_ap
    37177370U,	// L4_loadbsw4_ur
    37193754U,	// L4_loadbzw2_ap
    37193754U,	// L4_loadbzw2_ur
    37193754U,	// L4_loadbzw4_ap
    37193754U,	// L4_loadbzw4_ur
    3885082U,	// L4_loadd_locked
    121112602U,	// L4_loadrb_abs
    37210138U,	// L4_loadrb_ap
    37210138U,	// L4_loadrb_rr
    37210138U,	// L4_loadrb_ur
    121145370U,	// L4_loadrd_abs
    37242906U,	// L4_loadrd_ap
    37242906U,	// L4_loadrd_rr
    37242906U,	// L4_loadrd_ur
    121178138U,	// L4_loadrh_abs
    37275674U,	// L4_loadrh_ap
    37275674U,	// L4_loadrh_rr
    37275674U,	// L4_loadrh_ur
    121210906U,	// L4_loadri_abs
    37308442U,	// L4_loadri_ap
    37308442U,	// L4_loadri_rr
    37308442U,	// L4_loadri_ur
    121243674U,	// L4_loadrub_abs
    37341210U,	// L4_loadrub_ap
    37341210U,	// L4_loadrub_rr
    37341210U,	// L4_loadrub_ur
    121276442U,	// L4_loadruh_abs
    37373978U,	// L4_loadruh_ap
    37373978U,	// L4_loadruh_rr
    37373978U,	// L4_loadruh_ur
    121309693U,	// L4_or_memopb_io
    121309784U,	// L4_or_memoph_io
    121310065U,	// L4_or_memopw_io
    956534883U,	// L4_ploadrbf_abs
    855871587U,	// L4_ploadrbf_rr
    956551267U,	// L4_ploadrbfnew_abs
    855887971U,	// L4_ploadrbfnew_rr
    956535169U,	// L4_ploadrbt_abs
    855871873U,	// L4_ploadrbt_rr
    956551553U,	// L4_ploadrbtnew_abs
    855888257U,	// L4_ploadrbtnew_rr
    973312099U,	// L4_ploadrdf_abs
    872648803U,	// L4_ploadrdf_rr
    973328483U,	// L4_ploadrdfnew_abs
    872665187U,	// L4_ploadrdfnew_rr
    973312385U,	// L4_ploadrdt_abs
    872649089U,	// L4_ploadrdt_rr
    973328769U,	// L4_ploadrdtnew_abs
    872665473U,	// L4_ploadrdtnew_rr
    990089315U,	// L4_ploadrhf_abs
    889426019U,	// L4_ploadrhf_rr
    990105699U,	// L4_ploadrhfnew_abs
    889442403U,	// L4_ploadrhfnew_rr
    990089601U,	// L4_ploadrht_abs
    889426305U,	// L4_ploadrht_rr
    990105985U,	// L4_ploadrhtnew_abs
    889442689U,	// L4_ploadrhtnew_rr
    1006866531U,	// L4_ploadrif_abs
    906203235U,	// L4_ploadrif_rr
    1006882915U,	// L4_ploadrifnew_abs
    906219619U,	// L4_ploadrifnew_rr
    1006866817U,	// L4_ploadrit_abs
    906203521U,	// L4_ploadrit_rr
    1006883201U,	// L4_ploadritnew_abs
    906219905U,	// L4_ploadritnew_rr
    1023643747U,	// L4_ploadrubf_abs
    922980451U,	// L4_ploadrubf_rr
    1023660131U,	// L4_ploadrubfnew_abs
    922996835U,	// L4_ploadrubfnew_rr
    1023644033U,	// L4_ploadrubt_abs
    922980737U,	// L4_ploadrubt_rr
    1023660417U,	// L4_ploadrubtnew_abs
    922997121U,	// L4_ploadrubtnew_rr
    1040420963U,	// L4_ploadruhf_abs
    939757667U,	// L4_ploadruhf_rr
    1040437347U,	// L4_ploadruhfnew_abs
    939774051U,	// L4_ploadruhfnew_rr
    1040421249U,	// L4_ploadruht_abs
    939757953U,	// L4_ploadruht_rr
    1040437633U,	// L4_ploadruhtnew_abs
    939774337U,	// L4_ploadruhtnew_rr
    1087U,	// L4_return
    3901539U,	// L4_return_f
    3917923U,	// L4_return_fnew_pnt
    3934307U,	// L4_return_fnew_pt
    3901825U,	// L4_return_t
    3918209U,	// L4_return_tnew_pnt
    3934593U,	// L4_return_tnew_pt
    121309693U,	// L4_sub_memopb_io
    121309784U,	// L4_sub_memoph_io
    121310065U,	// L4_sub_memopw_io
    1U,	// LDriq_pred_V6
    1U,	// LDriq_pred_V6_128B
    1U,	// LDriq_pred_vec_V6
    1U,	// LDriq_pred_vec_V6_128B
    1U,	// LDriv_pseudo_V6
    1U,	// LDriv_pseudo_V6_128B
    1060915226U,	// LDrivv_indexed
    1077692442U,	// LDrivv_indexed_128B
    1U,	// LDrivv_pseudo_V6
    1U,	// LDrivv_pseudo_V6_128B
    245U,	// LDriw_pred
    37521434U,	// LO
    574392346U,	// LO_GOT
    574392346U,	// LO_GOTREL
    3983386U,	// LO_H
    37521434U,	// LO_PIC
    54331418U,	// M2_acci
    71108634U,	// M2_accii
    4016154U,	// M2_cmaci_s0
    4032538U,	// M2_cmacr_s0
    20826138U,	// M2_cmacs_s0
    1094567962U,	// M2_cmacs_s1
    1111345178U,	// M2_cmacsc_s0
    1128122394U,	// M2_cmacsc_s1
    4065306U,	// M2_cmpyi_s0
    4081690U,	// M2_cmpyr_s0
    306087962U,	// M2_cmpyrs_s0
    1144948762U,	// M2_cmpyrs_s1
    1161725978U,	// M2_cmpyrsc_s0
    1178503194U,	// M2_cmpyrsc_s1
    20875290U,	// M2_cmpys_s0
    1094617114U,	// M2_cmpys_s1
    1111394330U,	// M2_cmpysc_s0
    1128171546U,	// M2_cmpysc_s1
    20891674U,	// M2_cnacs_s0
    1094633498U,	// M2_cnacs_s1
    1111410714U,	// M2_cnacsc_s0
    1128187930U,	// M2_cnacsc_s1
    54462490U,	// M2_dpmpyss_acc_s0
    54478874U,	// M2_dpmpyss_nac_s0
    54495258U,	// M2_dpmpyss_rnd_s0
    54495258U,	// M2_dpmpyss_s0
    54511642U,	// M2_dpmpyuu_acc_s0
    54528026U,	// M2_dpmpyuu_nac_s0
    54544410U,	// M2_dpmpyuu_s0
    54495258U,	// M2_hmmpyh_rs1
    54495258U,	// M2_hmmpyh_s1
    54495258U,	// M2_hmmpyl_rs1
    54495258U,	// M2_hmmpyl_s1
    54560794U,	// M2_maci
    4245530U,	// M2_macsin
    71338010U,	// M2_macsip
    306251802U,	// M2_mmachs_rs0
    1145112602U,	// M2_mmachs_rs1
    21039130U,	// M2_mmachs_s0
    1094780954U,	// M2_mmachs_s1
    306268186U,	// M2_mmacls_rs0
    1145128986U,	// M2_mmacls_rs1
    21055514U,	// M2_mmacls_s0
    1094797338U,	// M2_mmacls_s1
    306284570U,	// M2_mmacuhs_rs0
    1145145370U,	// M2_mmacuhs_rs1
    21071898U,	// M2_mmacuhs_s0
    1094813722U,	// M2_mmacuhs_s1
    306300954U,	// M2_mmaculs_rs0
    1145161754U,	// M2_mmaculs_rs1
    21088282U,	// M2_mmaculs_s0
    1094830106U,	// M2_mmaculs_s1
    306317338U,	// M2_mmpyh_rs0
    1145178138U,	// M2_mmpyh_rs1
    21104666U,	// M2_mmpyh_s0
    1094846490U,	// M2_mmpyh_s1
    306333722U,	// M2_mmpyl_rs0
    1145194522U,	// M2_mmpyl_rs1
    21121050U,	// M2_mmpyl_s0
    1094862874U,	// M2_mmpyl_s1
    306350106U,	// M2_mmpyuh_rs0
    1145210906U,	// M2_mmpyuh_rs1
    21137434U,	// M2_mmpyuh_s0
    1094879258U,	// M2_mmpyuh_s1
    306366490U,	// M2_mmpyul_rs0
    1145227290U,	// M2_mmpyul_rs1
    21153818U,	// M2_mmpyul_s0
    1094895642U,	// M2_mmpyul_s1
    88016922U,	// M2_mpy_acc_hh_s0
    88016922U,	// M2_mpy_acc_hh_s1
    88016922U,	// M2_mpy_acc_hl_s0
    88016922U,	// M2_mpy_acc_hl_s1
    104794138U,	// M2_mpy_acc_lh_s0
    104794138U,	// M2_mpy_acc_lh_s1
    104794138U,	// M2_mpy_acc_ll_s0
    104794138U,	// M2_mpy_acc_ll_s1
    88016922U,	// M2_mpy_acc_sat_hh_s0
    88016922U,	// M2_mpy_acc_sat_hh_s1
    88016922U,	// M2_mpy_acc_sat_hl_s0
    88016922U,	// M2_mpy_acc_sat_hl_s1
    104794138U,	// M2_mpy_acc_sat_lh_s0
    104794138U,	// M2_mpy_acc_sat_lh_s1
    104794138U,	// M2_mpy_acc_sat_ll_s0
    104794138U,	// M2_mpy_acc_sat_ll_s1
    88049690U,	// M2_mpy_hh_s0
    88049690U,	// M2_mpy_hh_s1
    88049690U,	// M2_mpy_hl_s0
    88049690U,	// M2_mpy_hl_s1
    104826906U,	// M2_mpy_lh_s0
    104826906U,	// M2_mpy_lh_s1
    104826906U,	// M2_mpy_ll_s0
    104826906U,	// M2_mpy_ll_s1
    88033306U,	// M2_mpy_nac_hh_s0
    88033306U,	// M2_mpy_nac_hh_s1
    88033306U,	// M2_mpy_nac_hl_s0
    88033306U,	// M2_mpy_nac_hl_s1
    104810522U,	// M2_mpy_nac_lh_s0
    104810522U,	// M2_mpy_nac_lh_s1
    104810522U,	// M2_mpy_nac_ll_s0
    104810522U,	// M2_mpy_nac_ll_s1
    88033306U,	// M2_mpy_nac_sat_hh_s0
    88033306U,	// M2_mpy_nac_sat_hh_s1
    88033306U,	// M2_mpy_nac_sat_hl_s0
    88033306U,	// M2_mpy_nac_sat_hl_s1
    104810522U,	// M2_mpy_nac_sat_lh_s0
    104810522U,	// M2_mpy_nac_sat_lh_s1
    104810522U,	// M2_mpy_nac_sat_ll_s0
    104810522U,	// M2_mpy_nac_sat_ll_s1
    88049690U,	// M2_mpy_rnd_hh_s0
    88049690U,	// M2_mpy_rnd_hh_s1
    88049690U,	// M2_mpy_rnd_hl_s0
    88049690U,	// M2_mpy_rnd_hl_s1
    104826906U,	// M2_mpy_rnd_lh_s0
    104826906U,	// M2_mpy_rnd_lh_s1
    104826906U,	// M2_mpy_rnd_ll_s0
    104826906U,	// M2_mpy_rnd_ll_s1
    88049690U,	// M2_mpy_sat_hh_s0
    88049690U,	// M2_mpy_sat_hh_s1
    88049690U,	// M2_mpy_sat_hl_s0
    88049690U,	// M2_mpy_sat_hl_s1
    104826906U,	// M2_mpy_sat_lh_s0
    104826906U,	// M2_mpy_sat_lh_s1
    104826906U,	// M2_mpy_sat_ll_s0
    104826906U,	// M2_mpy_sat_ll_s1
    88049690U,	// M2_mpy_sat_rnd_hh_s0
    88049690U,	// M2_mpy_sat_rnd_hh_s1
    88049690U,	// M2_mpy_sat_rnd_hl_s0
    88049690U,	// M2_mpy_sat_rnd_hl_s1
    104826906U,	// M2_mpy_sat_rnd_lh_s0
    104826906U,	// M2_mpy_sat_rnd_lh_s1
    104826906U,	// M2_mpy_sat_rnd_ll_s0
    104826906U,	// M2_mpy_sat_rnd_ll_s1
    54495258U,	// M2_mpy_up
    54495258U,	// M2_mpy_up_s1
    54495258U,	// M2_mpy_up_s1_sat
    88016922U,	// M2_mpyd_acc_hh_s0
    88016922U,	// M2_mpyd_acc_hh_s1
    88016922U,	// M2_mpyd_acc_hl_s0
    88016922U,	// M2_mpyd_acc_hl_s1
    104794138U,	// M2_mpyd_acc_lh_s0
    104794138U,	// M2_mpyd_acc_lh_s1
    104794138U,	// M2_mpyd_acc_ll_s0
    104794138U,	// M2_mpyd_acc_ll_s1
    88049690U,	// M2_mpyd_hh_s0
    88049690U,	// M2_mpyd_hh_s1
    88049690U,	// M2_mpyd_hl_s0
    88049690U,	// M2_mpyd_hl_s1
    104826906U,	// M2_mpyd_lh_s0
    104826906U,	// M2_mpyd_lh_s1
    104826906U,	// M2_mpyd_ll_s0
    104826906U,	// M2_mpyd_ll_s1
    88033306U,	// M2_mpyd_nac_hh_s0
    88033306U,	// M2_mpyd_nac_hh_s1
    88033306U,	// M2_mpyd_nac_hl_s0
    88033306U,	// M2_mpyd_nac_hl_s1
    104810522U,	// M2_mpyd_nac_lh_s0
    104810522U,	// M2_mpyd_nac_lh_s1
    104810522U,	// M2_mpyd_nac_ll_s0
    104810522U,	// M2_mpyd_nac_ll_s1
    88049690U,	// M2_mpyd_rnd_hh_s0
    88049690U,	// M2_mpyd_rnd_hh_s1
    88049690U,	// M2_mpyd_rnd_hl_s0
    88049690U,	// M2_mpyd_rnd_hl_s1
    104826906U,	// M2_mpyd_rnd_lh_s0
    104826906U,	// M2_mpyd_rnd_lh_s1
    104826906U,	// M2_mpyd_rnd_ll_s0
    104826906U,	// M2_mpyd_rnd_ll_s1
    54724634U,	// M2_mpyi
    4409370U,	// M2_mpysin
    4425754U,	// M2_mpysip
    71501850U,	// M2_mpysmi
    4442138U,	// M2_mpysu_up
    88066074U,	// M2_mpyu_acc_hh_s0
    88066074U,	// M2_mpyu_acc_hh_s1
    88066074U,	// M2_mpyu_acc_hl_s0
    88066074U,	// M2_mpyu_acc_hl_s1
    104843290U,	// M2_mpyu_acc_lh_s0
    104843290U,	// M2_mpyu_acc_lh_s1
    104843290U,	// M2_mpyu_acc_ll_s0
    104843290U,	// M2_mpyu_acc_ll_s1
    88098842U,	// M2_mpyu_hh_s0
    88098842U,	// M2_mpyu_hh_s1
    88098842U,	// M2_mpyu_hl_s0
    88098842U,	// M2_mpyu_hl_s1
    104876058U,	// M2_mpyu_lh_s0
    104876058U,	// M2_mpyu_lh_s1
    104876058U,	// M2_mpyu_ll_s0
    104876058U,	// M2_mpyu_ll_s1
    88082458U,	// M2_mpyu_nac_hh_s0
    88082458U,	// M2_mpyu_nac_hh_s1
    88082458U,	// M2_mpyu_nac_hl_s0
    88082458U,	// M2_mpyu_nac_hl_s1
    104859674U,	// M2_mpyu_nac_lh_s0
    104859674U,	// M2_mpyu_nac_lh_s1
    104859674U,	// M2_mpyu_nac_ll_s0
    104859674U,	// M2_mpyu_nac_ll_s1
    54544410U,	// M2_mpyu_up
    88066074U,	// M2_mpyud_acc_hh_s0
    88066074U,	// M2_mpyud_acc_hh_s1
    88066074U,	// M2_mpyud_acc_hl_s0
    88066074U,	// M2_mpyud_acc_hl_s1
    104843290U,	// M2_mpyud_acc_lh_s0
    104843290U,	// M2_mpyud_acc_lh_s1
    104843290U,	// M2_mpyud_acc_ll_s0
    104843290U,	// M2_mpyud_acc_ll_s1
    88098842U,	// M2_mpyud_hh_s0
    88098842U,	// M2_mpyud_hh_s1
    88098842U,	// M2_mpyud_hl_s0
    88098842U,	// M2_mpyud_hl_s1
    104876058U,	// M2_mpyud_lh_s0
    104876058U,	// M2_mpyud_lh_s1
    104876058U,	// M2_mpyud_ll_s0
    104876058U,	// M2_mpyud_ll_s1
    88082458U,	// M2_mpyud_nac_hh_s0
    88082458U,	// M2_mpyud_nac_hh_s1
    88082458U,	// M2_mpyud_nac_hl_s0
    88082458U,	// M2_mpyud_nac_hl_s1
    104859674U,	// M2_mpyud_nac_lh_s0
    104859674U,	// M2_mpyud_nac_lh_s1
    104859674U,	// M2_mpyud_nac_ll_s0
    104859674U,	// M2_mpyud_nac_ll_s1
    4458522U,	// M2_mpyui
    54806554U,	// M2_nacci
    71583770U,	// M2_naccii
    4491290U,	// M2_subacc
    4507674U,	// M2_vabsdiffh
    4524058U,	// M2_vabsdiffw
    4540442U,	// M2_vcmac_s0_sat_i
    4556826U,	// M2_vcmac_s0_sat_r
    21350426U,	// M2_vcmpy_s0_sat_i
    21366810U,	// M2_vcmpy_s0_sat_r
    1095092250U,	// M2_vcmpy_s1_sat_i
    1095108634U,	// M2_vcmpy_s1_sat_r
    21383194U,	// M2_vdmacs_s0
    1095125018U,	// M2_vdmacs_s1
    306612250U,	// M2_vdmpyrs_s0
    1145473050U,	// M2_vdmpyrs_s1
    21399578U,	// M2_vdmpys_s0
    1095141402U,	// M2_vdmpys_s1
    4638746U,	// M2_vmac2
    4655130U,	// M2_vmac2es
    21432346U,	// M2_vmac2es_s0
    1095174170U,	// M2_vmac2es_s1
    21415962U,	// M2_vmac2s_s0
    1095157786U,	// M2_vmac2s_s1
    21448730U,	// M2_vmac2su_s0
    1095190554U,	// M2_vmac2su_s1
    21465114U,	// M2_vmpy2es_s0
    1095206938U,	// M2_vmpy2es_s1
    21481498U,	// M2_vmpy2s_s0
    306694170U,	// M2_vmpy2s_s0pack
    1095223322U,	// M2_vmpy2s_s1
    1145554970U,	// M2_vmpy2s_s1pack
    21497882U,	// M2_vmpy2su_s0
    1095239706U,	// M2_vmpy2su_s1
    4737050U,	// M2_vraddh
    4753434U,	// M2_vradduh
    4769818U,	// M2_vrcmaci_s0
    1195952154U,	// M2_vrcmaci_s0c
    4786202U,	// M2_vrcmacr_s0
    1195968538U,	// M2_vrcmacr_s0c
    4802586U,	// M2_vrcmpyi_s0
    1195984922U,	// M2_vrcmpyi_s0c
    4818970U,	// M2_vrcmpyr_s0
    1196001306U,	// M2_vrcmpyr_s0c
    1095354394U,	// M2_vrcmpys_acc_s1
    1212794906U,	// M2_vrcmpys_acc_s1_h
    1229572122U,	// M2_vrcmpys_acc_s1_l
    1095370778U,	// M2_vrcmpys_s1
    1212827674U,	// M2_vrcmpys_s1_h
    1229604890U,	// M2_vrcmpys_s1_l
    1145702426U,	// M2_vrcmpys_s1rp
    1246382106U,	// M2_vrcmpys_s1rp_h
    1263159322U,	// M2_vrcmpys_s1rp_l
    4884506U,	// M2_vrmac_s0
    4900890U,	// M2_vrmpy_s0
    4917274U,	// M2_xor_xacc
    55265306U,	// M4_and_and
    340477978U,	// M4_and_andn
    4950042U,	// M4_and_or
    4966426U,	// M4_and_xor
    1145833498U,	// M4_cmpyi_wh
    1179387930U,	// M4_cmpyi_whc
    1145849882U,	// M4_cmpyr_wh
    1179404314U,	// M4_cmpyr_whc
    54462490U,	// M4_mac_up_s1_sat
    1280083994U,	// M4_mpyri_addi
    33572890U,	// M4_mpyri_addr
    33572890U,	// M4_mpyri_addr_u2
    1280083994U,	// M4_mpyrr_addi
    33572890U,	// M4_mpyrr_addr
    54478874U,	// M4_nac_up_s1_sat
    55363610U,	// M4_or_and
    340576282U,	// M4_or_andn
    55379994U,	// M4_or_or
    5064730U,	// M4_or_xor
    5081114U,	// M4_pmpyw
    5097498U,	// M4_pmpyw_acc
    5113882U,	// M4_vpmpyh
    5130266U,	// M4_vpmpyh_acc
    5146650U,	// M4_vrmpyeh_acc_s0
    1296992282U,	// M4_vrmpyeh_acc_s1
    5163034U,	// M4_vrmpyeh_s0
    1297008666U,	// M4_vrmpyeh_s1
    5179418U,	// M4_vrmpyoh_acc_s0
    1297025050U,	// M4_vrmpyoh_acc_s1
    5195802U,	// M4_vrmpyoh_s0
    1297041434U,	// M4_vrmpyoh_s1
    55543834U,	// M4_xor_and
    340756506U,	// M4_xor_andn
    5228570U,	// M4_xor_or
    4917274U,	// M4_xor_xacc
    5244954U,	// M5_vdmacbsu
    5261338U,	// M5_vdmpybsu
    5277722U,	// M5_vmacbsu
    5294106U,	// M5_vmacbuu
    5310490U,	// M5_vmpybsu
    5326874U,	// M5_vmpybuu
    5343258U,	// M5_vrmacbsu
    5359642U,	// M5_vrmacbuu
    5376026U,	// M5_vrmpybsu
    5392410U,	// M5_vrmpybuu
    1U,	// MUX64_rr
    52185114U,	// MUX_ir_f
    68962330U,	// MUX_ri_f
    2021449U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    2021449U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT
    2021455U,	// RESTORE_DEALLOC_RET_JMP_V4
    2021455U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT
    5408794U,	// S2_addasl_rrri
    1427805U,	// S2_allocframe
    72534042U,	// S2_asl_i_p
    72550426U,	// S2_asl_i_p_acc
    72566810U,	// S2_asl_i_p_and
    72583194U,	// S2_asl_i_p_nac
    72599578U,	// S2_asl_i_p_or
    72615962U,	// S2_asl_i_p_xacc
    72534042U,	// S2_asl_i_r
    72550426U,	// S2_asl_i_r_acc
    72566810U,	// S2_asl_i_r_and
    72583194U,	// S2_asl_i_r_nac
    72599578U,	// S2_asl_i_r_or
    72534042U,	// S2_asl_i_r_sat
    72615962U,	// S2_asl_i_r_xacc
    72632346U,	// S2_asl_i_vh
    72648730U,	// S2_asl_i_vw
    55756826U,	// S2_asl_r_p
    55773210U,	// S2_asl_r_p_acc
    55789594U,	// S2_asl_r_p_and
    55805978U,	// S2_asl_r_p_nac
    55822362U,	// S2_asl_r_p_or
    55838746U,	// S2_asl_r_p_xor
    55756826U,	// S2_asl_r_r
    55773210U,	// S2_asl_r_r_acc
    55789594U,	// S2_asl_r_r_and
    55805978U,	// S2_asl_r_r_nac
    55822362U,	// S2_asl_r_r_or
    55756826U,	// S2_asl_r_r_sat
    55855130U,	// S2_asl_r_vh
    55871514U,	// S2_asl_r_vw
    72665114U,	// S2_asr_i_p
    72681498U,	// S2_asr_i_p_acc
    72697882U,	// S2_asr_i_p_and
    72714266U,	// S2_asr_i_p_nac
    72730650U,	// S2_asr_i_p_or
    72665114U,	// S2_asr_i_p_rnd
    5638170U,	// S2_asr_i_p_rnd_goodsyntax
    72665114U,	// S2_asr_i_r
    72681498U,	// S2_asr_i_r_acc
    72697882U,	// S2_asr_i_r_and
    72714266U,	// S2_asr_i_r_nac
    72730650U,	// S2_asr_i_r_or
    72665114U,	// S2_asr_i_r_rnd
    5638170U,	// S2_asr_i_r_rnd_goodsyntax
    72763418U,	// S2_asr_i_svw_trun
    72779802U,	// S2_asr_i_vh
    72763418U,	// S2_asr_i_vw
    55887898U,	// S2_asr_r_p
    55904282U,	// S2_asr_r_p_acc
    55920666U,	// S2_asr_r_p_and
    55937050U,	// S2_asr_r_p_nac
    55953434U,	// S2_asr_r_p_or
    5687322U,	// S2_asr_r_p_xor
    55887898U,	// S2_asr_r_r
    55904282U,	// S2_asr_r_r_acc
    55920666U,	// S2_asr_r_r_and
    55937050U,	// S2_asr_r_r_nac
    55953434U,	// S2_asr_r_r_or
    55887898U,	// S2_asr_r_r_sat
    55986202U,	// S2_asr_r_svw_trun
    56002586U,	// S2_asr_r_vh
    55986202U,	// S2_asr_r_vw
    5703706U,	// S2_brev
    5703706U,	// S2_brevp
    5720090U,	// S2_cabacdecbin
    5736474U,	// S2_cabacencbin
    5752858U,	// S2_cl0
    5752858U,	// S2_cl0p
    5769242U,	// S2_cl1
    5769242U,	// S2_cl1p
    5785626U,	// S2_clb
    5802010U,	// S2_clbnorm
    5785626U,	// S2_clbp
    72927258U,	// S2_clrbit_i
    56150042U,	// S2_clrbit_r
    5834778U,	// S2_ct0
    5834778U,	// S2_ct0p
    5851162U,	// S2_ct1
    5851162U,	// S2_ct1p
    5867546U,	// S2_deinterleave
    72992794U,	// S2_extractu
    56215578U,	// S2_extractu_rp
    72992794U,	// S2_extractup
    56215578U,	// S2_extractup_rp
    73009178U,	// S2_insert
    56231962U,	// S2_insert_rp
    73009178U,	// S2_insertp
    56231962U,	// S2_insertp_rp
    5916698U,	// S2_interleave
    5933082U,	// S2_lfsp
    5949466U,	// S2_lsl_r_p
    5965850U,	// S2_lsl_r_p_acc
    5982234U,	// S2_lsl_r_p_and
    5998618U,	// S2_lsl_r_p_nac
    6015002U,	// S2_lsl_r_p_or
    6031386U,	// S2_lsl_r_p_xor
    5949466U,	// S2_lsl_r_r
    5965850U,	// S2_lsl_r_r_acc
    5982234U,	// S2_lsl_r_r_and
    5998618U,	// S2_lsl_r_r_nac
    6015002U,	// S2_lsl_r_r_or
    6047770U,	// S2_lsl_r_vh
    6064154U,	// S2_lsl_r_vw
    73189402U,	// S2_lsr_i_p
    73205786U,	// S2_lsr_i_p_acc
    73222170U,	// S2_lsr_i_p_and
    73238554U,	// S2_lsr_i_p_nac
    73254938U,	// S2_lsr_i_p_or
    73271322U,	// S2_lsr_i_p_xacc
    73189402U,	// S2_lsr_i_r
    73205786U,	// S2_lsr_i_r_acc
    73222170U,	// S2_lsr_i_r_and
    73238554U,	// S2_lsr_i_r_nac
    73254938U,	// S2_lsr_i_r_or
    73271322U,	// S2_lsr_i_r_xacc
    73287706U,	// S2_lsr_i_vh
    73304090U,	// S2_lsr_i_vw
    56412186U,	// S2_lsr_r_p
    56428570U,	// S2_lsr_r_p_acc
    56444954U,	// S2_lsr_r_p_and
    56461338U,	// S2_lsr_r_p_nac
    56477722U,	// S2_lsr_r_p_or
    56494106U,	// S2_lsr_r_p_xor
    56412186U,	// S2_lsr_r_r
    56428570U,	// S2_lsr_r_r_acc
    56444954U,	// S2_lsr_r_r_and
    56461338U,	// S2_lsr_r_r_nac
    56477722U,	// S2_lsr_r_r_or
    56510490U,	// S2_lsr_r_vh
    56526874U,	// S2_lsr_r_vw
    6211610U,	// S2_packhl
    6227994U,	// S2_parityp
    39798883U,	// S2_pstorerbf_io
    325013603U,	// S2_pstorerbf_pi
    325029987U,	// S2_pstorerbfnew_pi
    39798883U,	// S2_pstorerbnewf_io
    325013603U,	// S2_pstorerbnewf_pi
    325029987U,	// S2_pstorerbnewfnew_pi
    39799169U,	// S2_pstorerbnewt_io
    325013889U,	// S2_pstorerbnewt_pi
    325030273U,	// S2_pstorerbnewtnew_pi
    39799169U,	// S2_pstorerbt_io
    325013889U,	// S2_pstorerbt_pi
    325030273U,	// S2_pstorerbtnew_pi
    39831651U,	// S2_pstorerdf_io
    325046371U,	// S2_pstorerdf_pi
    325062755U,	// S2_pstorerdfnew_pi
    39831937U,	// S2_pstorerdt_io
    325046657U,	// S2_pstorerdt_pi
    325063041U,	// S2_pstorerdtnew_pi
    39864419U,	// S2_pstorerff_io
    325079139U,	// S2_pstorerff_pi
    325095523U,	// S2_pstorerffnew_pi
    39864705U,	// S2_pstorerft_io
    325079425U,	// S2_pstorerft_pi
    325095809U,	// S2_pstorerftnew_pi
    39864419U,	// S2_pstorerhf_io
    325079139U,	// S2_pstorerhf_pi
    325095523U,	// S2_pstorerhfnew_pi
    39864419U,	// S2_pstorerhnewf_io
    325079139U,	// S2_pstorerhnewf_pi
    325095523U,	// S2_pstorerhnewfnew_pi
    39864705U,	// S2_pstorerhnewt_io
    325079425U,	// S2_pstorerhnewt_pi
    325095809U,	// S2_pstorerhnewtnew_pi
    39864705U,	// S2_pstorerht_io
    325079425U,	// S2_pstorerht_pi
    325095809U,	// S2_pstorerhtnew_pi
    39897187U,	// S2_pstorerif_io
    325111907U,	// S2_pstorerif_pi
    325128291U,	// S2_pstorerifnew_pi
    39897187U,	// S2_pstorerinewf_io
    325111907U,	// S2_pstorerinewf_pi
    325128291U,	// S2_pstorerinewfnew_pi
    39897473U,	// S2_pstorerinewt_io
    325112193U,	// S2_pstorerinewt_pi
    325128577U,	// S2_pstorerinewtnew_pi
    39897473U,	// S2_pstorerit_io
    325112193U,	// S2_pstorerit_pi
    325128577U,	// S2_pstoreritnew_pi
    73484314U,	// S2_setbit_i
    56707098U,	// S2_setbit_r
    6391834U,	// S2_shuffeb
    6408218U,	// S2_shuffeh
    6424602U,	// S2_shuffob
    6440986U,	// S2_shuffoh
    121309693U,	// S2_storerb_io
    241340925U,	// S2_storerb_pbr
    845337077U,	// S2_storerb_pbr_pseudo
    241373693U,	// S2_storerb_pci
    1315131893U,	// S2_storerb_pci_pseudo
    241406461U,	// S2_storerb_pcr
    325276157U,	// S2_storerb_pi
    325243389U,	// S2_storerb_pr
    2027855U,	// S2_storerbabs
    241420623U,	// S2_storerbgp
    121309693U,	// S2_storerbnew_io
    1331859965U,	// S2_storerbnew_pbr
    1331892733U,	// S2_storerbnew_pci
    1331925501U,	// S2_storerbnew_pcr
    325276157U,	// S2_storerbnew_pi
    325243389U,	// S2_storerbnew_pr
    1331939639U,	// S2_storerbnewabs
    1331939663U,	// S2_storerbnewgp
    121309733U,	// S2_storerd_io
    241340965U,	// S2_storerd_pbr
    845337117U,	// S2_storerd_pbr_pseudo
    241373733U,	// S2_storerd_pci
    1315131933U,	// S2_storerd_pci_pseudo
    241406501U,	// S2_storerd_pcr
    325276197U,	// S2_storerd_pi
    325243429U,	// S2_storerd_pr
    2027862U,	// S2_storerdabs
    241420630U,	// S2_storerdgp
    121309784U,	// S2_storerf_io
    1348637272U,	// S2_storerf_pbr
    845337168U,	// S2_storerf_pbr_pseudo
    1348670040U,	// S2_storerf_pci
    1315131984U,	// S2_storerf_pci_pseudo
    1348702808U,	// S2_storerf_pcr
    325276248U,	// S2_storerf_pi
    325243480U,	// S2_storerf_pr
    6566250U,	// S2_storerfabs
    1348716906U,	// S2_storerfgp
    121309784U,	// S2_storerh_io
    241341016U,	// S2_storerh_pbr
    845337168U,	// S2_storerh_pbr_pseudo
    241373784U,	// S2_storerh_pci
    1315131984U,	// S2_storerh_pci_pseudo
    241406552U,	// S2_storerh_pcr
    325276248U,	// S2_storerh_pi
    325243480U,	// S2_storerh_pr
    2027882U,	// S2_storerhabs
    241420650U,	// S2_storerhgp
    121309784U,	// S2_storerhnew_io
    1331860056U,	// S2_storerhnew_pbr
    1331892824U,	// S2_storerhnew_pci
    1331925592U,	// S2_storerhnew_pcr
    325276248U,	// S2_storerhnew_pi
    325243480U,	// S2_storerhnew_pr
    1331939647U,	// S2_storerhnewabs
    1331939690U,	// S2_storerhnewgp
    121310065U,	// S2_storeri_io
    241341297U,	// S2_storeri_pbr
    845337449U,	// S2_storeri_pbr_pseudo
    241374065U,	// S2_storeri_pci
    1315132265U,	// S2_storeri_pci_pseudo
    241406833U,	// S2_storeri_pcr
    325276529U,	// S2_storeri_pi
    325243761U,	// S2_storeri_pr
    2027898U,	// S2_storeriabs
    241420666U,	// S2_storerigp
    121310065U,	// S2_storerinew_io
    1331860337U,	// S2_storerinew_pbr
    1331893105U,	// S2_storerinew_pci
    1331925873U,	// S2_storerinew_pcr
    325276529U,	// S2_storerinew_pi
    325243761U,	// S2_storerinew_pr
    1331939655U,	// S2_storerinewabs
    1331939706U,	// S2_storerinewgp
    1361613328U,	// S2_storew_locked
    6572058U,	// S2_svsathb
    6588442U,	// S2_svsathub
    1382336538U,	// S2_tableidxb
    6604826U,	// S2_tableidxb_goodsyntax
    1382352922U,	// S2_tableidxd
    6621210U,	// S2_tableidxd_goodsyntax
    1382369306U,	// S2_tableidxh
    6637594U,	// S2_tableidxh_goodsyntax
    1382385690U,	// S2_tableidxw
    6653978U,	// S2_tableidxw_goodsyntax
    73779226U,	// S2_togglebit_i
    57002010U,	// S2_togglebit_r
    73795610U,	// S2_tstbit_i
    57018394U,	// S2_tstbit_r
    73811994U,	// S2_valignib
    57034778U,	// S2_valignrb
    6719514U,	// S2_vcnegh
    6735898U,	// S2_vcrotate
    6752282U,	// S2_vrcnegh
    6768666U,	// S2_vrndpackwh
    23545882U,	// S2_vrndpackwhs
    6572058U,	// S2_vsathb
    6572058U,	// S2_vsathb_nopack
    6588442U,	// S2_vsathub
    6588442U,	// S2_vsathub_nopack
    6785050U,	// S2_vsatwh
    6785050U,	// S2_vsatwh_nopack
    6801434U,	// S2_vsatwuh
    6801434U,	// S2_vsatwuh_nopack
    6817818U,	// S2_vsplatrb
    6834202U,	// S2_vsplatrh
    73959450U,	// S2_vspliceib
    57182234U,	// S2_vsplicerb
    6866970U,	// S2_vsxtbh
    6883354U,	// S2_vsxthw
    6899738U,	// S2_vtrunehb
    6916122U,	// S2_vtrunewh
    6932506U,	// S2_vtrunohb
    6948890U,	// S2_vtrunowh
    6965274U,	// S2_vzxtbh
    6981658U,	// S2_vzxthw
    33572890U,	// S4_addaddi
    1397524506U,	// S4_addi_asl_ri
    1414301722U,	// S4_addi_lsr_ri
    1399506970U,	// S4_andi_asl_ri
    1416284186U,	// S4_andi_lsr_ri
    7014426U,	// S4_clbaddi
    7014426U,	// S4_clbpaddi
    5802010U,	// S4_clbpnorm
    74139674U,	// S4_extract
    57362458U,	// S4_extract_rp
    74139674U,	// S4_extractp
    57362458U,	// S4_extractp_rp
    7047194U,	// S4_lsli
    74172442U,	// S4_ntstbit_i
    57395226U,	// S4_ntstbit_r
    72140826U,	// S4_or_andi
    537085978U,	// S4_or_andix
    72157210U,	// S4_or_ori
    1399588890U,	// S4_ori_asl_ri
    1416366106U,	// S4_ori_lsr_ri
    6227994U,	// S4_parity
    241977443U,	// S4_pstorerbf_abs
    39798883U,	// S4_pstorerbf_rr
    241993827U,	// S4_pstorerbfnew_abs
    39815267U,	// S4_pstorerbfnew_io
    39815267U,	// S4_pstorerbfnew_rr
    1332496483U,	// S4_pstorerbnewf_abs
    39798883U,	// S4_pstorerbnewf_rr
    1332512867U,	// S4_pstorerbnewfnew_abs
    39815267U,	// S4_pstorerbnewfnew_io
    39815267U,	// S4_pstorerbnewfnew_rr
    1332496769U,	// S4_pstorerbnewt_abs
    39799169U,	// S4_pstorerbnewt_rr
    1332513153U,	// S4_pstorerbnewtnew_abs
    39815553U,	// S4_pstorerbnewtnew_io
    39815553U,	// S4_pstorerbnewtnew_rr
    241977729U,	// S4_pstorerbt_abs
    39799169U,	// S4_pstorerbt_rr
    241994113U,	// S4_pstorerbtnew_abs
    39815553U,	// S4_pstorerbtnew_io
    39815553U,	// S4_pstorerbtnew_rr
    7129187U,	// S4_pstorerdf_abs
    39831651U,	// S4_pstorerdf_rr
    7145571U,	// S4_pstorerdfnew_abs
    39848035U,	// S4_pstorerdfnew_io
    39848035U,	// S4_pstorerdfnew_rr
    7129473U,	// S4_pstorerdt_abs
    39831937U,	// S4_pstorerdt_rr
    7145857U,	// S4_pstorerdtnew_abs
    39848321U,	// S4_pstorerdtnew_io
    39848321U,	// S4_pstorerdtnew_rr
    1349339235U,	// S4_pstorerff_abs
    39864419U,	// S4_pstorerff_rr
    1349355619U,	// S4_pstorerffnew_abs
    39880803U,	// S4_pstorerffnew_io
    39880803U,	// S4_pstorerffnew_rr
    1349339521U,	// S4_pstorerft_abs
    39864705U,	// S4_pstorerft_rr
    1349355905U,	// S4_pstorerftnew_abs
    39881089U,	// S4_pstorerftnew_io
    39881089U,	// S4_pstorerftnew_rr
    242042979U,	// S4_pstorerhf_abs
    39864419U,	// S4_pstorerhf_rr
    242059363U,	// S4_pstorerhfnew_abs
    39880803U,	// S4_pstorerhfnew_io
    39880803U,	// S4_pstorerhfnew_rr
    1332562019U,	// S4_pstorerhnewf_abs
    39864419U,	// S4_pstorerhnewf_rr
    1332578403U,	// S4_pstorerhnewfnew_abs
    39880803U,	// S4_pstorerhnewfnew_io
    39880803U,	// S4_pstorerhnewfnew_rr
    1332562305U,	// S4_pstorerhnewt_abs
    39864705U,	// S4_pstorerhnewt_rr
    1332578689U,	// S4_pstorerhnewtnew_abs
    39881089U,	// S4_pstorerhnewtnew_io
    39881089U,	// S4_pstorerhnewtnew_rr
    242043265U,	// S4_pstorerht_abs
    39864705U,	// S4_pstorerht_rr
    242059649U,	// S4_pstorerhtnew_abs
    39881089U,	// S4_pstorerhtnew_io
    39881089U,	// S4_pstorerhtnew_rr
    242075747U,	// S4_pstorerif_abs
    39897187U,	// S4_pstorerif_rr
    242092131U,	// S4_pstorerifnew_abs
    39913571U,	// S4_pstorerifnew_io
    39913571U,	// S4_pstorerifnew_rr
    1332594787U,	// S4_pstorerinewf_abs
    39897187U,	// S4_pstorerinewf_rr
    1332611171U,	// S4_pstorerinewfnew_abs
    39913571U,	// S4_pstorerinewfnew_io
    39913571U,	// S4_pstorerinewfnew_rr
    1332595073U,	// S4_pstorerinewt_abs
    39897473U,	// S4_pstorerinewt_rr
    1332611457U,	// S4_pstorerinewtnew_abs
    39913857U,	// S4_pstorerinewtnew_io
    39913857U,	// S4_pstorerinewtnew_rr
    242076033U,	// S4_pstorerit_abs
    39897473U,	// S4_pstorerit_rr
    242092417U,	// S4_pstoreritnew_abs
    39913857U,	// S4_pstoreritnew_io
    39913857U,	// S4_pstoreritnew_rr
    1361613315U,	// S4_stored_locked
    37423613U,	// S4_storeirb_io
    39798883U,	// S4_storeirbf_io
    39815267U,	// S4_storeirbfnew_io
    39799169U,	// S4_storeirbt_io
    39815553U,	// S4_storeirbtnew_io
    37423704U,	// S4_storeirh_io
    39864419U,	// S4_storeirhf_io
    39880803U,	// S4_storeirhfnew_io
    39864705U,	// S4_storeirht_io
    39881089U,	// S4_storeirhtnew_io
    37423985U,	// S4_storeiri_io
    39897187U,	// S4_storeirif_io
    39913571U,	// S4_storeirifnew_io
    39897473U,	// S4_storeirit_io
    39913857U,	// S4_storeiritnew_io
    118049277U,	// S4_storerb_ap
    242108925U,	// S4_storerb_rr
    242125309U,	// S4_storerb_ur
    118049277U,	// S4_storerbnew_ap
    1332627965U,	// S4_storerbnew_rr
    1332644349U,	// S4_storerbnew_ur
    118049317U,	// S4_storerd_ap
    242108965U,	// S4_storerd_rr
    242125349U,	// S4_storerd_ur
    118049368U,	// S4_storerf_ap
    1349405272U,	// S4_storerf_rr
    1349421656U,	// S4_storerf_ur
    118049368U,	// S4_storerh_ap
    242109016U,	// S4_storerh_rr
    242125400U,	// S4_storerh_ur
    118049368U,	// S4_storerhnew_ap
    1332628056U,	// S4_storerhnew_rr
    1332644440U,	// S4_storerhnew_ur
    118049649U,	// S4_storeri_ap
    242109297U,	// S4_storeri_rr
    242125681U,	// S4_storeri_ur
    118049649U,	// S4_storerinew_ap
    1332628337U,	// S4_storerinew_rr
    1332644721U,	// S4_storerinew_ur
    33572890U,	// S4_subaddi
    1392887834U,	// S4_subi_asl_ri
    1409665050U,	// S4_subi_lsr_ri
    7260186U,	// S4_vrcrotate
    7276570U,	// S4_vrcrotate_acc
    24070170U,	// S4_vxaddsubh
    1433356314U,	// S4_vxaddsubhr
    7309338U,	// S4_vxaddsubw
    24102938U,	// S4_vxsubaddh
    1433389082U,	// S4_vxsubaddhr
    7342106U,	// S4_vxsubaddw
    1383090202U,	// S5_asrhub_rnd_sat
    309348378U,	// S5_asrhub_rnd_sat_goodsyntax
    24135706U,	// S5_asrhub_sat
    7374874U,	// S5_popcountp
    72779802U,	// S5_vasrhrnd
    1448511514U,	// S5_vasrhrnd_goodsyntax
    7391258U,	// S6_rol_i_p
    7407642U,	// S6_rol_i_p_acc
    7424026U,	// S6_rol_i_p_and
    7440410U,	// S6_rol_i_p_nac
    7456794U,	// S6_rol_i_p_or
    7473178U,	// S6_rol_i_p_xacc
    7391258U,	// S6_rol_i_r
    7407642U,	// S6_rol_i_r_acc
    7424026U,	// S6_rol_i_r_and
    7440410U,	// S6_rol_i_r_nac
    7456794U,	// S6_rol_i_r_or
    7473178U,	// S6_rol_i_r_xacc
    2021449U,	// SAVE_REGISTERS_CALL_V4
    2021449U,	// SAVE_REGISTERS_CALL_V4_EXT
    1U,	// STriq_pred_V6
    1U,	// STriq_pred_V6_128B
    1U,	// STriq_pred_vec_V6
    1U,	// STriq_pred_vec_V6_128B
    1U,	// STriv_pseudo_V6
    1U,	// STriv_pseudo_V6_128B
    1463487077U,	// STrivv_indexed
    1480264293U,	// STrivv_indexed_128B
    1U,	// STrivv_pseudo_V6
    1U,	// STrivv_pseudo_V6_128B
    245U,	// STriw_pred
    0U,	// TCRETURNi
    2017372U,	// TCRETURNr
    7489562U,	// TFRI64_V2_ext
    34162714U,	// TFRI64_V4
    520327267U,	// TFRI_cNotPt_f
    520327553U,	// TFRI_cPt_f
    118048794U,	// TFRI_f
    0U,	// TFR_FI
    0U,	// TFR_FIA
    1360168986U,	// TFR_PdFalse
    0U,	// TFR_PdTrue
    33572890U,	// V4_SA1_addi
    33572890U,	// V4_SA1_addrx
    7505946U,	// V4_SA1_addsp
    1493207066U,	// V4_SA1_and1
    7522331U,	// V4_SA1_clrf
    7522350U,	// V4_SA1_clrfnew
    7522341U,	// V4_SA1_clrt
    7522364U,	// V4_SA1_clrtnew
    3213942U,	// V4_SA1_cmpeqi
    7538714U,	// V4_SA1_combine0i
    7555098U,	// V4_SA1_combine1i
    7571482U,	// V4_SA1_combine2i
    7587866U,	// V4_SA1_combine3i
    1510033434U,	// V4_SA1_combinerz
    7604250U,	// V4_SA1_combinezr
    33572890U,	// V4_SA1_dec
    33572890U,	// V4_SA1_inc
    118048794U,	// V4_SA1_seti
    7620634U,	// V4_SA1_setin1
    509978U,	// V4_SA1_sxtb
    526362U,	// V4_SA1_sxth
    235440154U,	// V4_SA1_tfr
    1526761498U,	// V4_SA1_zxtb
    1247258U,	// V4_SA1_zxth
    37308442U,	// V4_SL1_loadri_io
    37341210U,	// V4_SL1_loadrub_io
    1046U,	// V4_SL2_deallocframe
    906U,	// V4_SL2_jumpr31
    897U,	// V4_SL2_jumpr31_f
    934U,	// V4_SL2_jumpr31_fnew
    916U,	// V4_SL2_jumpr31_t
    960U,	// V4_SL2_jumpr31_tnew
    37210138U,	// V4_SL2_loadrb_io
    7637018U,	// V4_SL2_loadrd_sp
    37275674U,	// V4_SL2_loadrh_io
    7653402U,	// V4_SL2_loadri_sp
    37373978U,	// V4_SL2_loadruh_io
    1087U,	// V4_SL2_return
    1078U,	// V4_SL2_return_f
    1144U,	// V4_SL2_return_fnew
    1102U,	// V4_SL2_return_t
    1175U,	// V4_SL2_return_tnew
    1551174141U,	// V4_SS1_storeb_io
    1551174513U,	// V4_SS1_storew_io
    1427805U,	// V4_SS2_allocframe
    1567951357U,	// V4_SS2_storebi0
    1584728573U,	// V4_SS2_storebi1
    241420558U,	// V4_SS2_stored_sp
    1551174232U,	// V4_SS2_storeh_io
    241420571U,	// V4_SS2_storew_sp
    1567951729U,	// V4_SS2_storewi0
    1584728945U,	// V4_SS2_storewi1
    7686170U,	// V6_extractw
    7686170U,	// V6_extractw_128B
    7702554U,	// V6_lvsplatw
    7702554U,	// V6_lvsplatw_128B
    1593870362U,	// V6_pred_and
    1593870362U,	// V6_pred_and_128B
    1610647578U,	// V6_pred_and_n
    1610647578U,	// V6_pred_and_n_128B
    198682U,	// V6_pred_not
    198682U,	// V6_pred_not_128B
    1594050586U,	// V6_pred_or
    1594050586U,	// V6_pred_or_128B
    1610827802U,	// V6_pred_or_n
    1610827802U,	// V6_pred_or_n_128B
    7718938U,	// V6_pred_scalar2
    7718938U,	// V6_pred_scalar2_128B
    34768922U,	// V6_pred_xor
    34768922U,	// V6_pred_xor_128B
    41289754U,	// V6_vL32Ub_ai
    41289754U,	// V6_vL32Ub_ai_128B
    326502426U,	// V6_vL32Ub_pi
    326502426U,	// V6_vL32Ub_pi_128B
    326502426U,	// V6_vL32Ub_ppu
    41306138U,	// V6_vL32b_ai
    41306138U,	// V6_vL32b_ai_128B
    41322522U,	// V6_vL32b_cur_ai
    41322522U,	// V6_vL32b_cur_ai_128B
    326535194U,	// V6_vL32b_cur_pi
    326535194U,	// V6_vL32b_cur_pi_128B
    326535194U,	// V6_vL32b_cur_ppu
    41306138U,	// V6_vL32b_nt_ai
    41306138U,	// V6_vL32b_nt_ai_128B
    41322522U,	// V6_vL32b_nt_cur_ai
    41322522U,	// V6_vL32b_nt_cur_ai_128B
    326535194U,	// V6_vL32b_nt_cur_pi
    326535194U,	// V6_vL32b_nt_cur_pi_128B
    326535194U,	// V6_vL32b_nt_cur_ppu
    326518810U,	// V6_vL32b_nt_pi
    326518810U,	// V6_vL32b_nt_pi_128B
    326518810U,	// V6_vL32b_nt_ppu
    41338906U,	// V6_vL32b_nt_tmp_ai
    41338906U,	// V6_vL32b_nt_tmp_ai_128B
    326551578U,	// V6_vL32b_nt_tmp_pi
    326551578U,	// V6_vL32b_nt_tmp_pi_128B
    326551578U,	// V6_vL32b_nt_tmp_ppu
    326518810U,	// V6_vL32b_pi
    326518810U,	// V6_vL32b_pi_128B
    326518810U,	// V6_vL32b_ppu
    41338906U,	// V6_vL32b_tmp_ai
    41338906U,	// V6_vL32b_tmp_ai_128B
    326551578U,	// V6_vL32b_tmp_pi
    326551578U,	// V6_vL32b_tmp_pi_128B
    326551578U,	// V6_vL32b_tmp_ppu
    1463487262U,	// V6_vS32Ub_ai
    1480264478U,	// V6_vS32Ub_ai_128B
    41355363U,	// V6_vS32Ub_npred_ai
    41355363U,	// V6_vS32Ub_npred_ai_128B
    326570083U,	// V6_vS32Ub_npred_pi
    326570083U,	// V6_vS32Ub_npred_pi_128B
    326570083U,	// V6_vS32Ub_npred_ppu
    1633899294U,	// V6_vS32Ub_pi
    1650676510U,	// V6_vS32Ub_pi_128B
    325243678U,	// V6_vS32Ub_ppu
    41355649U,	// V6_vS32Ub_pred_ai
    41355649U,	// V6_vS32Ub_pred_ai_128B
    326570369U,	// V6_vS32Ub_pred_pi
    326570369U,	// V6_vS32Ub_pred_pi_128B
    326570369U,	// V6_vS32Ub_pred_ppu
    1463487078U,	// V6_vS32b_ai
    1480264294U,	// V6_vS32b_ai_128B
    1463487078U,	// V6_vS32b_new_ai
    1480264294U,	// V6_vS32b_new_ai_128B
    41371753U,	// V6_vS32b_new_npred_ai
    41371753U,	// V6_vS32b_new_npred_ai_128B
    326586473U,	// V6_vS32b_new_npred_pi
    326586473U,	// V6_vS32b_new_npred_pi_128B
    326586473U,	// V6_vS32b_new_npred_ppu
    1633899110U,	// V6_vS32b_new_pi
    1650676326U,	// V6_vS32b_new_pi_128B
    325243494U,	// V6_vS32b_new_ppu
    41372218U,	// V6_vS32b_new_pred_ai
    41372218U,	// V6_vS32b_new_pred_ai_128B
    326586938U,	// V6_vS32b_new_pred_pi
    326586938U,	// V6_vS32b_new_pred_pi_128B
    326586938U,	// V6_vS32b_new_pred_ppu
    41371747U,	// V6_vS32b_npred_ai
    41371747U,	// V6_vS32b_npred_ai_128B
    326586467U,	// V6_vS32b_npred_pi
    326586467U,	// V6_vS32b_npred_pi_128B
    326586467U,	// V6_vS32b_npred_ppu
    41371747U,	// V6_vS32b_nqpred_ai
    41371747U,	// V6_vS32b_nqpred_ai_128B
    326586467U,	// V6_vS32b_nqpred_pi
    326586467U,	// V6_vS32b_nqpred_pi_128B
    326586467U,	// V6_vS32b_nqpred_ppu
    1463487078U,	// V6_vS32b_nt_ai
    1480264294U,	// V6_vS32b_nt_ai_128B
    1463487078U,	// V6_vS32b_nt_new_ai
    1480264294U,	// V6_vS32b_nt_new_ai_128B
    41371753U,	// V6_vS32b_nt_new_npred_ai
    41371753U,	// V6_vS32b_nt_new_npred_ai_128B
    326586473U,	// V6_vS32b_nt_new_npred_pi
    326586473U,	// V6_vS32b_nt_new_npred_pi_128B
    326586473U,	// V6_vS32b_nt_new_npred_ppu
    1633899110U,	// V6_vS32b_nt_new_pi
    1650676326U,	// V6_vS32b_nt_new_pi_128B
    325243494U,	// V6_vS32b_nt_new_ppu
    41372218U,	// V6_vS32b_nt_new_pred_ai
    41372218U,	// V6_vS32b_nt_new_pred_ai_128B
    326586938U,	// V6_vS32b_nt_new_pred_pi
    326586938U,	// V6_vS32b_nt_new_pred_pi_128B
    326586938U,	// V6_vS32b_nt_new_pred_ppu
    41371747U,	// V6_vS32b_nt_npred_ai
    41371747U,	// V6_vS32b_nt_npred_ai_128B
    326586467U,	// V6_vS32b_nt_npred_pi
    326586467U,	// V6_vS32b_nt_npred_pi_128B
    326586467U,	// V6_vS32b_nt_npred_ppu
    41371747U,	// V6_vS32b_nt_nqpred_ai
    41371747U,	// V6_vS32b_nt_nqpred_ai_128B
    326586467U,	// V6_vS32b_nt_nqpred_pi
    326586467U,	// V6_vS32b_nt_nqpred_pi_128B
    326586467U,	// V6_vS32b_nt_nqpred_ppu
    1633899110U,	// V6_vS32b_nt_pi
    1650676326U,	// V6_vS32b_nt_pi_128B
    325243494U,	// V6_vS32b_nt_ppu
    41372033U,	// V6_vS32b_nt_pred_ai
    41372033U,	// V6_vS32b_nt_pred_ai_128B
    326586753U,	// V6_vS32b_nt_pred_pi
    326586753U,	// V6_vS32b_nt_pred_pi_128B
    326586753U,	// V6_vS32b_nt_pred_ppu
    41372033U,	// V6_vS32b_nt_qpred_ai
    41372033U,	// V6_vS32b_nt_qpred_ai_128B
    326586753U,	// V6_vS32b_nt_qpred_pi
    326586753U,	// V6_vS32b_nt_qpred_pi_128B
    326586753U,	// V6_vS32b_nt_qpred_ppu
    1633899110U,	// V6_vS32b_pi
    1650676326U,	// V6_vS32b_pi_128B
    325243494U,	// V6_vS32b_ppu
    41372033U,	// V6_vS32b_pred_ai
    41372033U,	// V6_vS32b_pred_ai_128B
    326586753U,	// V6_vS32b_pred_pi
    326586753U,	// V6_vS32b_pred_pi_128B
    326586753U,	// V6_vS32b_pred_ppu
    41372033U,	// V6_vS32b_qpred_ai
    41372033U,	// V6_vS32b_qpred_ai_128B
    326586753U,	// V6_vS32b_qpred_pi
    326586753U,	// V6_vS32b_qpred_pi_128B
    326586753U,	// V6_vS32b_qpred_ppu
    1668778010U,	// V6_vabsdiffh
    1668778010U,	// V6_vabsdiffh_128B
    7850010U,	// V6_vabsdiffub
    7850010U,	// V6_vabsdiffub_128B
    1685555226U,	// V6_vabsdiffuh
    1685555226U,	// V6_vabsdiffuh_128B
    7866394U,	// V6_vabsdiffw
    7866394U,	// V6_vabsdiffw_128B
    1702381594U,	// V6_vabsh
    1702381594U,	// V6_vabsh_128B
    1719158810U,	// V6_vabsh_sat
    1719158810U,	// V6_vabsh_sat_128B
    1735952410U,	// V6_vabsw
    1735952410U,	// V6_vabsw_128B
    1752729626U,	// V6_vabsw_sat
    1752729626U,	// V6_vabsw_sat_128B
    7915546U,	// V6_vaddb
    7915546U,	// V6_vaddb_128B
    7915546U,	// V6_vaddb_dv
    7915546U,	// V6_vaddb_dv_128B
    1761841251U,	// V6_vaddbnq
    1761841251U,	// V6_vaddbnq_128B
    1761841537U,	// V6_vaddbq
    1761841537U,	// V6_vaddbq_128B
    1668876314U,	// V6_vaddh
    1668876314U,	// V6_vaddh_128B
    1668876314U,	// V6_vaddh_dv
    1668876314U,	// V6_vaddh_dv_128B
    1778618467U,	// V6_vaddhnq
    1778618467U,	// V6_vaddhnq_128B
    1778618753U,	// V6_vaddhq
    1778618753U,	// V6_vaddhq_128B
    1668876314U,	// V6_vaddhsat
    1668876314U,	// V6_vaddhsat_128B
    1668876314U,	// V6_vaddhsat_dv
    1668876314U,	// V6_vaddhsat_dv_128B
    1668892698U,	// V6_vaddhw
    1668892698U,	// V6_vaddhw_128B
    1803094042U,	// V6_vaddubh
    1803094042U,	// V6_vaddubh_128B
    7964698U,	// V6_vaddubsat
    7964698U,	// V6_vaddubsat_128B
    7964698U,	// V6_vaddubsat_dv
    7964698U,	// V6_vaddubsat_dv_128B
    7981082U,	// V6_vadduhsat
    7981082U,	// V6_vadduhsat_128B
    7981082U,	// V6_vadduhsat_dv
    7981082U,	// V6_vadduhsat_dv_128B
    1685669914U,	// V6_vadduhw
    1685669914U,	// V6_vadduhw_128B
    1819887642U,	// V6_vaddw
    1819887642U,	// V6_vaddw_128B
    1819887642U,	// V6_vaddw_dv
    1819887642U,	// V6_vaddw_dv_128B
    1828950115U,	// V6_vaddwnq
    1828950115U,	// V6_vaddwnq_128B
    1828950401U,	// V6_vaddwq
    1828950401U,	// V6_vaddwq_128B
    1819887642U,	// V6_vaddwsat
    1819887642U,	// V6_vaddwsat_128B
    1819887642U,	// V6_vaddwsat_dv
    1819887642U,	// V6_vaddwsat_dv_128B
    1601832986U,	// V6_valignb
    1601832986U,	// V6_valignb_128B
    1450838042U,	// V6_valignbi
    1450838042U,	// V6_valignbi_128B
    8013850U,	// V6_vand
    8013850U,	// V6_vand_128B
    8013850U,	// V6_vandqrt
    8013850U,	// V6_vandqrt_128B
    8030234U,	// V6_vandqrt_acc
    8030234U,	// V6_vandqrt_acc_128B
    8013850U,	// V6_vandvrt
    8013850U,	// V6_vandvrt_128B
    8030234U,	// V6_vandvrt_acc
    8030234U,	// V6_vandvrt_acc_128B
    8046618U,	// V6_vaslh
    8046618U,	// V6_vaslh_128B
    1702545434U,	// V6_vaslhv
    1702545434U,	// V6_vaslhv_128B
    8063002U,	// V6_vaslw
    8063002U,	// V6_vaslw_128B
    8079386U,	// V6_vaslw_acc
    8079386U,	// V6_vaslw_acc_128B
    1736116250U,	// V6_vaslwv
    1736116250U,	// V6_vaslwv_128B
    1669040154U,	// V6_vasrh
    1669040154U,	// V6_vasrh_128B
    8112154U,	// V6_vasrhbrndsat
    8112154U,	// V6_vasrhbrndsat_128B
    310118426U,	// V6_vasrhubrndsat
    310118426U,	// V6_vasrhubrndsat_128B
    24905754U,	// V6_vasrhubsat
    24905754U,	// V6_vasrhubsat_128B
    1669040154U,	// V6_vasrhv
    1669040154U,	// V6_vasrhv_128B
    8144922U,	// V6_vasrw
    8144922U,	// V6_vasrw_128B
    8161306U,	// V6_vasrw_acc
    8161306U,	// V6_vasrw_acc_128B
    1820035098U,	// V6_vasrwh
    1820035098U,	// V6_vasrwh_128B
    1820035098U,	// V6_vasrwhrndsat
    1820035098U,	// V6_vasrwhrndsat_128B
    1820035098U,	// V6_vasrwhsat
    1820035098U,	// V6_vasrwhsat_128B
    8177690U,	// V6_vasrwuhsat
    8177690U,	// V6_vasrwuhsat_128B
    1736198170U,	// V6_vasrwv
    1736198170U,	// V6_vasrwv_128B
    235440154U,	// V6_vassign
    235440154U,	// V6_vassign_128B
    1702692890U,	// V6_vavgh
    1702692890U,	// V6_vavgh_128B
    1853687834U,	// V6_vavghrnd
    1853687834U,	// V6_vavghrnd_128B
    1870481434U,	// V6_vavgub
    1870481434U,	// V6_vavgub_128B
    1887258650U,	// V6_vavgubrnd
    1887258650U,	// V6_vavgubrnd_128B
    1904052250U,	// V6_vavguh
    1904052250U,	// V6_vavguh_128B
    1920829466U,	// V6_vavguhrnd
    1920829466U,	// V6_vavguhrnd_128B
    1736296474U,	// V6_vavgw
    1736296474U,	// V6_vavgw_128B
    1937623066U,	// V6_vavgwrnd
    1937623066U,	// V6_vavgwrnd_128B
    1946390913U,	// V6_vccombine
    1946390913U,	// V6_vccombine_128B
    8259610U,	// V6_vcl0h
    8259610U,	// V6_vcl0h_128B
    8275994U,	// V6_vcl0w
    8275994U,	// V6_vcl0w_128B
    251892097U,	// V6_vcmov
    251892097U,	// V6_vcmov_128B
    8292378U,	// V6_vcombine
    8292378U,	// V6_vcombine_128B
    840542814U,	// V6_vdeal
    840542814U,	// V6_vdeal_128B
    8308762U,	// V6_vdealb
    8325146U,	// V6_vdealb4w
    8325146U,	// V6_vdealb4w_128B
    8308762U,	// V6_vdealb_128B
    8341530U,	// V6_vdealh
    8341530U,	// V6_vdealh_128B
    8357914U,	// V6_vdealvdd
    8357914U,	// V6_vdealvdd_128B
    8374298U,	// V6_vdelta
    8374298U,	// V6_vdelta_128B
    8390682U,	// V6_vdmpybus
    8390682U,	// V6_vdmpybus_128B
    8407066U,	// V6_vdmpybus_acc
    8407066U,	// V6_vdmpybus_acc_128B
    8390682U,	// V6_vdmpybus_dv
    8390682U,	// V6_vdmpybus_dv_128B
    8407066U,	// V6_vdmpybus_dv_acc
    8407066U,	// V6_vdmpybus_dv_acc_128B
    1971357722U,	// V6_vdmpyhb
    1971357722U,	// V6_vdmpyhb_128B
    1971374106U,	// V6_vdmpyhb_acc
    1971374106U,	// V6_vdmpyhb_acc_128B
    1971357722U,	// V6_vdmpyhb_dv
    1971357722U,	// V6_vdmpyhb_dv_128B
    1971374106U,	// V6_vdmpyhb_dv_acc
    1971374106U,	// V6_vdmpyhb_dv_acc_128B
    1719699482U,	// V6_vdmpyhisat
    1719699482U,	// V6_vdmpyhisat_128B
    1719715866U,	// V6_vdmpyhisat_acc
    1719715866U,	// V6_vdmpyhisat_acc_128B
    1719699482U,	// V6_vdmpyhsat
    1719699482U,	// V6_vdmpyhsat_128B
    1719715866U,	// V6_vdmpyhsat_acc
    1719715866U,	// V6_vdmpyhsat_acc_128B
    1988134938U,	// V6_vdmpyhsuisat
    1988134938U,	// V6_vdmpyhsuisat_128B
    1988151322U,	// V6_vdmpyhsuisat_acc
    1988151322U,	// V6_vdmpyhsuisat_acc_128B
    2004912154U,	// V6_vdmpyhsusat
    2004912154U,	// V6_vdmpyhsusat_128B
    2004928538U,	// V6_vdmpyhsusat_acc
    2004928538U,	// V6_vdmpyhsusat_acc_128B
    1719699482U,	// V6_vdmpyhvsat
    1719699482U,	// V6_vdmpyhvsat_128B
    1719715866U,	// V6_vdmpyhvsat_acc
    1719715866U,	// V6_vdmpyhvsat_acc_128B
    8456218U,	// V6_vdsaduh
    8456218U,	// V6_vdsaduh_128B
    8472602U,	// V6_vdsaduh_acc
    8472602U,	// V6_vdsaduh_acc_128B
    2021754906U,	// V6_veqb
    2021754906U,	// V6_veqb_128B
    2021771290U,	// V6_veqb_and
    2021771290U,	// V6_veqb_and_128B
    2021787674U,	// V6_veqb_or
    2021787674U,	// V6_veqb_or_128B
    2021804058U,	// V6_veqb_xor
    2021804058U,	// V6_veqb_xor_128B
    1669433370U,	// V6_veqh
    1669433370U,	// V6_veqh_128B
    1669449754U,	// V6_veqh_and
    1669449754U,	// V6_veqh_and_128B
    1669466138U,	// V6_veqh_or
    1669466138U,	// V6_veqh_or_128B
    1669482522U,	// V6_veqh_xor
    1669482522U,	// V6_veqh_xor_128B
    1820428314U,	// V6_veqw
    1820428314U,	// V6_veqw_128B
    1820444698U,	// V6_veqw_and
    1820444698U,	// V6_veqw_and_128B
    1820461082U,	// V6_veqw_or
    1820461082U,	// V6_veqw_or_128B
    1820477466U,	// V6_veqw_xor
    1820477466U,	// V6_veqw_xor_128B
    2021820442U,	// V6_vgtb
    2021820442U,	// V6_vgtb_128B
    2021836826U,	// V6_vgtb_and
    2021836826U,	// V6_vgtb_and_128B
    2021853210U,	// V6_vgtb_or
    2021853210U,	// V6_vgtb_or_128B
    2021869594U,	// V6_vgtb_xor
    2021869594U,	// V6_vgtb_xor_128B
    1669498906U,	// V6_vgth
    1669498906U,	// V6_vgth_128B
    1669515290U,	// V6_vgth_and
    1669515290U,	// V6_vgth_and_128B
    1669531674U,	// V6_vgth_or
    1669531674U,	// V6_vgth_or_128B
    1669548058U,	// V6_vgth_xor
    1669548058U,	// V6_vgth_xor_128B
    1803716634U,	// V6_vgtub
    1803716634U,	// V6_vgtub_128B
    1803733018U,	// V6_vgtub_and
    1803733018U,	// V6_vgtub_and_128B
    1803749402U,	// V6_vgtub_or
    1803749402U,	// V6_vgtub_or_128B
    1803765786U,	// V6_vgtub_xor
    1803765786U,	// V6_vgtub_xor_128B
    1686276122U,	// V6_vgtuh
    1686276122U,	// V6_vgtuh_128B
    1686292506U,	// V6_vgtuh_and
    1686292506U,	// V6_vgtuh_and_128B
    1686308890U,	// V6_vgtuh_or
    1686308890U,	// V6_vgtuh_or_128B
    1686325274U,	// V6_vgtuh_xor
    1686325274U,	// V6_vgtuh_xor_128B
    2038597658U,	// V6_vgtuw
    2038597658U,	// V6_vgtuw_128B
    2038614042U,	// V6_vgtuw_and
    2038614042U,	// V6_vgtuw_and_128B
    2038630426U,	// V6_vgtuw_or
    2038630426U,	// V6_vgtuw_or_128B
    2038646810U,	// V6_vgtuw_xor
    2038646810U,	// V6_vgtuw_xor_128B
    1820493850U,	// V6_vgtw
    1820493850U,	// V6_vgtw_128B
    1820510234U,	// V6_vgtw_and
    1820510234U,	// V6_vgtw_and_128B
    1820526618U,	// V6_vgtw_or
    1820526618U,	// V6_vgtw_or_128B
    1820543002U,	// V6_vgtw_xor
    1820543002U,	// V6_vgtw_xor_128B
    1205U,	// V6_vhist
    1428247U,	// V6_vhistq
    8620058U,	// V6_vinsertwr
    8620058U,	// V6_vinsertwr_128B
    1602471962U,	// V6_vlalignb
    1602471962U,	// V6_vlalignb_128B
    1451477018U,	// V6_vlalignbi
    1451477018U,	// V6_vlalignbi_128B
    8652826U,	// V6_vlsrh
    8652826U,	// V6_vlsrh_128B
    8669210U,	// V6_vlsrhv
    8669210U,	// V6_vlsrhv_128B
    8685594U,	// V6_vlsrw
    8685594U,	// V6_vlsrw_128B
    8701978U,	// V6_vlsrwv
    8701978U,	// V6_vlsrwv_128B
    8718362U,	// V6_vlutvvb
    8718362U,	// V6_vlutvvb_128B
    8734746U,	// V6_vlutvvb_oracc
    8734746U,	// V6_vlutvvb_oracc_128B
    8751130U,	// V6_vlutvwh
    8751130U,	// V6_vlutvwh_128B
    8767514U,	// V6_vlutvwh_oracc
    8767514U,	// V6_vlutvwh_oracc_128B
    8783898U,	// V6_vmaxh
    8783898U,	// V6_vmaxh_128B
    8800282U,	// V6_vmaxub
    8800282U,	// V6_vmaxub_128B
    8816666U,	// V6_vmaxuh
    8816666U,	// V6_vmaxuh_128B
    8833050U,	// V6_vmaxw
    8833050U,	// V6_vmaxw_128B
    8849434U,	// V6_vminh
    8849434U,	// V6_vminh_128B
    8865818U,	// V6_vminub
    8865818U,	// V6_vminub_128B
    8882202U,	// V6_vminuh
    8882202U,	// V6_vminuh_128B
    8898586U,	// V6_vminw
    8898586U,	// V6_vminw_128B
    1971849242U,	// V6_vmpabus
    1971849242U,	// V6_vmpabus_128B
    8931354U,	// V6_vmpabus_acc
    8931354U,	// V6_vmpabus_acc_128B
    1971849242U,	// V6_vmpabusv
    1971849242U,	// V6_vmpabusv_128B
    1871185946U,	// V6_vmpabuuv
    1871185946U,	// V6_vmpabuuv_128B
    8947738U,	// V6_vmpahb
    8947738U,	// V6_vmpahb_128B
    8964122U,	// V6_vmpahb_acc
    8964122U,	// V6_vmpahb_acc_128B
    1804142618U,	// V6_vmpybus
    1804142618U,	// V6_vmpybus_128B
    1804159002U,	// V6_vmpybus_acc
    1804159002U,	// V6_vmpybus_acc_128B
    1804142618U,	// V6_vmpybusv
    1804142618U,	// V6_vmpybusv_128B
    1804159002U,	// V6_vmpybusv_acc
    1804159002U,	// V6_vmpybusv_acc_128B
    2022246426U,	// V6_vmpybv
    2022246426U,	// V6_vmpybv_128B
    2022262810U,	// V6_vmpybv_acc
    2022262810U,	// V6_vmpybv_acc_128B
    9013274U,	// V6_vmpyewuh
    9013274U,	// V6_vmpyewuh_128B
    1703528474U,	// V6_vmpyh
    1703528474U,	// V6_vmpyh_128B
    1720322074U,	// V6_vmpyhsat_acc
    1720322074U,	// V6_vmpyhsat_acc_128B
    1669924890U,	// V6_vmpyhsrs
    1669924890U,	// V6_vmpyhsrs_128B
    1669924890U,	// V6_vmpyhss
    1669924890U,	// V6_vmpyhss_128B
    1904855066U,	// V6_vmpyhus
    1904855066U,	// V6_vmpyhus_128B
    1904871450U,	// V6_vmpyhus_acc
    1904871450U,	// V6_vmpyhus_acc_128B
    1703528474U,	// V6_vmpyhv
    1703528474U,	// V6_vmpyhv_128B
    1703544858U,	// V6_vmpyhv_acc
    1703544858U,	// V6_vmpyhv_acc_128B
    1669924890U,	// V6_vmpyhvsrs
    1669924890U,	// V6_vmpyhvsrs_128B
    9062426U,	// V6_vmpyieoh
    9062426U,	// V6_vmpyieoh_128B
    1703577626U,	// V6_vmpyiewh_acc
    1703577626U,	// V6_vmpyiewh_acc_128B
    9095194U,	// V6_vmpyiewuh
    9095194U,	// V6_vmpyiewuh_128B
    1904904218U,	// V6_vmpyiewuh_acc
    1904904218U,	// V6_vmpyiewuh_acc_128B
    1703610394U,	// V6_vmpyih
    1703610394U,	// V6_vmpyih_128B
    1703626778U,	// V6_vmpyih_acc
    1703626778U,	// V6_vmpyih_acc_128B
    1972045850U,	// V6_vmpyihb
    1972045850U,	// V6_vmpyihb_128B
    1972062234U,	// V6_vmpyihb_acc
    1972062234U,	// V6_vmpyihb_acc_128B
    9144346U,	// V6_vmpyiowh
    9144346U,	// V6_vmpyiowh_128B
    1972095002U,	// V6_vmpyiwb
    1972095002U,	// V6_vmpyiwb_128B
    1972111386U,	// V6_vmpyiwb_acc
    1972111386U,	// V6_vmpyiwb_acc_128B
    1703659546U,	// V6_vmpyiwh
    1703659546U,	// V6_vmpyiwh_128B
    1703675930U,	// V6_vmpyiwh_acc
    1703675930U,	// V6_vmpyiwh_acc_128B
    2056013850U,	// V6_vmpyowh
    2056013850U,	// V6_vmpyowh_128B
    2072791066U,	// V6_vmpyowh_rnd
    2072791066U,	// V6_vmpyowh_rnd_128B
    2089584666U,	// V6_vmpyowh_rnd_sacc
    2089584666U,	// V6_vmpyowh_rnd_sacc_128B
    2106361882U,	// V6_vmpyowh_sacc
    2106361882U,	// V6_vmpyowh_sacc_128B
    9226266U,	// V6_vmpyub
    9226266U,	// V6_vmpyub_128B
    9242650U,	// V6_vmpyub_acc
    9242650U,	// V6_vmpyub_acc_128B
    9226266U,	// V6_vmpyubv
    9226266U,	// V6_vmpyubv_128B
    9242650U,	// V6_vmpyubv_acc
    9242650U,	// V6_vmpyubv_acc_128B
    9259034U,	// V6_vmpyuh
    9259034U,	// V6_vmpyuh_128B
    9275418U,	// V6_vmpyuh_acc
    9275418U,	// V6_vmpyuh_acc_128B
    9259034U,	// V6_vmpyuhv
    9259034U,	// V6_vmpyuhv_128B
    9275418U,	// V6_vmpyuhv_acc
    9275418U,	// V6_vmpyuhv_acc_128B
    1595721754U,	// V6_vmux
    1595721754U,	// V6_vmux_128B
    9291802U,	// V6_vnavgh
    9291802U,	// V6_vnavgh_128B
    9308186U,	// V6_vnavgub
    9308186U,	// V6_vnavgub_128B
    9324570U,	// V6_vnavgw
    9324570U,	// V6_vnavgw_128B
    1946390627U,	// V6_vnccombine
    1946390627U,	// V6_vnccombine_128B
    251891811U,	// V6_vncmov
    251891811U,	// V6_vncmov_128B
    9340954U,	// V6_vnormamth
    9340954U,	// V6_vnormamth_128B
    9357338U,	// V6_vnormamtw
    9357338U,	// V6_vnormamtw_128B
    9373722U,	// V6_vnot
    9373722U,	// V6_vnot_128B
    9390106U,	// V6_vor
    9390106U,	// V6_vor_128B
    9406490U,	// V6_vpackeb
    9406490U,	// V6_vpackeb_128B
    9422874U,	// V6_vpackeh
    9422874U,	// V6_vpackeh_128B
    9439258U,	// V6_vpackhb_sat
    9439258U,	// V6_vpackhb_sat_128B
    9455642U,	// V6_vpackhub_sat
    9455642U,	// V6_vpackhub_sat_128B
    9472026U,	// V6_vpackob
    9472026U,	// V6_vpackob_128B
    9488410U,	// V6_vpackoh
    9488410U,	// V6_vpackoh_128B
    9504794U,	// V6_vpackwh_sat
    9504794U,	// V6_vpackwh_sat_128B
    9521178U,	// V6_vpackwuh_sat
    9521178U,	// V6_vpackwuh_sat_128B
    9537562U,	// V6_vpopcounth
    9537562U,	// V6_vpopcounth_128B
    9553946U,	// V6_vrdelta
    9553946U,	// V6_vrdelta_128B
    1804732442U,	// V6_vrmpybus
    1804732442U,	// V6_vrmpybus_128B
    1804748826U,	// V6_vrmpybus_acc
    1804748826U,	// V6_vrmpybus_acc_128B
    1804732442U,	// V6_vrmpybusi
    1804732442U,	// V6_vrmpybusi_128B
    1804748826U,	// V6_vrmpybusi_acc
    1804748826U,	// V6_vrmpybusi_acc_128B
    1804732442U,	// V6_vrmpybusv
    1804732442U,	// V6_vrmpybusv_128B
    1804748826U,	// V6_vrmpybusv_acc
    1804748826U,	// V6_vrmpybusv_acc_128B
    2022836250U,	// V6_vrmpybv
    2022836250U,	// V6_vrmpybv_128B
    2022852634U,	// V6_vrmpybv_acc
    2022852634U,	// V6_vrmpybv_acc_128B
    1871874074U,	// V6_vrmpyub
    1871874074U,	// V6_vrmpyub_128B
    1871890458U,	// V6_vrmpyub_acc
    1871890458U,	// V6_vrmpyub_acc_128B
    2123532314U,	// V6_vrmpyubi
    2123532314U,	// V6_vrmpyubi_128B
    2123548698U,	// V6_vrmpyubi_acc
    2123548698U,	// V6_vrmpyubi_acc_128B
    1871874074U,	// V6_vrmpyubv
    1871874074U,	// V6_vrmpyubv_128B
    1871890458U,	// V6_vrmpyubv_acc
    1871890458U,	// V6_vrmpyubv_acc_128B
    9635866U,	// V6_vror
    9635866U,	// V6_vror_128B
    9652250U,	// V6_vroundhb
    9652250U,	// V6_vroundhb_128B
    9668634U,	// V6_vroundhub
    9668634U,	// V6_vroundhub_128B
    9685018U,	// V6_vroundwh
    9685018U,	// V6_vroundwh_128B
    9701402U,	// V6_vroundwuh
    9701402U,	// V6_vroundwuh_128B
    9717786U,	// V6_vrsadubi
    9717786U,	// V6_vrsadubi_128B
    9734170U,	// V6_vrsadubi_acc
    9734170U,	// V6_vrsadubi_acc_128B
    9750554U,	// V6_vsathub
    9750554U,	// V6_vsathub_128B
    9766938U,	// V6_vsatwh
    9766938U,	// V6_vsatwh_128B
    9783322U,	// V6_vsb
    9783322U,	// V6_vsb_128B
    9799706U,	// V6_vsh
    9799706U,	// V6_vsh_128B
    9816090U,	// V6_vshufeh
    9816090U,	// V6_vshufeh_128B
    840542770U,	// V6_vshuff
    840542770U,	// V6_vshuff_128B
    9832474U,	// V6_vshuffb
    9832474U,	// V6_vshuffb_128B
    9848858U,	// V6_vshuffeb
    9848858U,	// V6_vshuffeb_128B
    9865242U,	// V6_vshuffh
    9865242U,	// V6_vshuffh_128B
    9881626U,	// V6_vshuffob
    9881626U,	// V6_vshuffob_128B
    9898010U,	// V6_vshuffvdd
    9898010U,	// V6_vshuffvdd_128B
    9914394U,	// V6_vshufoeb
    9914394U,	// V6_vshufoeb_128B
    9930778U,	// V6_vshufoeh
    9930778U,	// V6_vshufoeh_128B
    9947162U,	// V6_vshufoh
    9947162U,	// V6_vshufoh_128B
    9963546U,	// V6_vsubb
    9963546U,	// V6_vsubb_128B
    9963546U,	// V6_vsubb_dv
    9963546U,	// V6_vsubb_dv_128B
    2130940003U,	// V6_vsubbnq
    2130940003U,	// V6_vsubbnq_128B
    2130940289U,	// V6_vsubbq
    2130940289U,	// V6_vsubbq_128B
    1670924314U,	// V6_vsubh
    1670924314U,	// V6_vsubh_128B
    1670924314U,	// V6_vsubh_dv
    1670924314U,	// V6_vsubh_dv_128B
    2147717219U,	// V6_vsubhnq
    2147717219U,	// V6_vsubhnq_128B
    2147717505U,	// V6_vsubhq
    2147717505U,	// V6_vsubhq_128B
    1670924314U,	// V6_vsubhsat
    1670924314U,	// V6_vsubhsat_128B
    1670924314U,	// V6_vsubhsat_dv
    1670924314U,	// V6_vsubhsat_dv_128B
    1670940698U,	// V6_vsubhw
    1670940698U,	// V6_vsubhw_128B
    1805142042U,	// V6_vsububh
    1805142042U,	// V6_vsububh_128B
    10012698U,	// V6_vsububsat
    10012698U,	// V6_vsububsat_128B
    10012698U,	// V6_vsububsat_dv
    10012698U,	// V6_vsububsat_dv_128B
    10029082U,	// V6_vsubuhsat
    10029082U,	// V6_vsubuhsat_128B
    10029082U,	// V6_vsubuhsat_dv
    10029082U,	// V6_vsubuhsat_dv_128B
    1687717914U,	// V6_vsubuhw
    1687717914U,	// V6_vsubuhw_128B
    1821935642U,	// V6_vsubw
    1821935642U,	// V6_vsubw_128B
    1821935642U,	// V6_vsubw_dv
    1821935642U,	// V6_vsubw_dv_128B
    2164494435U,	// V6_vsubwnq
    2164494435U,	// V6_vsubwnq_128B
    2164494721U,	// V6_vsubwq
    2164494721U,	// V6_vsubwq_128B
    1821935642U,	// V6_vsubwsat
    1821935642U,	// V6_vsubwsat_128B
    1821935642U,	// V6_vsubwsat_dv
    1821935642U,	// V6_vsubwsat_dv_128B
    10045466U,	// V6_vswap
    10045466U,	// V6_vswap_128B
    2023327770U,	// V6_vtmpyb
    2023327770U,	// V6_vtmpyb_128B
    2023344154U,	// V6_vtmpyb_acc
    2023344154U,	// V6_vtmpyb_acc_128B
    1805223962U,	// V6_vtmpybus
    1805223962U,	// V6_vtmpybus_128B
    1805240346U,	// V6_vtmpybus_acc
    1805240346U,	// V6_vtmpybus_acc_128B
    10094618U,	// V6_vtmpyhb
    10094618U,	// V6_vtmpyhb_128B
    10111002U,	// V6_vtmpyhb_acc
    10111002U,	// V6_vtmpyhb_acc_128B
    10127386U,	// V6_vunpackb
    10127386U,	// V6_vunpackb_128B
    10143770U,	// V6_vunpackh
    10143770U,	// V6_vunpackh_128B
    10160154U,	// V6_vunpackob
    10160154U,	// V6_vunpackob_128B
    10176538U,	// V6_vunpackoh
    10176538U,	// V6_vunpackoh_128B
    10192922U,	// V6_vunpackub
    10192922U,	// V6_vunpackub_128B
    10209306U,	// V6_vunpackuh
    10209306U,	// V6_vunpackuh_128B
    10225690U,	// V6_vxor
    10225690U,	// V6_vxor_128B
    10242074U,	// V6_vzb
    10242074U,	// V6_vzb_128B
    10258458U,	// V6_vzh
    10258458U,	// V6_vzh_128B
    205U,	// VMULW
    161U,	// VMULW_ACC
    1U,	// VSelectDblPseudo_V6
    1U,	// VSelectPseudo_V6
    1129U,	// Y2_barrier
    1427909U,	// Y2_dccleana
    1427944U,	// Y2_dccleaninva
    7670343U,	// Y2_dcfetchbo
    1427928U,	// Y2_dcinva
    1427919U,	// Y2_dczeroa
    1427936U,	// Y2_icinva
    1040U,	// Y2_isync
    1137U,	// Y2_syncht
    36211262U,	// Y4_l2fetch
    1428011U,	// Y4_trace
    36211262U,	// Y5_l2fetch
    1069U,	// Y5_l2gclean
    1211U,	// Y5_l2gcleaninv
    1059U,	// Y5_l2gunlock
    10274842U,	// Y5_l2locka
    1427898U,	// Y5_l2unlocka
    1428316U,	// Y6_l2gcleaninvpa
    1428076U,	// Y6_l2gcleanpa
    33572890U,	// dep_A2_addsat
    33916954U,	// dep_A2_subsat
    2187249690U,	// dep_S2_packhl
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// A2_abs
    0U,	// A2_absp
    0U,	// A2_abssat
    0U,	// A2_add
    65U,	// A2_addh_h16_hh
    129U,	// A2_addh_h16_hl
    66U,	// A2_addh_h16_lh
    130U,	// A2_addh_h16_ll
    193U,	// A2_addh_h16_sat_hh
    257U,	// A2_addh_h16_sat_hl
    194U,	// A2_addh_h16_sat_lh
    258U,	// A2_addh_h16_sat_ll
    322U,	// A2_addh_l16_hl
    386U,	// A2_addh_l16_ll
    450U,	// A2_addh_l16_sat_hl
    514U,	// A2_addh_l16_sat_ll
    579U,	// A2_addi
    0U,	// A2_addp
    4096U,	// A2_addpsat
    4096U,	// A2_addsat
    0U,	// A2_addsp
    8192U,	// A2_addsph
    12288U,	// A2_addspl
    644U,	// A2_and
    645U,	// A2_andir
    644U,	// A2_andp
    0U,	// A2_aslh
    0U,	// A2_asrh
    324U,	// A2_combine_hh
    388U,	// A2_combine_hl
    324U,	// A2_combine_lh
    388U,	// A2_combine_ll
    3U,	// A2_combineii
    644U,	// A2_combinew
    0U,	// A2_max
    0U,	// A2_maxp
    0U,	// A2_maxu
    0U,	// A2_maxup
    0U,	// A2_min
    0U,	// A2_minp
    0U,	// A2_minu
    0U,	// A2_minup
    0U,	// A2_negp
    0U,	// A2_negsat
    0U,	// A2_nop
    0U,	// A2_not
    0U,	// A2_notp
    644U,	// A2_or
    645U,	// A2_orir
    644U,	// A2_orp
    704U,	// A2_paddf
    704U,	// A2_paddfnew
    771U,	// A2_paddif
    771U,	// A2_paddifnew
    771U,	// A2_paddit
    771U,	// A2_padditnew
    704U,	// A2_paddt
    704U,	// A2_paddtnew
    0U,	// A2_pandf
    0U,	// A2_pandfnew
    0U,	// A2_pandt
    0U,	// A2_pandtnew
    0U,	// A2_porf
    0U,	// A2_porfnew
    0U,	// A2_port
    0U,	// A2_portnew
    0U,	// A2_psubf
    0U,	// A2_psubfnew
    0U,	// A2_psubt
    0U,	// A2_psubtnew
    0U,	// A2_pxorf
    0U,	// A2_pxorfnew
    0U,	// A2_pxort
    0U,	// A2_pxortnew
    0U,	// A2_roundsat
    0U,	// A2_sat
    0U,	// A2_satb
    0U,	// A2_sath
    0U,	// A2_satub
    0U,	// A2_satuh
    0U,	// A2_sub
    65U,	// A2_subh_h16_hh
    129U,	// A2_subh_h16_hl
    66U,	// A2_subh_h16_lh
    130U,	// A2_subh_h16_ll
    193U,	// A2_subh_h16_sat_hh
    257U,	// A2_subh_h16_sat_hl
    194U,	// A2_subh_h16_sat_lh
    258U,	// A2_subh_h16_sat_ll
    322U,	// A2_subh_l16_hl
    386U,	// A2_subh_l16_ll
    450U,	// A2_subh_l16_sat_hl
    514U,	// A2_subh_l16_sat_ll
    0U,	// A2_subp
    644U,	// A2_subri
    4096U,	// A2_subsat
    0U,	// A2_svaddh
    0U,	// A2_svaddhs
    0U,	// A2_svadduhs
    0U,	// A2_svavgh
    0U,	// A2_svavghs
    0U,	// A2_svnavgh
    0U,	// A2_svsubh
    0U,	// A2_svsubhs
    0U,	// A2_svsubuhs
    0U,	// A2_swiz
    0U,	// A2_sxtb
    0U,	// A2_sxth
    0U,	// A2_sxtw
    0U,	// A2_tfr
    0U,	// A2_tfrcrr
    0U,	// A2_tfrf
    0U,	// A2_tfrfnew
    0U,	// A2_tfrih
    0U,	// A2_tfril
    0U,	// A2_tfrp
    0U,	// A2_tfrpf
    0U,	// A2_tfrpfnew
    6U,	// A2_tfrpi
    0U,	// A2_tfrpt
    0U,	// A2_tfrptnew
    0U,	// A2_tfrrcr
    6U,	// A2_tfrsi
    0U,	// A2_tfrt
    0U,	// A2_tfrtnew
    0U,	// A2_vabsh
    0U,	// A2_vabshsat
    0U,	// A2_vabsw
    0U,	// A2_vabswsat
    0U,	// A2_vaddh
    0U,	// A2_vaddhs
    0U,	// A2_vaddub
    0U,	// A2_vaddubs
    0U,	// A2_vadduhs
    0U,	// A2_vaddw
    0U,	// A2_vaddws
    0U,	// A2_vavgh
    0U,	// A2_vavghcr
    0U,	// A2_vavghr
    0U,	// A2_vavgub
    0U,	// A2_vavgubr
    0U,	// A2_vavguh
    0U,	// A2_vavguhr
    0U,	// A2_vavguw
    0U,	// A2_vavguwr
    0U,	// A2_vavgw
    0U,	// A2_vavgwcr
    0U,	// A2_vavgwr
    644U,	// A2_vcmpbeq
    644U,	// A2_vcmpbgtu
    644U,	// A2_vcmpheq
    644U,	// A2_vcmphgt
    644U,	// A2_vcmphgtu
    644U,	// A2_vcmpweq
    644U,	// A2_vcmpwgt
    644U,	// A2_vcmpwgtu
    0U,	// A2_vconj
    0U,	// A2_vmaxb
    0U,	// A2_vmaxh
    0U,	// A2_vmaxub
    0U,	// A2_vmaxuh
    0U,	// A2_vmaxuw
    0U,	// A2_vmaxw
    0U,	// A2_vminb
    0U,	// A2_vminh
    0U,	// A2_vminub
    0U,	// A2_vminuh
    0U,	// A2_vminuw
    0U,	// A2_vminw
    0U,	// A2_vnavgh
    0U,	// A2_vnavghcr
    0U,	// A2_vnavghr
    0U,	// A2_vnavgw
    0U,	// A2_vnavgwcr
    0U,	// A2_vnavgwr
    0U,	// A2_vraddub
    0U,	// A2_vraddub_acc
    0U,	// A2_vrsadub
    0U,	// A2_vrsadub_acc
    0U,	// A2_vsubh
    0U,	// A2_vsubhs
    0U,	// A2_vsubub
    0U,	// A2_vsububs
    0U,	// A2_vsubuhs
    0U,	// A2_vsubw
    0U,	// A2_vsubws
    0U,	// A2_xor
    0U,	// A2_xorp
    0U,	// A2_zxtb
    0U,	// A2_zxth
    17088U,	// A4_addp_c
    644U,	// A4_andn
    644U,	// A4_andnp
    644U,	// A4_bitsplit
    644U,	// A4_bitspliti
    0U,	// A4_boundscheck
    0U,	// A4_boundscheck_hi
    0U,	// A4_boundscheck_lo
    644U,	// A4_cmpbeq
    644U,	// A4_cmpbeqi
    644U,	// A4_cmpbgt
    644U,	// A4_cmpbgti
    644U,	// A4_cmpbgtu
    645U,	// A4_cmpbgtui
    644U,	// A4_cmpheq
    645U,	// A4_cmpheqi
    644U,	// A4_cmphgt
    645U,	// A4_cmphgti
    644U,	// A4_cmphgtu
    645U,	// A4_cmphgtui
    579U,	// A4_combineii
    0U,	// A4_combineir
    645U,	// A4_combineri
    644U,	// A4_cround_ri
    644U,	// A4_cround_rr
    0U,	// A4_ext
    0U,	// A4_ext_b
    0U,	// A4_ext_c
    0U,	// A4_ext_g
    0U,	// A4_modwrapu
    644U,	// A4_orn
    644U,	// A4_ornp
    0U,	// A4_paslhf
    0U,	// A4_paslhfnew
    0U,	// A4_paslht
    0U,	// A4_paslhtnew
    0U,	// A4_pasrhf
    0U,	// A4_pasrhfnew
    0U,	// A4_pasrht
    0U,	// A4_pasrhtnew
    0U,	// A4_psxtbf
    0U,	// A4_psxtbfnew
    0U,	// A4_psxtbt
    0U,	// A4_psxtbtnew
    0U,	// A4_psxthf
    0U,	// A4_psxthfnew
    0U,	// A4_psxtht
    0U,	// A4_psxthtnew
    0U,	// A4_pzxtbf
    0U,	// A4_pzxtbfnew
    0U,	// A4_pzxtbt
    0U,	// A4_pzxtbtnew
    0U,	// A4_pzxthf
    0U,	// A4_pzxthfnew
    0U,	// A4_pzxtht
    0U,	// A4_pzxthtnew
    644U,	// A4_rcmpeq
    645U,	// A4_rcmpeqi
    644U,	// A4_rcmpneq
    645U,	// A4_rcmpneqi
    644U,	// A4_round_ri
    836U,	// A4_round_ri_sat
    644U,	// A4_round_rr
    836U,	// A4_round_rr_sat
    17088U,	// A4_subp_c
    0U,	// A4_tfrcpp
    0U,	// A4_tfrpcp
    0U,	// A4_tlbmatch
    0U,	// A4_vcmpbeq_any
    644U,	// A4_vcmpbeqi
    644U,	// A4_vcmpbgt
    644U,	// A4_vcmpbgti
    644U,	// A4_vcmpbgtui
    644U,	// A4_vcmpheqi
    644U,	// A4_vcmphgti
    644U,	// A4_vcmphgtui
    644U,	// A4_vcmpweqi
    644U,	// A4_vcmpwgti
    644U,	// A4_vcmpwgtui
    0U,	// A4_vrmaxh
    0U,	// A4_vrmaxuh
    0U,	// A4_vrmaxuw
    0U,	// A4_vrmaxw
    0U,	// A4_vrminh
    0U,	// A4_vrminuh
    0U,	// A4_vrminuw
    0U,	// A4_vrminw
    7U,	// A5_ACS
    0U,	// A5_vaddhubs
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ALIGNA
    0U,	// ALLOCA
    0U,	// ARGEXTEND
    0U,	// C2_all8
    644U,	// C2_and
    0U,	// C2_andn
    0U,	// C2_any8
    644U,	// C2_bitsclr
    644U,	// C2_bitsclri
    0U,	// C2_bitsset
    0U,	// C2_ccombinewf
    0U,	// C2_ccombinewnewf
    0U,	// C2_ccombinewnewt
    0U,	// C2_ccombinewt
    0U,	// C2_cmoveif
    0U,	// C2_cmoveit
    0U,	// C2_cmovenewif
    0U,	// C2_cmovenewit
    644U,	// C2_cmpeq
    645U,	// C2_cmpeqi
    644U,	// C2_cmpeqp
    0U,	// C2_cmpgei
    0U,	// C2_cmpgeui
    644U,	// C2_cmpgt
    645U,	// C2_cmpgti
    644U,	// C2_cmpgtp
    644U,	// C2_cmpgtu
    645U,	// C2_cmpgtui
    644U,	// C2_cmpgtup
    0U,	// C2_mask
    900U,	// C2_mux
    21445U,	// C2_muxii
    25540U,	// C2_muxir
    901U,	// C2_muxri
    0U,	// C2_not
    644U,	// C2_or
    0U,	// C2_orn
    0U,	// C2_pxfer_map
    0U,	// C2_tfrpr
    0U,	// C2_tfrrp
    0U,	// C2_vitpack
    900U,	// C2_vmux
    0U,	// C2_xor
    0U,	// C4_addipc
    29376U,	// C4_and_and
    8U,	// C4_and_andn
    29376U,	// C4_and_or
    8U,	// C4_and_orn
    644U,	// C4_cmplte
    645U,	// C4_cmpltei
    644U,	// C4_cmplteu
    645U,	// C4_cmplteui
    644U,	// C4_cmpneq
    645U,	// C4_cmpneqi
    0U,	// C4_fastcorner9
    0U,	// C4_fastcorner9_not
    644U,	// C4_nbitsclr
    644U,	// C4_nbitsclri
    0U,	// C4_nbitsset
    29376U,	// C4_or_and
    8U,	// C4_or_andn
    29376U,	// C4_or_or
    8U,	// C4_or_orn
    0U,	// CALLRv3nr
    0U,	// CALLv3nr
    9U,	// CONST32
    9U,	// CONST32_Float_Real
    9U,	// CONST32_Int_Real
    0U,	// CONST64_Float_Real
    0U,	// CONST64_Int_Real
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    0U,	// EH_RETURN_JMPR
    0U,	// ENDLOOP0
    0U,	// ENDLOOP1
    0U,	// F2_conv_d2df
    0U,	// F2_conv_d2sf
    0U,	// F2_conv_df2d
    0U,	// F2_conv_df2d_chop
    0U,	// F2_conv_df2sf
    0U,	// F2_conv_df2ud
    0U,	// F2_conv_df2ud_chop
    0U,	// F2_conv_df2uw
    0U,	// F2_conv_df2uw_chop
    0U,	// F2_conv_df2w
    0U,	// F2_conv_df2w_chop
    0U,	// F2_conv_sf2d
    0U,	// F2_conv_sf2d_chop
    0U,	// F2_conv_sf2df
    0U,	// F2_conv_sf2ud
    0U,	// F2_conv_sf2ud_chop
    0U,	// F2_conv_sf2uw
    0U,	// F2_conv_sf2uw_chop
    0U,	// F2_conv_sf2w
    0U,	// F2_conv_sf2w_chop
    0U,	// F2_conv_ud2df
    0U,	// F2_conv_ud2sf
    0U,	// F2_conv_uw2df
    0U,	// F2_conv_uw2sf
    0U,	// F2_conv_w2df
    0U,	// F2_conv_w2sf
    0U,	// F2_dfclass
    0U,	// F2_dfcmpeq
    0U,	// F2_dfcmpge
    0U,	// F2_dfcmpgt
    0U,	// F2_dfcmpuo
    0U,	// F2_dfimm_n
    0U,	// F2_dfimm_p
    0U,	// F2_sfadd
    0U,	// F2_sfclass
    0U,	// F2_sfcmpeq
    0U,	// F2_sfcmpge
    0U,	// F2_sfcmpgt
    0U,	// F2_sfcmpuo
    0U,	// F2_sffixupd
    0U,	// F2_sffixupn
    0U,	// F2_sffixupr
    0U,	// F2_sffma
    0U,	// F2_sffma_lib
    1034U,	// F2_sffma_sc
    0U,	// F2_sffms
    0U,	// F2_sffms_lib
    0U,	// F2_sfimm_n
    0U,	// F2_sfimm_p
    11U,	// F2_sfinvsqrta
    0U,	// F2_sfmax
    0U,	// F2_sfmin
    0U,	// F2_sfmpy
    12U,	// F2_sfrecipa
    0U,	// F2_sfsub
    9U,	// FCONST32_nsdata
    0U,	// HEXAGON_V6_hi
    0U,	// HEXAGON_V6_hi_128B
    0U,	// HEXAGON_V6_lo
    0U,	// HEXAGON_V6_lo_128B
    0U,	// HEXAGON_V6_vassignp
    0U,	// HEXAGON_V6_vassignp_128B
    0U,	// HEXAGON_V6_vd0_pseudo
    0U,	// HEXAGON_V6_vd0_pseudo_128B
    9U,	// HI
    13U,	// HI_GOT
    14U,	// HI_GOTREL
    0U,	// HI_L
    14U,	// HI_PIC
    0U,	// Insert4
    0U,	// J2_call
    0U,	// J2_callf
    0U,	// J2_callr
    0U,	// J2_callrf
    0U,	// J2_callrt
    0U,	// J2_callt
    0U,	// J2_jump
    0U,	// J2_jump_ext
    0U,	// J2_jump_extf
    0U,	// J2_jump_extfnew
    0U,	// J2_jump_extfnewpt
    0U,	// J2_jump_extt
    0U,	// J2_jump_exttnew
    0U,	// J2_jump_exttnewpt
    0U,	// J2_jump_noext
    0U,	// J2_jump_noextf
    0U,	// J2_jump_noextfnew
    0U,	// J2_jump_noextfnewpt
    0U,	// J2_jump_noextt
    0U,	// J2_jump_noexttnew
    0U,	// J2_jump_noexttnewpt
    0U,	// J2_jumpf
    0U,	// J2_jumpfnew
    0U,	// J2_jumpfnewpt
    0U,	// J2_jumpr
    0U,	// J2_jumprf
    0U,	// J2_jumprfnew
    0U,	// J2_jumprfnewpt
    0U,	// J2_jumprgtez
    0U,	// J2_jumprgtezpt
    0U,	// J2_jumprltez
    0U,	// J2_jumprltezpt
    0U,	// J2_jumprnz
    0U,	// J2_jumprnzpt
    0U,	// J2_jumprt
    0U,	// J2_jumprtnew
    0U,	// J2_jumprtnewpt
    0U,	// J2_jumprz
    0U,	// J2_jumprzpt
    0U,	// J2_jumpt
    0U,	// J2_jumptnew
    0U,	// J2_jumptnewpt
    0U,	// J2_loop0i
    0U,	// J2_loop0iext
    9U,	// J2_loop0r
    9U,	// J2_loop0rext
    0U,	// J2_loop1i
    0U,	// J2_loop1iext
    9U,	// J2_loop1r
    9U,	// J2_loop1rext
    0U,	// J2_ploop1si
    9U,	// J2_ploop1sr
    0U,	// J2_ploop2si
    9U,	// J2_ploop2sr
    0U,	// J2_ploop3si
    9U,	// J2_ploop3sr
    0U,	// J4_cmpeq_f_jumpnv_nt
    0U,	// J4_cmpeq_f_jumpnv_t
    15U,	// J4_cmpeq_fp0_jump_nt
    16U,	// J4_cmpeq_fp0_jump_t
    17U,	// J4_cmpeq_fp1_jump_nt
    18U,	// J4_cmpeq_fp1_jump_t
    0U,	// J4_cmpeq_t_jumpnv_nt
    0U,	// J4_cmpeq_t_jumpnv_t
    19U,	// J4_cmpeq_tp0_jump_nt
    20U,	// J4_cmpeq_tp0_jump_t
    21U,	// J4_cmpeq_tp1_jump_nt
    22U,	// J4_cmpeq_tp1_jump_t
    0U,	// J4_cmpeqi_f_jumpnv_nt
    0U,	// J4_cmpeqi_f_jumpnv_t
    0U,	// J4_cmpeqi_fp0_jump_nt
    0U,	// J4_cmpeqi_fp0_jump_t
    0U,	// J4_cmpeqi_fp1_jump_nt
    0U,	// J4_cmpeqi_fp1_jump_t
    0U,	// J4_cmpeqi_t_jumpnv_nt
    0U,	// J4_cmpeqi_t_jumpnv_t
    0U,	// J4_cmpeqi_tp0_jump_nt
    0U,	// J4_cmpeqi_tp0_jump_t
    0U,	// J4_cmpeqi_tp1_jump_nt
    0U,	// J4_cmpeqi_tp1_jump_t
    0U,	// J4_cmpeqn1_f_jumpnv_nt
    0U,	// J4_cmpeqn1_f_jumpnv_t
    0U,	// J4_cmpeqn1_fp0_jump_nt
    0U,	// J4_cmpeqn1_fp0_jump_t
    0U,	// J4_cmpeqn1_fp1_jump_nt
    0U,	// J4_cmpeqn1_fp1_jump_t
    0U,	// J4_cmpeqn1_t_jumpnv_nt
    0U,	// J4_cmpeqn1_t_jumpnv_t
    0U,	// J4_cmpeqn1_tp0_jump_nt
    0U,	// J4_cmpeqn1_tp0_jump_t
    0U,	// J4_cmpeqn1_tp1_jump_nt
    0U,	// J4_cmpeqn1_tp1_jump_t
    0U,	// J4_cmpgt_f_jumpnv_nt
    0U,	// J4_cmpgt_f_jumpnv_t
    15U,	// J4_cmpgt_fp0_jump_nt
    16U,	// J4_cmpgt_fp0_jump_t
    17U,	// J4_cmpgt_fp1_jump_nt
    18U,	// J4_cmpgt_fp1_jump_t
    0U,	// J4_cmpgt_t_jumpnv_nt
    0U,	// J4_cmpgt_t_jumpnv_t
    19U,	// J4_cmpgt_tp0_jump_nt
    20U,	// J4_cmpgt_tp0_jump_t
    21U,	// J4_cmpgt_tp1_jump_nt
    22U,	// J4_cmpgt_tp1_jump_t
    0U,	// J4_cmpgti_f_jumpnv_nt
    0U,	// J4_cmpgti_f_jumpnv_t
    0U,	// J4_cmpgti_fp0_jump_nt
    0U,	// J4_cmpgti_fp0_jump_t
    0U,	// J4_cmpgti_fp1_jump_nt
    0U,	// J4_cmpgti_fp1_jump_t
    0U,	// J4_cmpgti_t_jumpnv_nt
    0U,	// J4_cmpgti_t_jumpnv_t
    0U,	// J4_cmpgti_tp0_jump_nt
    0U,	// J4_cmpgti_tp0_jump_t
    0U,	// J4_cmpgti_tp1_jump_nt
    0U,	// J4_cmpgti_tp1_jump_t
    0U,	// J4_cmpgtn1_f_jumpnv_nt
    0U,	// J4_cmpgtn1_f_jumpnv_t
    0U,	// J4_cmpgtn1_fp0_jump_nt
    0U,	// J4_cmpgtn1_fp0_jump_t
    0U,	// J4_cmpgtn1_fp1_jump_nt
    0U,	// J4_cmpgtn1_fp1_jump_t
    0U,	// J4_cmpgtn1_t_jumpnv_nt
    0U,	// J4_cmpgtn1_t_jumpnv_t
    0U,	// J4_cmpgtn1_tp0_jump_nt
    0U,	// J4_cmpgtn1_tp0_jump_t
    0U,	// J4_cmpgtn1_tp1_jump_nt
    0U,	// J4_cmpgtn1_tp1_jump_t
    0U,	// J4_cmpgtu_f_jumpnv_nt
    0U,	// J4_cmpgtu_f_jumpnv_t
    15U,	// J4_cmpgtu_fp0_jump_nt
    16U,	// J4_cmpgtu_fp0_jump_t
    17U,	// J4_cmpgtu_fp1_jump_nt
    18U,	// J4_cmpgtu_fp1_jump_t
    0U,	// J4_cmpgtu_t_jumpnv_nt
    0U,	// J4_cmpgtu_t_jumpnv_t
    19U,	// J4_cmpgtu_tp0_jump_nt
    20U,	// J4_cmpgtu_tp0_jump_t
    21U,	// J4_cmpgtu_tp1_jump_nt
    22U,	// J4_cmpgtu_tp1_jump_t
    0U,	// J4_cmpgtui_f_jumpnv_nt
    0U,	// J4_cmpgtui_f_jumpnv_t
    0U,	// J4_cmpgtui_fp0_jump_nt
    0U,	// J4_cmpgtui_fp0_jump_t
    0U,	// J4_cmpgtui_fp1_jump_nt
    0U,	// J4_cmpgtui_fp1_jump_t
    0U,	// J4_cmpgtui_t_jumpnv_nt
    0U,	// J4_cmpgtui_t_jumpnv_t
    0U,	// J4_cmpgtui_tp0_jump_nt
    0U,	// J4_cmpgtui_tp0_jump_t
    0U,	// J4_cmpgtui_tp1_jump_nt
    0U,	// J4_cmpgtui_tp1_jump_t
    23U,	// J4_cmplt_f_jumpnv_nt
    24U,	// J4_cmplt_f_jumpnv_t
    23U,	// J4_cmplt_t_jumpnv_nt
    24U,	// J4_cmplt_t_jumpnv_t
    23U,	// J4_cmpltu_f_jumpnv_nt
    24U,	// J4_cmpltu_f_jumpnv_t
    23U,	// J4_cmpltu_t_jumpnv_nt
    24U,	// J4_cmpltu_t_jumpnv_t
    0U,	// J4_hintjumpr
    25U,	// J4_jumpseti
    0U,	// J4_jumpsetr
    0U,	// J4_tstbit0_f_jumpnv_nt
    0U,	// J4_tstbit0_f_jumpnv_t
    0U,	// J4_tstbit0_fp0_jump_nt
    0U,	// J4_tstbit0_fp0_jump_t
    0U,	// J4_tstbit0_fp1_jump_nt
    0U,	// J4_tstbit0_fp1_jump_t
    0U,	// J4_tstbit0_t_jumpnv_nt
    0U,	// J4_tstbit0_t_jumpnv_t
    0U,	// J4_tstbit0_tp0_jump_nt
    0U,	// J4_tstbit0_tp0_jump_t
    0U,	// J4_tstbit0_tp1_jump_nt
    0U,	// J4_tstbit0_tp1_jump_t
    0U,	// JMPret
    0U,	// JMPretf
    0U,	// JMPretfnew
    0U,	// JMPretfnewpt
    0U,	// JMPrett
    0U,	// JMPrettnew
    0U,	// JMPrettnewpt
    0U,	// L2_deallocframe
    794U,	// L2_loadalignb_io
    27U,	// L2_loadalignb_pbr
    28U,	// L2_loadalignb_pci
    29789U,	// L2_loadalignb_pcr
    1118U,	// L2_loadalignb_pi
    1119U,	// L2_loadalignb_pr
    794U,	// L2_loadalignh_io
    27U,	// L2_loadalignh_pbr
    28U,	// L2_loadalignh_pci
    29789U,	// L2_loadalignh_pcr
    1118U,	// L2_loadalignh_pi
    1119U,	// L2_loadalignh_pr
    602U,	// L2_loadbsw2_io
    27U,	// L2_loadbsw2_pbr
    28U,	// L2_loadbsw2_pci
    29405U,	// L2_loadbsw2_pcr
    734U,	// L2_loadbsw2_pi
    735U,	// L2_loadbsw2_pr
    602U,	// L2_loadbsw4_io
    27U,	// L2_loadbsw4_pbr
    28U,	// L2_loadbsw4_pci
    29405U,	// L2_loadbsw4_pcr
    734U,	// L2_loadbsw4_pi
    735U,	// L2_loadbsw4_pr
    602U,	// L2_loadbzw2_io
    27U,	// L2_loadbzw2_pbr
    28U,	// L2_loadbzw2_pci
    29405U,	// L2_loadbzw2_pcr
    734U,	// L2_loadbzw2_pi
    735U,	// L2_loadbzw2_pr
    602U,	// L2_loadbzw4_io
    27U,	// L2_loadbzw4_pbr
    28U,	// L2_loadbzw4_pci
    29405U,	// L2_loadbzw4_pcr
    734U,	// L2_loadbzw4_pi
    735U,	// L2_loadbzw4_pr
    602U,	// L2_loadrb_io
    27U,	// L2_loadrb_pbr
    33887U,	// L2_loadrb_pbr_pseudo
    28U,	// L2_loadrb_pci
    1182U,	// L2_loadrb_pci_pseudo
    29405U,	// L2_loadrb_pcr
    734U,	// L2_loadrb_pi
    735U,	// L2_loadrb_pr
    9U,	// L2_loadrbgp
    602U,	// L2_loadrd_io
    27U,	// L2_loadrd_pbr
    33887U,	// L2_loadrd_pbr_pseudo
    28U,	// L2_loadrd_pci
    1182U,	// L2_loadrd_pci_pseudo
    29405U,	// L2_loadrd_pcr
    734U,	// L2_loadrd_pi
    735U,	// L2_loadrd_pr
    9U,	// L2_loadrdgp
    602U,	// L2_loadrh_io
    27U,	// L2_loadrh_pbr
    33887U,	// L2_loadrh_pbr_pseudo
    28U,	// L2_loadrh_pci
    1182U,	// L2_loadrh_pci_pseudo
    29405U,	// L2_loadrh_pcr
    734U,	// L2_loadrh_pi
    735U,	// L2_loadrh_pr
    9U,	// L2_loadrhgp
    602U,	// L2_loadri_io
    27U,	// L2_loadri_pbr
    33887U,	// L2_loadri_pbr_pseudo
    28U,	// L2_loadri_pci
    1182U,	// L2_loadri_pci_pseudo
    29405U,	// L2_loadri_pcr
    734U,	// L2_loadri_pi
    735U,	// L2_loadri_pr
    9U,	// L2_loadrigp
    602U,	// L2_loadrub_io
    27U,	// L2_loadrub_pbr
    33887U,	// L2_loadrub_pbr_pseudo
    28U,	// L2_loadrub_pci
    1182U,	// L2_loadrub_pci_pseudo
    29405U,	// L2_loadrub_pcr
    734U,	// L2_loadrub_pi
    735U,	// L2_loadrub_pr
    9U,	// L2_loadrubgp
    602U,	// L2_loadruh_io
    27U,	// L2_loadruh_pbr
    33887U,	// L2_loadruh_pbr_pseudo
    28U,	// L2_loadruh_pci
    1182U,	// L2_loadruh_pci_pseudo
    29405U,	// L2_loadruh_pcr
    734U,	// L2_loadruh_pi
    735U,	// L2_loadruh_pr
    9U,	// L2_loadruhgp
    0U,	// L2_loadw_locked
    1220U,	// L2_ploadrbf_io
    1312U,	// L2_ploadrbf_pi
    1220U,	// L2_ploadrbfnew_io
    1312U,	// L2_ploadrbfnew_pi
    1220U,	// L2_ploadrbt_io
    1312U,	// L2_ploadrbt_pi
    1220U,	// L2_ploadrbtnew_io
    1312U,	// L2_ploadrbtnew_pi
    1220U,	// L2_ploadrdf_io
    1312U,	// L2_ploadrdf_pi
    1220U,	// L2_ploadrdfnew_io
    1312U,	// L2_ploadrdfnew_pi
    1220U,	// L2_ploadrdt_io
    1312U,	// L2_ploadrdt_pi
    1220U,	// L2_ploadrdtnew_io
    1312U,	// L2_ploadrdtnew_pi
    1220U,	// L2_ploadrhf_io
    1312U,	// L2_ploadrhf_pi
    1220U,	// L2_ploadrhfnew_io
    1312U,	// L2_ploadrhfnew_pi
    1220U,	// L2_ploadrht_io
    1312U,	// L2_ploadrht_pi
    1220U,	// L2_ploadrhtnew_io
    1312U,	// L2_ploadrhtnew_pi
    1220U,	// L2_ploadrif_io
    1312U,	// L2_ploadrif_pi
    1220U,	// L2_ploadrifnew_io
    1312U,	// L2_ploadrifnew_pi
    1220U,	// L2_ploadrit_io
    1312U,	// L2_ploadrit_pi
    1220U,	// L2_ploadritnew_io
    1312U,	// L2_ploadritnew_pi
    1220U,	// L2_ploadrubf_io
    1312U,	// L2_ploadrubf_pi
    1220U,	// L2_ploadrubfnew_io
    1312U,	// L2_ploadrubfnew_pi
    1220U,	// L2_ploadrubt_io
    1312U,	// L2_ploadrubt_pi
    1220U,	// L2_ploadrubtnew_io
    1312U,	// L2_ploadrubtnew_pi
    1220U,	// L2_ploadruhf_io
    1312U,	// L2_ploadruhf_pi
    1220U,	// L2_ploadruhfnew_io
    1312U,	// L2_ploadruhfnew_pi
    1220U,	// L2_ploadruht_io
    1312U,	// L2_ploadruht_pi
    1220U,	// L2_ploadruhtnew_io
    1312U,	// L2_ploadruhtnew_pi
    33U,	// L4_add_memopb_io
    33U,	// L4_add_memoph_io
    33U,	// L4_add_memopw_io
    34U,	// L4_and_memopb_io
    34U,	// L4_and_memoph_io
    34U,	// L4_and_memopw_io
    35U,	// L4_iadd_memopb_io
    35U,	// L4_iadd_memoph_io
    35U,	// L4_iadd_memopw_io
    36U,	// L4_iand_memopb_io
    36U,	// L4_iand_memoph_io
    36U,	// L4_iand_memopw_io
    37U,	// L4_ior_memopb_io
    37U,	// L4_ior_memoph_io
    37U,	// L4_ior_memopw_io
    38U,	// L4_isub_memopb_io
    38U,	// L4_isub_memoph_io
    38U,	// L4_isub_memopw_io
    39U,	// L4_loadalignb_ap
    40U,	// L4_loadalignb_ur
    39U,	// L4_loadalignh_ap
    40U,	// L4_loadalignh_ur
    39U,	// L4_loadbsw2_ap
    40U,	// L4_loadbsw2_ur
    39U,	// L4_loadbsw4_ap
    40U,	// L4_loadbsw4_ur
    39U,	// L4_loadbzw2_ap
    40U,	// L4_loadbzw2_ur
    39U,	// L4_loadbzw4_ap
    40U,	// L4_loadbzw4_ur
    0U,	// L4_loadd_locked
    9U,	// L4_loadrb_abs
    39U,	// L4_loadrb_ap
    41U,	// L4_loadrb_rr
    40U,	// L4_loadrb_ur
    9U,	// L4_loadrd_abs
    39U,	// L4_loadrd_ap
    41U,	// L4_loadrd_rr
    40U,	// L4_loadrd_ur
    9U,	// L4_loadrh_abs
    39U,	// L4_loadrh_ap
    41U,	// L4_loadrh_rr
    40U,	// L4_loadrh_ur
    9U,	// L4_loadri_abs
    39U,	// L4_loadri_ap
    41U,	// L4_loadri_rr
    40U,	// L4_loadri_ur
    9U,	// L4_loadrub_abs
    39U,	// L4_loadrub_ap
    41U,	// L4_loadrub_rr
    40U,	// L4_loadrub_ur
    9U,	// L4_loadruh_abs
    39U,	// L4_loadruh_ap
    41U,	// L4_loadruh_rr
    40U,	// L4_loadruh_ur
    42U,	// L4_or_memopb_io
    42U,	// L4_or_memoph_io
    42U,	// L4_or_memopw_io
    0U,	// L4_ploadrbf_abs
    1348U,	// L4_ploadrbf_rr
    0U,	// L4_ploadrbfnew_abs
    1348U,	// L4_ploadrbfnew_rr
    0U,	// L4_ploadrbt_abs
    1348U,	// L4_ploadrbt_rr
    0U,	// L4_ploadrbtnew_abs
    1348U,	// L4_ploadrbtnew_rr
    0U,	// L4_ploadrdf_abs
    1348U,	// L4_ploadrdf_rr
    0U,	// L4_ploadrdfnew_abs
    1348U,	// L4_ploadrdfnew_rr
    0U,	// L4_ploadrdt_abs
    1348U,	// L4_ploadrdt_rr
    0U,	// L4_ploadrdtnew_abs
    1348U,	// L4_ploadrdtnew_rr
    0U,	// L4_ploadrhf_abs
    1348U,	// L4_ploadrhf_rr
    0U,	// L4_ploadrhfnew_abs
    1348U,	// L4_ploadrhfnew_rr
    0U,	// L4_ploadrht_abs
    1348U,	// L4_ploadrht_rr
    0U,	// L4_ploadrhtnew_abs
    1348U,	// L4_ploadrhtnew_rr
    0U,	// L4_ploadrif_abs
    1348U,	// L4_ploadrif_rr
    0U,	// L4_ploadrifnew_abs
    1348U,	// L4_ploadrifnew_rr
    0U,	// L4_ploadrit_abs
    1348U,	// L4_ploadrit_rr
    0U,	// L4_ploadritnew_abs
    1348U,	// L4_ploadritnew_rr
    0U,	// L4_ploadrubf_abs
    1348U,	// L4_ploadrubf_rr
    0U,	// L4_ploadrubfnew_abs
    1348U,	// L4_ploadrubfnew_rr
    0U,	// L4_ploadrubt_abs
    1348U,	// L4_ploadrubt_rr
    0U,	// L4_ploadrubtnew_abs
    1348U,	// L4_ploadrubtnew_rr
    0U,	// L4_ploadruhf_abs
    1348U,	// L4_ploadruhf_rr
    0U,	// L4_ploadruhfnew_abs
    1348U,	// L4_ploadruhfnew_rr
    0U,	// L4_ploadruht_abs
    1348U,	// L4_ploadruht_rr
    0U,	// L4_ploadruhtnew_abs
    1348U,	// L4_ploadruhtnew_rr
    0U,	// L4_return
    0U,	// L4_return_f
    0U,	// L4_return_fnew_pnt
    0U,	// L4_return_fnew_pt
    0U,	// L4_return_t
    0U,	// L4_return_tnew_pnt
    0U,	// L4_return_tnew_pt
    43U,	// L4_sub_memopb_io
    43U,	// L4_sub_memoph_io
    43U,	// L4_sub_memopw_io
    0U,	// LDriq_pred_V6
    0U,	// LDriq_pred_V6_128B
    0U,	// LDriq_pred_vec_V6
    0U,	// LDriq_pred_vec_V6_128B
    0U,	// LDriv_pseudo_V6
    0U,	// LDriv_pseudo_V6_128B
    0U,	// LDrivv_indexed
    0U,	// LDrivv_indexed_128B
    0U,	// LDrivv_pseudo_V6
    0U,	// LDrivv_pseudo_V6_128B
    0U,	// LDriw_pred
    9U,	// LO
    13U,	// LO_GOT
    14U,	// LO_GOTREL
    0U,	// LO_H
    14U,	// LO_PIC
    672U,	// M2_acci
    44U,	// M2_accii
    0U,	// M2_cmaci_s0
    0U,	// M2_cmacr_s0
    0U,	// M2_cmacs_s0
    0U,	// M2_cmacs_s1
    0U,	// M2_cmacsc_s0
    0U,	// M2_cmacsc_s1
    0U,	// M2_cmpyi_s0
    0U,	// M2_cmpyr_s0
    0U,	// M2_cmpyrs_s0
    0U,	// M2_cmpyrs_s1
    0U,	// M2_cmpyrsc_s0
    0U,	// M2_cmpyrsc_s1
    0U,	// M2_cmpys_s0
    0U,	// M2_cmpys_s1
    0U,	// M2_cmpysc_s0
    0U,	// M2_cmpysc_s1
    0U,	// M2_cnacs_s0
    0U,	// M2_cnacs_s1
    0U,	// M2_cnacsc_s0
    0U,	// M2_cnacsc_s1
    672U,	// M2_dpmpyss_acc_s0
    672U,	// M2_dpmpyss_nac_s0
    1412U,	// M2_dpmpyss_rnd_s0
    644U,	// M2_dpmpyss_s0
    672U,	// M2_dpmpyuu_acc_s0
    672U,	// M2_dpmpyuu_nac_s0
    644U,	// M2_dpmpyuu_s0
    1476U,	// M2_hmmpyh_rs1
    1540U,	// M2_hmmpyh_s1
    1604U,	// M2_hmmpyl_rs1
    1668U,	// M2_hmmpyl_s1
    672U,	// M2_maci
    0U,	// M2_macsin
    44U,	// M2_macsip
    0U,	// M2_mmachs_rs0
    0U,	// M2_mmachs_rs1
    0U,	// M2_mmachs_s0
    0U,	// M2_mmachs_s1
    0U,	// M2_mmacls_rs0
    0U,	// M2_mmacls_rs1
    0U,	// M2_mmacls_s0
    0U,	// M2_mmacls_s1
    0U,	// M2_mmacuhs_rs0
    0U,	// M2_mmacuhs_rs1
    0U,	// M2_mmacuhs_s0
    0U,	// M2_mmacuhs_s1
    0U,	// M2_mmaculs_rs0
    0U,	// M2_mmaculs_rs1
    0U,	// M2_mmaculs_s0
    0U,	// M2_mmaculs_s1
    0U,	// M2_mmpyh_rs0
    0U,	// M2_mmpyh_rs1
    0U,	// M2_mmpyh_s0
    0U,	// M2_mmpyh_s1
    0U,	// M2_mmpyl_rs0
    0U,	// M2_mmpyl_rs1
    0U,	// M2_mmpyl_s0
    0U,	// M2_mmpyl_s1
    0U,	// M2_mmpyuh_rs0
    0U,	// M2_mmpyuh_rs1
    0U,	// M2_mmpyuh_s0
    0U,	// M2_mmpyuh_s1
    0U,	// M2_mmpyul_rs0
    0U,	// M2_mmpyul_rs1
    0U,	// M2_mmpyul_s0
    0U,	// M2_mmpyul_s1
    352U,	// M2_mpy_acc_hh_s0
    1760U,	// M2_mpy_acc_hh_s1
    416U,	// M2_mpy_acc_hl_s0
    1824U,	// M2_mpy_acc_hl_s1
    352U,	// M2_mpy_acc_lh_s0
    1760U,	// M2_mpy_acc_lh_s1
    416U,	// M2_mpy_acc_ll_s0
    1824U,	// M2_mpy_acc_ll_s1
    480U,	// M2_mpy_acc_sat_hh_s0
    1568U,	// M2_mpy_acc_sat_hh_s1
    544U,	// M2_mpy_acc_sat_hl_s0
    1696U,	// M2_mpy_acc_sat_hl_s1
    480U,	// M2_mpy_acc_sat_lh_s0
    1568U,	// M2_mpy_acc_sat_lh_s1
    544U,	// M2_mpy_acc_sat_ll_s0
    1696U,	// M2_mpy_acc_sat_ll_s1
    324U,	// M2_mpy_hh_s0
    1732U,	// M2_mpy_hh_s1
    388U,	// M2_mpy_hl_s0
    1796U,	// M2_mpy_hl_s1
    324U,	// M2_mpy_lh_s0
    1732U,	// M2_mpy_lh_s1
    388U,	// M2_mpy_ll_s0
    1796U,	// M2_mpy_ll_s1
    352U,	// M2_mpy_nac_hh_s0
    1760U,	// M2_mpy_nac_hh_s1
    416U,	// M2_mpy_nac_hl_s0
    1824U,	// M2_mpy_nac_hl_s1
    352U,	// M2_mpy_nac_lh_s0
    1760U,	// M2_mpy_nac_lh_s1
    416U,	// M2_mpy_nac_ll_s0
    1824U,	// M2_mpy_nac_ll_s1
    480U,	// M2_mpy_nac_sat_hh_s0
    1568U,	// M2_mpy_nac_sat_hh_s1
    544U,	// M2_mpy_nac_sat_hl_s0
    1696U,	// M2_mpy_nac_sat_hl_s1
    480U,	// M2_mpy_nac_sat_lh_s0
    1568U,	// M2_mpy_nac_sat_lh_s1
    544U,	// M2_mpy_nac_sat_ll_s0
    1696U,	// M2_mpy_nac_sat_ll_s1
    1860U,	// M2_mpy_rnd_hh_s0
    1924U,	// M2_mpy_rnd_hh_s1
    1988U,	// M2_mpy_rnd_hl_s0
    2052U,	// M2_mpy_rnd_hl_s1
    1860U,	// M2_mpy_rnd_lh_s0
    1924U,	// M2_mpy_rnd_lh_s1
    1988U,	// M2_mpy_rnd_ll_s0
    2052U,	// M2_mpy_rnd_ll_s1
    452U,	// M2_mpy_sat_hh_s0
    1540U,	// M2_mpy_sat_hh_s1
    516U,	// M2_mpy_sat_hl_s0
    1668U,	// M2_mpy_sat_hl_s1
    452U,	// M2_mpy_sat_lh_s0
    1540U,	// M2_mpy_sat_lh_s1
    516U,	// M2_mpy_sat_ll_s0
    1668U,	// M2_mpy_sat_ll_s1
    2116U,	// M2_mpy_sat_rnd_hh_s0
    1476U,	// M2_mpy_sat_rnd_hh_s1
    2180U,	// M2_mpy_sat_rnd_hl_s0
    1604U,	// M2_mpy_sat_rnd_hl_s1
    2116U,	// M2_mpy_sat_rnd_lh_s0
    1476U,	// M2_mpy_sat_rnd_lh_s1
    2180U,	// M2_mpy_sat_rnd_ll_s0
    1604U,	// M2_mpy_sat_rnd_ll_s1
    644U,	// M2_mpy_up
    2244U,	// M2_mpy_up_s1
    2308U,	// M2_mpy_up_s1_sat
    352U,	// M2_mpyd_acc_hh_s0
    1760U,	// M2_mpyd_acc_hh_s1
    416U,	// M2_mpyd_acc_hl_s0
    1824U,	// M2_mpyd_acc_hl_s1
    352U,	// M2_mpyd_acc_lh_s0
    1760U,	// M2_mpyd_acc_lh_s1
    416U,	// M2_mpyd_acc_ll_s0
    1824U,	// M2_mpyd_acc_ll_s1
    324U,	// M2_mpyd_hh_s0
    1732U,	// M2_mpyd_hh_s1
    388U,	// M2_mpyd_hl_s0
    1796U,	// M2_mpyd_hl_s1
    324U,	// M2_mpyd_lh_s0
    1732U,	// M2_mpyd_lh_s1
    388U,	// M2_mpyd_ll_s0
    1796U,	// M2_mpyd_ll_s1
    352U,	// M2_mpyd_nac_hh_s0
    1760U,	// M2_mpyd_nac_hh_s1
    416U,	// M2_mpyd_nac_hl_s0
    1824U,	// M2_mpyd_nac_hl_s1
    352U,	// M2_mpyd_nac_lh_s0
    1760U,	// M2_mpyd_nac_lh_s1
    416U,	// M2_mpyd_nac_ll_s0
    1824U,	// M2_mpyd_nac_ll_s1
    1860U,	// M2_mpyd_rnd_hh_s0
    1924U,	// M2_mpyd_rnd_hh_s1
    1988U,	// M2_mpyd_rnd_hl_s0
    2052U,	// M2_mpyd_rnd_hl_s1
    1860U,	// M2_mpyd_rnd_lh_s0
    1924U,	// M2_mpyd_rnd_lh_s1
    1988U,	// M2_mpyd_rnd_ll_s0
    2052U,	// M2_mpyd_rnd_ll_s1
    644U,	// M2_mpyi
    0U,	// M2_mpysin
    0U,	// M2_mpysip
    645U,	// M2_mpysmi
    0U,	// M2_mpysu_up
    352U,	// M2_mpyu_acc_hh_s0
    1760U,	// M2_mpyu_acc_hh_s1
    416U,	// M2_mpyu_acc_hl_s0
    1824U,	// M2_mpyu_acc_hl_s1
    352U,	// M2_mpyu_acc_lh_s0
    1760U,	// M2_mpyu_acc_lh_s1
    416U,	// M2_mpyu_acc_ll_s0
    1824U,	// M2_mpyu_acc_ll_s1
    324U,	// M2_mpyu_hh_s0
    1732U,	// M2_mpyu_hh_s1
    388U,	// M2_mpyu_hl_s0
    1796U,	// M2_mpyu_hl_s1
    324U,	// M2_mpyu_lh_s0
    1732U,	// M2_mpyu_lh_s1
    388U,	// M2_mpyu_ll_s0
    1796U,	// M2_mpyu_ll_s1
    352U,	// M2_mpyu_nac_hh_s0
    1760U,	// M2_mpyu_nac_hh_s1
    416U,	// M2_mpyu_nac_hl_s0
    1824U,	// M2_mpyu_nac_hl_s1
    352U,	// M2_mpyu_nac_lh_s0
    1760U,	// M2_mpyu_nac_lh_s1
    416U,	// M2_mpyu_nac_ll_s0
    1824U,	// M2_mpyu_nac_ll_s1
    644U,	// M2_mpyu_up
    352U,	// M2_mpyud_acc_hh_s0
    1760U,	// M2_mpyud_acc_hh_s1
    416U,	// M2_mpyud_acc_hl_s0
    1824U,	// M2_mpyud_acc_hl_s1
    352U,	// M2_mpyud_acc_lh_s0
    1760U,	// M2_mpyud_acc_lh_s1
    416U,	// M2_mpyud_acc_ll_s0
    1824U,	// M2_mpyud_acc_ll_s1
    324U,	// M2_mpyud_hh_s0
    1732U,	// M2_mpyud_hh_s1
    388U,	// M2_mpyud_hl_s0
    1796U,	// M2_mpyud_hl_s1
    324U,	// M2_mpyud_lh_s0
    1732U,	// M2_mpyud_lh_s1
    388U,	// M2_mpyud_ll_s0
    1796U,	// M2_mpyud_ll_s1
    352U,	// M2_mpyud_nac_hh_s0
    1760U,	// M2_mpyud_nac_hh_s1
    416U,	// M2_mpyud_nac_hl_s0
    1824U,	// M2_mpyud_nac_hl_s1
    352U,	// M2_mpyud_nac_lh_s0
    1760U,	// M2_mpyud_nac_lh_s1
    416U,	// M2_mpyud_nac_ll_s0
    1824U,	// M2_mpyud_nac_ll_s1
    0U,	// M2_mpyui
    672U,	// M2_nacci
    44U,	// M2_naccii
    0U,	// M2_subacc
    0U,	// M2_vabsdiffh
    0U,	// M2_vabsdiffw
    0U,	// M2_vcmac_s0_sat_i
    0U,	// M2_vcmac_s0_sat_r
    0U,	// M2_vcmpy_s0_sat_i
    0U,	// M2_vcmpy_s0_sat_r
    0U,	// M2_vcmpy_s1_sat_i
    0U,	// M2_vcmpy_s1_sat_r
    0U,	// M2_vdmacs_s0
    0U,	// M2_vdmacs_s1
    0U,	// M2_vdmpyrs_s0
    0U,	// M2_vdmpyrs_s1
    0U,	// M2_vdmpys_s0
    0U,	// M2_vdmpys_s1
    0U,	// M2_vmac2
    0U,	// M2_vmac2es
    0U,	// M2_vmac2es_s0
    0U,	// M2_vmac2es_s1
    0U,	// M2_vmac2s_s0
    0U,	// M2_vmac2s_s1
    0U,	// M2_vmac2su_s0
    0U,	// M2_vmac2su_s1
    0U,	// M2_vmpy2es_s0
    0U,	// M2_vmpy2es_s1
    0U,	// M2_vmpy2s_s0
    0U,	// M2_vmpy2s_s0pack
    0U,	// M2_vmpy2s_s1
    0U,	// M2_vmpy2s_s1pack
    0U,	// M2_vmpy2su_s0
    0U,	// M2_vmpy2su_s1
    0U,	// M2_vraddh
    0U,	// M2_vradduh
    0U,	// M2_vrcmaci_s0
    0U,	// M2_vrcmaci_s0c
    0U,	// M2_vrcmacr_s0
    0U,	// M2_vrcmacr_s0c
    0U,	// M2_vrcmpyi_s0
    0U,	// M2_vrcmpyi_s0c
    0U,	// M2_vrcmpyr_s0
    0U,	// M2_vrcmpyr_s0c
    0U,	// M2_vrcmpys_acc_s1
    0U,	// M2_vrcmpys_acc_s1_h
    0U,	// M2_vrcmpys_acc_s1_l
    0U,	// M2_vrcmpys_s1
    0U,	// M2_vrcmpys_s1_h
    0U,	// M2_vrcmpys_s1_l
    0U,	// M2_vrcmpys_s1rp
    0U,	// M2_vrcmpys_s1rp_h
    0U,	// M2_vrcmpys_s1rp_l
    0U,	// M2_vrmac_s0
    0U,	// M2_vrmpy_s0
    0U,	// M2_xor_xacc
    672U,	// M4_and_and
    672U,	// M4_and_andn
    0U,	// M4_and_or
    0U,	// M4_and_xor
    0U,	// M4_cmpyi_wh
    0U,	// M4_cmpyi_whc
    0U,	// M4_cmpyr_wh
    0U,	// M4_cmpyr_whc
    2336U,	// M4_mac_up_s1_sat
    29379U,	// M4_mpyri_addi
    25581U,	// M4_mpyri_addr
    46U,	// M4_mpyri_addr_u2
    29376U,	// M4_mpyrr_addi
    29613U,	// M4_mpyrr_addr
    2336U,	// M4_nac_up_s1_sat
    672U,	// M4_or_and
    672U,	// M4_or_andn
    672U,	// M4_or_or
    0U,	// M4_or_xor
    0U,	// M4_pmpyw
    0U,	// M4_pmpyw_acc
    0U,	// M4_vpmpyh
    0U,	// M4_vpmpyh_acc
    0U,	// M4_vrmpyeh_acc_s0
    0U,	// M4_vrmpyeh_acc_s1
    0U,	// M4_vrmpyeh_s0
    0U,	// M4_vrmpyeh_s1
    0U,	// M4_vrmpyoh_acc_s0
    0U,	// M4_vrmpyoh_acc_s1
    0U,	// M4_vrmpyoh_s0
    0U,	// M4_vrmpyoh_s1
    672U,	// M4_xor_and
    672U,	// M4_xor_andn
    0U,	// M4_xor_or
    0U,	// M4_xor_xacc
    0U,	// M5_vdmacbsu
    0U,	// M5_vdmpybsu
    0U,	// M5_vmacbsu
    0U,	// M5_vmacbuu
    0U,	// M5_vmpybsu
    0U,	// M5_vmpybuu
    0U,	// M5_vrmacbsu
    0U,	// M5_vrmacbuu
    0U,	// M5_vrmpybsu
    0U,	// M5_vrmpybuu
    0U,	// MUX64_rr
    25540U,	// MUX_ir_f
    901U,	// MUX_ri_f
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT
    0U,	// S2_addasl_rrri
    0U,	// S2_allocframe
    644U,	// S2_asl_i_p
    672U,	// S2_asl_i_p_acc
    672U,	// S2_asl_i_p_and
    672U,	// S2_asl_i_p_nac
    672U,	// S2_asl_i_p_or
    672U,	// S2_asl_i_p_xacc
    644U,	// S2_asl_i_r
    672U,	// S2_asl_i_r_acc
    672U,	// S2_asl_i_r_and
    672U,	// S2_asl_i_r_nac
    672U,	// S2_asl_i_r_or
    836U,	// S2_asl_i_r_sat
    672U,	// S2_asl_i_r_xacc
    644U,	// S2_asl_i_vh
    644U,	// S2_asl_i_vw
    644U,	// S2_asl_r_p
    672U,	// S2_asl_r_p_acc
    672U,	// S2_asl_r_p_and
    672U,	// S2_asl_r_p_nac
    672U,	// S2_asl_r_p_or
    672U,	// S2_asl_r_p_xor
    644U,	// S2_asl_r_r
    672U,	// S2_asl_r_r_acc
    672U,	// S2_asl_r_r_and
    672U,	// S2_asl_r_r_nac
    672U,	// S2_asl_r_r_or
    836U,	// S2_asl_r_r_sat
    644U,	// S2_asl_r_vh
    644U,	// S2_asl_r_vw
    644U,	// S2_asr_i_p
    672U,	// S2_asr_i_p_acc
    672U,	// S2_asr_i_p_and
    672U,	// S2_asr_i_p_nac
    672U,	// S2_asr_i_p_or
    1412U,	// S2_asr_i_p_rnd
    0U,	// S2_asr_i_p_rnd_goodsyntax
    644U,	// S2_asr_i_r
    672U,	// S2_asr_i_r_acc
    672U,	// S2_asr_i_r_and
    672U,	// S2_asr_i_r_nac
    672U,	// S2_asr_i_r_or
    1412U,	// S2_asr_i_r_rnd
    0U,	// S2_asr_i_r_rnd_goodsyntax
    644U,	// S2_asr_i_svw_trun
    644U,	// S2_asr_i_vh
    644U,	// S2_asr_i_vw
    644U,	// S2_asr_r_p
    672U,	// S2_asr_r_p_acc
    672U,	// S2_asr_r_p_and
    672U,	// S2_asr_r_p_nac
    672U,	// S2_asr_r_p_or
    0U,	// S2_asr_r_p_xor
    644U,	// S2_asr_r_r
    672U,	// S2_asr_r_r_acc
    672U,	// S2_asr_r_r_and
    672U,	// S2_asr_r_r_nac
    672U,	// S2_asr_r_r_or
    836U,	// S2_asr_r_r_sat
    644U,	// S2_asr_r_svw_trun
    644U,	// S2_asr_r_vh
    644U,	// S2_asr_r_vw
    0U,	// S2_brev
    0U,	// S2_brevp
    0U,	// S2_cabacdecbin
    0U,	// S2_cabacencbin
    0U,	// S2_cl0
    0U,	// S2_cl0p
    0U,	// S2_cl1
    0U,	// S2_cl1p
    0U,	// S2_clb
    0U,	// S2_clbnorm
    0U,	// S2_clbp
    644U,	// S2_clrbit_i
    644U,	// S2_clrbit_r
    0U,	// S2_ct0
    0U,	// S2_ct0p
    0U,	// S2_ct1
    0U,	// S2_ct1p
    0U,	// S2_deinterleave
    21444U,	// S2_extractu
    644U,	// S2_extractu_rp
    21444U,	// S2_extractup
    644U,	// S2_extractup_rp
    37856U,	// S2_insert
    672U,	// S2_insert_rp
    37856U,	// S2_insertp
    672U,	// S2_insertp_rp
    0U,	// S2_interleave
    0U,	// S2_lfsp
    0U,	// S2_lsl_r_p
    0U,	// S2_lsl_r_p_acc
    0U,	// S2_lsl_r_p_and
    0U,	// S2_lsl_r_p_nac
    0U,	// S2_lsl_r_p_or
    0U,	// S2_lsl_r_p_xor
    0U,	// S2_lsl_r_r
    0U,	// S2_lsl_r_r_acc
    0U,	// S2_lsl_r_r_and
    0U,	// S2_lsl_r_r_nac
    0U,	// S2_lsl_r_r_or
    0U,	// S2_lsl_r_vh
    0U,	// S2_lsl_r_vw
    644U,	// S2_lsr_i_p
    672U,	// S2_lsr_i_p_acc
    672U,	// S2_lsr_i_p_and
    672U,	// S2_lsr_i_p_nac
    672U,	// S2_lsr_i_p_or
    672U,	// S2_lsr_i_p_xacc
    644U,	// S2_lsr_i_r
    672U,	// S2_lsr_i_r_acc
    672U,	// S2_lsr_i_r_and
    672U,	// S2_lsr_i_r_nac
    672U,	// S2_lsr_i_r_or
    672U,	// S2_lsr_i_r_xacc
    644U,	// S2_lsr_i_vh
    644U,	// S2_lsr_i_vw
    644U,	// S2_lsr_r_p
    672U,	// S2_lsr_r_p_acc
    672U,	// S2_lsr_r_p_and
    672U,	// S2_lsr_r_p_nac
    672U,	// S2_lsr_r_p_or
    672U,	// S2_lsr_r_p_xor
    644U,	// S2_lsr_r_r
    672U,	// S2_lsr_r_r_acc
    672U,	// S2_lsr_r_r_and
    672U,	// S2_lsr_r_r_nac
    672U,	// S2_lsr_r_r_or
    644U,	// S2_lsr_r_vh
    644U,	// S2_lsr_r_vw
    0U,	// S2_packhl
    0U,	// S2_parityp
    41583U,	// S2_pstorerbf_io
    41694U,	// S2_pstorerbf_pi
    41694U,	// S2_pstorerbfnew_pi
    41583U,	// S2_pstorerbnewf_io
    41694U,	// S2_pstorerbnewf_pi
    41694U,	// S2_pstorerbnewfnew_pi
    41583U,	// S2_pstorerbnewt_io
    41694U,	// S2_pstorerbnewt_pi
    41694U,	// S2_pstorerbnewtnew_pi
    41583U,	// S2_pstorerbt_io
    41694U,	// S2_pstorerbt_pi
    41694U,	// S2_pstorerbtnew_pi
    41583U,	// S2_pstorerdf_io
    41694U,	// S2_pstorerdf_pi
    41694U,	// S2_pstorerdfnew_pi
    41583U,	// S2_pstorerdt_io
    41694U,	// S2_pstorerdt_pi
    41694U,	// S2_pstorerdtnew_pi
    41583U,	// S2_pstorerff_io
    41694U,	// S2_pstorerff_pi
    41694U,	// S2_pstorerffnew_pi
    41583U,	// S2_pstorerft_io
    41694U,	// S2_pstorerft_pi
    41694U,	// S2_pstorerftnew_pi
    41583U,	// S2_pstorerhf_io
    41694U,	// S2_pstorerhf_pi
    41694U,	// S2_pstorerhfnew_pi
    41583U,	// S2_pstorerhnewf_io
    41694U,	// S2_pstorerhnewf_pi
    41694U,	// S2_pstorerhnewfnew_pi
    41583U,	// S2_pstorerhnewt_io
    41694U,	// S2_pstorerhnewt_pi
    41694U,	// S2_pstorerhnewtnew_pi
    41583U,	// S2_pstorerht_io
    41694U,	// S2_pstorerht_pi
    41694U,	// S2_pstorerhtnew_pi
    41583U,	// S2_pstorerif_io
    41694U,	// S2_pstorerif_pi
    41694U,	// S2_pstorerifnew_pi
    41583U,	// S2_pstorerinewf_io
    41694U,	// S2_pstorerinewf_pi
    41694U,	// S2_pstorerinewfnew_pi
    41583U,	// S2_pstorerinewt_io
    41694U,	// S2_pstorerinewt_pi
    41694U,	// S2_pstorerinewtnew_pi
    41583U,	// S2_pstorerit_io
    41694U,	// S2_pstorerit_pi
    41694U,	// S2_pstoreritnew_pi
    644U,	// S2_setbit_i
    644U,	// S2_setbit_r
    0U,	// S2_shuffeb
    0U,	// S2_shuffeh
    0U,	// S2_shuffob
    0U,	// S2_shuffoh
    45104U,	// S2_storerb_io
    0U,	// S2_storerb_pbr
    49U,	// S2_storerb_pbr_pseudo
    0U,	// S2_storerb_pci
    0U,	// S2_storerb_pci_pseudo
    0U,	// S2_storerb_pcr
    45808U,	// S2_storerb_pi
    45808U,	// S2_storerb_pr
    0U,	// S2_storerbabs
    0U,	// S2_storerbgp
    49200U,	// S2_storerbnew_io
    0U,	// S2_storerbnew_pbr
    0U,	// S2_storerbnew_pci
    0U,	// S2_storerbnew_pcr
    49904U,	// S2_storerbnew_pi
    49904U,	// S2_storerbnew_pr
    0U,	// S2_storerbnewabs
    0U,	// S2_storerbnewgp
    45104U,	// S2_storerd_io
    0U,	// S2_storerd_pbr
    49U,	// S2_storerd_pbr_pseudo
    0U,	// S2_storerd_pci
    0U,	// S2_storerd_pci_pseudo
    0U,	// S2_storerd_pcr
    45808U,	// S2_storerd_pi
    45808U,	// S2_storerd_pr
    0U,	// S2_storerdabs
    0U,	// S2_storerdgp
    53296U,	// S2_storerf_io
    0U,	// S2_storerf_pbr
    49U,	// S2_storerf_pbr_pseudo
    0U,	// S2_storerf_pci
    0U,	// S2_storerf_pci_pseudo
    0U,	// S2_storerf_pcr
    54000U,	// S2_storerf_pi
    54000U,	// S2_storerf_pr
    0U,	// S2_storerfabs
    0U,	// S2_storerfgp
    45104U,	// S2_storerh_io
    0U,	// S2_storerh_pbr
    49U,	// S2_storerh_pbr_pseudo
    0U,	// S2_storerh_pci
    0U,	// S2_storerh_pci_pseudo
    0U,	// S2_storerh_pcr
    45808U,	// S2_storerh_pi
    45808U,	// S2_storerh_pr
    0U,	// S2_storerhabs
    0U,	// S2_storerhgp
    49200U,	// S2_storerhnew_io
    0U,	// S2_storerhnew_pbr
    0U,	// S2_storerhnew_pci
    0U,	// S2_storerhnew_pcr
    49904U,	// S2_storerhnew_pi
    49904U,	// S2_storerhnew_pr
    0U,	// S2_storerhnewabs
    0U,	// S2_storerhnewgp
    45104U,	// S2_storeri_io
    0U,	// S2_storeri_pbr
    49U,	// S2_storeri_pbr_pseudo
    0U,	// S2_storeri_pci
    0U,	// S2_storeri_pci_pseudo
    0U,	// S2_storeri_pcr
    45808U,	// S2_storeri_pi
    45808U,	// S2_storeri_pr
    0U,	// S2_storeriabs
    0U,	// S2_storerigp
    49200U,	// S2_storerinew_io
    0U,	// S2_storerinew_pbr
    0U,	// S2_storerinew_pci
    0U,	// S2_storerinew_pcr
    49904U,	// S2_storerinew_pi
    49904U,	// S2_storerinew_pr
    0U,	// S2_storerinewabs
    0U,	// S2_storerinewgp
    45104U,	// S2_storew_locked
    0U,	// S2_svsathb
    0U,	// S2_svsathub
    0U,	// S2_tableidxb
    0U,	// S2_tableidxb_goodsyntax
    0U,	// S2_tableidxd
    0U,	// S2_tableidxd_goodsyntax
    0U,	// S2_tableidxh
    0U,	// S2_tableidxh_goodsyntax
    0U,	// S2_tableidxw
    0U,	// S2_tableidxw_goodsyntax
    644U,	// S2_togglebit_i
    644U,	// S2_togglebit_r
    644U,	// S2_tstbit_i
    644U,	// S2_tstbit_r
    672U,	// S2_valignib
    672U,	// S2_valignrb
    0U,	// S2_vcnegh
    0U,	// S2_vcrotate
    0U,	// S2_vrcnegh
    0U,	// S2_vrndpackwh
    0U,	// S2_vrndpackwhs
    0U,	// S2_vsathb
    0U,	// S2_vsathb_nopack
    0U,	// S2_vsathub
    0U,	// S2_vsathub_nopack
    0U,	// S2_vsatwh
    0U,	// S2_vsatwh_nopack
    0U,	// S2_vsatwuh
    0U,	// S2_vsatwuh_nopack
    0U,	// S2_vsplatrb
    0U,	// S2_vsplatrh
    672U,	// S2_vspliceib
    672U,	// S2_vsplicerb
    0U,	// S2_vsxtbh
    0U,	// S2_vsxthw
    0U,	// S2_vtrunehb
    0U,	// S2_vtrunewh
    0U,	// S2_vtrunohb
    0U,	// S2_vtrunowh
    0U,	// S2_vzxtbh
    0U,	// S2_vzxthw
    50U,	// S4_addaddi
    0U,	// S4_addi_asl_ri
    0U,	// S4_addi_lsr_ri
    0U,	// S4_andi_asl_ri
    0U,	// S4_andi_lsr_ri
    0U,	// S4_clbaddi
    0U,	// S4_clbpaddi
    0U,	// S4_clbpnorm
    21444U,	// S4_extract
    644U,	// S4_extract_rp
    21444U,	// S4_extractp
    644U,	// S4_extractp_rp
    0U,	// S4_lsli
    644U,	// S4_ntstbit_i
    644U,	// S4_ntstbit_r
    44U,	// S4_or_andi
    29443U,	// S4_or_andix
    44U,	// S4_or_ori
    0U,	// S4_ori_asl_ri
    0U,	// S4_ori_lsr_ri
    0U,	// S4_parity
    0U,	// S4_pstorerbf_abs
    2419U,	// S4_pstorerbf_rr
    0U,	// S4_pstorerbfnew_abs
    41583U,	// S4_pstorerbfnew_io
    2419U,	// S4_pstorerbfnew_rr
    0U,	// S4_pstorerbnewf_abs
    2483U,	// S4_pstorerbnewf_rr
    0U,	// S4_pstorerbnewfnew_abs
    41583U,	// S4_pstorerbnewfnew_io
    2483U,	// S4_pstorerbnewfnew_rr
    0U,	// S4_pstorerbnewt_abs
    2483U,	// S4_pstorerbnewt_rr
    0U,	// S4_pstorerbnewtnew_abs
    41583U,	// S4_pstorerbnewtnew_io
    2483U,	// S4_pstorerbnewtnew_rr
    0U,	// S4_pstorerbt_abs
    2419U,	// S4_pstorerbt_rr
    0U,	// S4_pstorerbtnew_abs
    41583U,	// S4_pstorerbtnew_io
    2419U,	// S4_pstorerbtnew_rr
    0U,	// S4_pstorerdf_abs
    2419U,	// S4_pstorerdf_rr
    0U,	// S4_pstorerdfnew_abs
    41583U,	// S4_pstorerdfnew_io
    2419U,	// S4_pstorerdfnew_rr
    0U,	// S4_pstorerdt_abs
    2419U,	// S4_pstorerdt_rr
    0U,	// S4_pstorerdtnew_abs
    41583U,	// S4_pstorerdtnew_io
    2419U,	// S4_pstorerdtnew_rr
    0U,	// S4_pstorerff_abs
    2547U,	// S4_pstorerff_rr
    0U,	// S4_pstorerffnew_abs
    41583U,	// S4_pstorerffnew_io
    2547U,	// S4_pstorerffnew_rr
    0U,	// S4_pstorerft_abs
    2547U,	// S4_pstorerft_rr
    0U,	// S4_pstorerftnew_abs
    41583U,	// S4_pstorerftnew_io
    2547U,	// S4_pstorerftnew_rr
    0U,	// S4_pstorerhf_abs
    2419U,	// S4_pstorerhf_rr
    0U,	// S4_pstorerhfnew_abs
    41583U,	// S4_pstorerhfnew_io
    2419U,	// S4_pstorerhfnew_rr
    0U,	// S4_pstorerhnewf_abs
    2483U,	// S4_pstorerhnewf_rr
    0U,	// S4_pstorerhnewfnew_abs
    41583U,	// S4_pstorerhnewfnew_io
    2483U,	// S4_pstorerhnewfnew_rr
    0U,	// S4_pstorerhnewt_abs
    2483U,	// S4_pstorerhnewt_rr
    0U,	// S4_pstorerhnewtnew_abs
    41583U,	// S4_pstorerhnewtnew_io
    2483U,	// S4_pstorerhnewtnew_rr
    0U,	// S4_pstorerht_abs
    2419U,	// S4_pstorerht_rr
    0U,	// S4_pstorerhtnew_abs
    41583U,	// S4_pstorerhtnew_io
    2419U,	// S4_pstorerhtnew_rr
    0U,	// S4_pstorerif_abs
    2419U,	// S4_pstorerif_rr
    0U,	// S4_pstorerifnew_abs
    41583U,	// S4_pstorerifnew_io
    2419U,	// S4_pstorerifnew_rr
    0U,	// S4_pstorerinewf_abs
    2483U,	// S4_pstorerinewf_rr
    0U,	// S4_pstorerinewfnew_abs
    41583U,	// S4_pstorerinewfnew_io
    2483U,	// S4_pstorerinewfnew_rr
    0U,	// S4_pstorerinewt_abs
    2483U,	// S4_pstorerinewt_rr
    0U,	// S4_pstorerinewtnew_abs
    41583U,	// S4_pstorerinewtnew_io
    2483U,	// S4_pstorerinewtnew_rr
    0U,	// S4_pstorerit_abs
    2419U,	// S4_pstorerit_rr
    0U,	// S4_pstoreritnew_abs
    41583U,	// S4_pstoreritnew_io
    2419U,	// S4_pstoreritnew_rr
    45104U,	// S4_stored_locked
    52U,	// S4_storeirb_io
    57391U,	// S4_storeirbf_io
    57391U,	// S4_storeirbfnew_io
    57391U,	// S4_storeirbt_io
    57391U,	// S4_storeirbtnew_io
    52U,	// S4_storeirh_io
    57391U,	// S4_storeirhf_io
    57391U,	// S4_storeirhfnew_io
    57391U,	// S4_storeirht_io
    57391U,	// S4_storeirhtnew_io
    52U,	// S4_storeiri_io
    57391U,	// S4_storeirif_io
    57391U,	// S4_storeirifnew_io
    57391U,	// S4_storeirit_io
    57391U,	// S4_storeiritnew_io
    45104U,	// S4_storerb_ap
    0U,	// S4_storerb_rr
    0U,	// S4_storerb_ur
    49200U,	// S4_storerbnew_ap
    0U,	// S4_storerbnew_rr
    0U,	// S4_storerbnew_ur
    45104U,	// S4_storerd_ap
    0U,	// S4_storerd_rr
    0U,	// S4_storerd_ur
    53296U,	// S4_storerf_ap
    0U,	// S4_storerf_rr
    0U,	// S4_storerf_ur
    45104U,	// S4_storerh_ap
    0U,	// S4_storerh_rr
    0U,	// S4_storerh_ur
    49200U,	// S4_storerhnew_ap
    0U,	// S4_storerhnew_rr
    0U,	// S4_storerhnew_ur
    45104U,	// S4_storeri_ap
    0U,	// S4_storeri_rr
    0U,	// S4_storeri_ur
    49200U,	// S4_storerinew_ap
    0U,	// S4_storerinew_rr
    0U,	// S4_storerinew_ur
    53U,	// S4_subaddi
    0U,	// S4_subi_asl_ri
    0U,	// S4_subi_lsr_ri
    0U,	// S4_vrcrotate
    0U,	// S4_vrcrotate_acc
    0U,	// S4_vxaddsubh
    0U,	// S4_vxaddsubhr
    0U,	// S4_vxaddsubw
    0U,	// S4_vxsubaddh
    0U,	// S4_vxsubaddhr
    0U,	// S4_vxsubaddw
    0U,	// S5_asrhub_rnd_sat
    0U,	// S5_asrhub_rnd_sat_goodsyntax
    0U,	// S5_asrhub_sat
    0U,	// S5_popcountp
    2564U,	// S5_vasrhrnd
    1412U,	// S5_vasrhrnd_goodsyntax
    0U,	// S6_rol_i_p
    0U,	// S6_rol_i_p_acc
    0U,	// S6_rol_i_p_and
    0U,	// S6_rol_i_p_nac
    0U,	// S6_rol_i_p_or
    0U,	// S6_rol_i_p_xacc
    0U,	// S6_rol_i_r
    0U,	// S6_rol_i_r_acc
    0U,	// S6_rol_i_r_and
    0U,	// S6_rol_i_r_nac
    0U,	// S6_rol_i_r_or
    0U,	// S6_rol_i_r_xacc
    0U,	// SAVE_REGISTERS_CALL_V4
    0U,	// SAVE_REGISTERS_CALL_V4_EXT
    0U,	// STriq_pred_V6
    0U,	// STriq_pred_V6_128B
    0U,	// STriq_pred_vec_V6
    0U,	// STriq_pred_vec_V6_128B
    0U,	// STriv_pseudo_V6
    0U,	// STriv_pseudo_V6_128B
    45104U,	// STrivv_indexed
    45104U,	// STrivv_indexed_128B
    0U,	// STrivv_pseudo_V6
    0U,	// STrivv_pseudo_V6_128B
    0U,	// STriw_pred
    0U,	// TCRETURNi
    0U,	// TCRETURNr
    0U,	// TFRI64_V2_ext
    6U,	// TFRI64_V4
    0U,	// TFRI_cNotPt_f
    0U,	// TFRI_cPt_f
    6U,	// TFRI_f
    0U,	// TFR_FI
    0U,	// TFR_FIA
    2624U,	// TFR_PdFalse
    0U,	// TFR_PdTrue
    579U,	// V4_SA1_addi
    0U,	// V4_SA1_addrx
    0U,	// V4_SA1_addsp
    0U,	// V4_SA1_and1
    0U,	// V4_SA1_clrf
    0U,	// V4_SA1_clrfnew
    0U,	// V4_SA1_clrt
    0U,	// V4_SA1_clrtnew
    0U,	// V4_SA1_cmpeqi
    0U,	// V4_SA1_combine0i
    0U,	// V4_SA1_combine1i
    0U,	// V4_SA1_combine2i
    0U,	// V4_SA1_combine3i
    0U,	// V4_SA1_combinerz
    0U,	// V4_SA1_combinezr
    54U,	// V4_SA1_dec
    55U,	// V4_SA1_inc
    6U,	// V4_SA1_seti
    0U,	// V4_SA1_setin1
    0U,	// V4_SA1_sxtb
    0U,	// V4_SA1_sxth
    0U,	// V4_SA1_tfr
    0U,	// V4_SA1_zxtb
    0U,	// V4_SA1_zxth
    26U,	// V4_SL1_loadri_io
    26U,	// V4_SL1_loadrub_io
    0U,	// V4_SL2_deallocframe
    0U,	// V4_SL2_jumpr31
    0U,	// V4_SL2_jumpr31_f
    0U,	// V4_SL2_jumpr31_fnew
    0U,	// V4_SL2_jumpr31_t
    0U,	// V4_SL2_jumpr31_tnew
    26U,	// V4_SL2_loadrb_io
    0U,	// V4_SL2_loadrd_sp
    26U,	// V4_SL2_loadrh_io
    0U,	// V4_SL2_loadri_sp
    26U,	// V4_SL2_loadruh_io
    0U,	// V4_SL2_return
    0U,	// V4_SL2_return_f
    0U,	// V4_SL2_return_fnew
    0U,	// V4_SL2_return_t
    0U,	// V4_SL2_return_tnew
    0U,	// V4_SS1_storeb_io
    0U,	// V4_SS1_storew_io
    0U,	// V4_SS2_allocframe
    0U,	// V4_SS2_storebi0
    0U,	// V4_SS2_storebi1
    0U,	// V4_SS2_stored_sp
    0U,	// V4_SS2_storeh_io
    0U,	// V4_SS2_storew_sp
    0U,	// V4_SS2_storewi0
    0U,	// V4_SS2_storewi1
    0U,	// V6_extractw
    0U,	// V6_extractw_128B
    0U,	// V6_lvsplatw
    0U,	// V6_lvsplatw_128B
    644U,	// V6_pred_and
    644U,	// V6_pred_and_128B
    0U,	// V6_pred_and_n
    0U,	// V6_pred_and_n_128B
    0U,	// V6_pred_not
    0U,	// V6_pred_not_128B
    644U,	// V6_pred_or
    644U,	// V6_pred_or_128B
    0U,	// V6_pred_or_n
    0U,	// V6_pred_or_n_128B
    0U,	// V6_pred_scalar2
    0U,	// V6_pred_scalar2_128B
    56U,	// V6_pred_xor
    56U,	// V6_pred_xor_128B
    2735U,	// V6_vL32Ub_ai
    2799U,	// V6_vL32Ub_ai_128B
    2846U,	// V6_vL32Ub_pi
    2910U,	// V6_vL32Ub_pi_128B
    735U,	// V6_vL32Ub_ppu
    2735U,	// V6_vL32b_ai
    2799U,	// V6_vL32b_ai_128B
    2735U,	// V6_vL32b_cur_ai
    2799U,	// V6_vL32b_cur_ai_128B
    2846U,	// V6_vL32b_cur_pi
    2910U,	// V6_vL32b_cur_pi_128B
    735U,	// V6_vL32b_cur_ppu
    64175U,	// V6_vL32b_nt_ai
    64239U,	// V6_vL32b_nt_ai_128B
    64175U,	// V6_vL32b_nt_cur_ai
    64239U,	// V6_vL32b_nt_cur_ai_128B
    64286U,	// V6_vL32b_nt_cur_pi
    64350U,	// V6_vL32b_nt_cur_pi_128B
    62175U,	// V6_vL32b_nt_cur_ppu
    64286U,	// V6_vL32b_nt_pi
    64350U,	// V6_vL32b_nt_pi_128B
    62175U,	// V6_vL32b_nt_ppu
    64175U,	// V6_vL32b_nt_tmp_ai
    2799U,	// V6_vL32b_nt_tmp_ai_128B
    64286U,	// V6_vL32b_nt_tmp_pi
    64350U,	// V6_vL32b_nt_tmp_pi_128B
    62175U,	// V6_vL32b_nt_tmp_ppu
    2846U,	// V6_vL32b_pi
    2910U,	// V6_vL32b_pi_128B
    735U,	// V6_vL32b_ppu
    2735U,	// V6_vL32b_tmp_ai
    2799U,	// V6_vL32b_tmp_ai_128B
    2846U,	// V6_vL32b_tmp_pi
    2910U,	// V6_vL32b_tmp_pi_128B
    735U,	// V6_vL32b_tmp_ppu
    45104U,	// V6_vS32Ub_ai
    45104U,	// V6_vS32Ub_ai_128B
    43695U,	// V6_vS32Ub_npred_ai
    43759U,	// V6_vS32Ub_npred_ai_128B
    43806U,	// V6_vS32Ub_npred_pi
    43870U,	// V6_vS32Ub_npred_pi_128B
    41695U,	// V6_vS32Ub_npred_ppu
    45808U,	// V6_vS32Ub_pi
    45808U,	// V6_vS32Ub_pi_128B
    45808U,	// V6_vS32Ub_ppu
    43695U,	// V6_vS32Ub_pred_ai
    43759U,	// V6_vS32Ub_pred_ai_128B
    43806U,	// V6_vS32Ub_pred_pi
    43870U,	// V6_vS32Ub_pred_pi_128B
    41695U,	// V6_vS32Ub_pred_ppu
    45104U,	// V6_vS32b_ai
    45104U,	// V6_vS32b_ai_128B
    49200U,	// V6_vS32b_new_ai
    49200U,	// V6_vS32b_new_ai_128B
    43695U,	// V6_vS32b_new_npred_ai
    43759U,	// V6_vS32b_new_npred_ai_128B
    43806U,	// V6_vS32b_new_npred_pi
    43870U,	// V6_vS32b_new_npred_pi_128B
    41695U,	// V6_vS32b_new_npred_ppu
    49904U,	// V6_vS32b_new_pi
    49904U,	// V6_vS32b_new_pi_128B
    49904U,	// V6_vS32b_new_ppu
    43695U,	// V6_vS32b_new_pred_ai
    43759U,	// V6_vS32b_new_pred_ai_128B
    43806U,	// V6_vS32b_new_pred_pi
    43870U,	// V6_vS32b_new_pred_pi_128B
    41695U,	// V6_vS32b_new_pred_ppu
    43695U,	// V6_vS32b_npred_ai
    43759U,	// V6_vS32b_npred_ai_128B
    43806U,	// V6_vS32b_npred_pi
    43870U,	// V6_vS32b_npred_pi_128B
    41695U,	// V6_vS32b_npred_ppu
    43695U,	// V6_vS32b_nqpred_ai
    43759U,	// V6_vS32b_nqpred_ai_128B
    43806U,	// V6_vS32b_nqpred_pi
    43870U,	// V6_vS32b_nqpred_pi_128B
    41695U,	// V6_vS32b_nqpred_ppu
    45113U,	// V6_vS32b_nt_ai
    45113U,	// V6_vS32b_nt_ai_128B
    49209U,	// V6_vS32b_nt_new_ai
    49209U,	// V6_vS32b_nt_new_ai_128B
    2735U,	// V6_vS32b_nt_new_npred_ai
    2799U,	// V6_vS32b_nt_new_npred_ai_128B
    2846U,	// V6_vS32b_nt_new_npred_pi
    2910U,	// V6_vS32b_nt_new_npred_pi_128B
    735U,	// V6_vS32b_nt_new_npred_ppu
    49913U,	// V6_vS32b_nt_new_pi
    49913U,	// V6_vS32b_nt_new_pi_128B
    49913U,	// V6_vS32b_nt_new_ppu
    2735U,	// V6_vS32b_nt_new_pred_ai
    2799U,	// V6_vS32b_nt_new_pred_ai_128B
    2846U,	// V6_vS32b_nt_new_pred_pi
    2910U,	// V6_vS32b_nt_new_pred_pi_128B
    735U,	// V6_vS32b_nt_new_pred_ppu
    2735U,	// V6_vS32b_nt_npred_ai
    2799U,	// V6_vS32b_nt_npred_ai_128B
    2846U,	// V6_vS32b_nt_npred_pi
    2910U,	// V6_vS32b_nt_npred_pi_128B
    735U,	// V6_vS32b_nt_npred_ppu
    2735U,	// V6_vS32b_nt_nqpred_ai
    2799U,	// V6_vS32b_nt_nqpred_ai_128B
    2846U,	// V6_vS32b_nt_nqpred_pi
    2910U,	// V6_vS32b_nt_nqpred_pi_128B
    735U,	// V6_vS32b_nt_nqpred_ppu
    45817U,	// V6_vS32b_nt_pi
    45817U,	// V6_vS32b_nt_pi_128B
    45817U,	// V6_vS32b_nt_ppu
    2735U,	// V6_vS32b_nt_pred_ai
    2799U,	// V6_vS32b_nt_pred_ai_128B
    2846U,	// V6_vS32b_nt_pred_pi
    2910U,	// V6_vS32b_nt_pred_pi_128B
    735U,	// V6_vS32b_nt_pred_ppu
    2735U,	// V6_vS32b_nt_qpred_ai
    2799U,	// V6_vS32b_nt_qpred_ai_128B
    2846U,	// V6_vS32b_nt_qpred_pi
    2910U,	// V6_vS32b_nt_qpred_pi_128B
    735U,	// V6_vS32b_nt_qpred_ppu
    45808U,	// V6_vS32b_pi
    45808U,	// V6_vS32b_pi_128B
    45808U,	// V6_vS32b_ppu
    43695U,	// V6_vS32b_pred_ai
    43759U,	// V6_vS32b_pred_ai_128B
    43806U,	// V6_vS32b_pred_pi
    43870U,	// V6_vS32b_pred_pi_128B
    41695U,	// V6_vS32b_pred_ppu
    43695U,	// V6_vS32b_qpred_ai
    43759U,	// V6_vS32b_qpred_ai_128B
    43806U,	// V6_vS32b_qpred_pi
    43870U,	// V6_vS32b_qpred_pi_128B
    41695U,	// V6_vS32b_qpred_ppu
    324U,	// V6_vabsdiffh
    324U,	// V6_vabsdiffh_128B
    0U,	// V6_vabsdiffub
    0U,	// V6_vabsdiffub_128B
    2948U,	// V6_vabsdiffuh
    2948U,	// V6_vabsdiffuh_128B
    0U,	// V6_vabsdiffw
    0U,	// V6_vabsdiffw_128B
    0U,	// V6_vabsh
    0U,	// V6_vabsh_128B
    0U,	// V6_vabsh_sat
    0U,	// V6_vabsh_sat_128B
    0U,	// V6_vabsw
    0U,	// V6_vabsw_128B
    0U,	// V6_vabsw_sat
    0U,	// V6_vabsw_sat_128B
    0U,	// V6_vaddb
    0U,	// V6_vaddb_128B
    0U,	// V6_vaddb_dv
    0U,	// V6_vaddb_dv_128B
    0U,	// V6_vaddbnq
    0U,	// V6_vaddbnq_128B
    0U,	// V6_vaddbq
    0U,	// V6_vaddbq_128B
    324U,	// V6_vaddh
    324U,	// V6_vaddh_128B
    324U,	// V6_vaddh_dv
    324U,	// V6_vaddh_dv_128B
    0U,	// V6_vaddhnq
    0U,	// V6_vaddhnq_128B
    0U,	// V6_vaddhq
    0U,	// V6_vaddhq_128B
    452U,	// V6_vaddhsat
    452U,	// V6_vaddhsat_128B
    452U,	// V6_vaddhsat_dv
    452U,	// V6_vaddhsat_dv_128B
    324U,	// V6_vaddhw
    324U,	// V6_vaddhw_128B
    3012U,	// V6_vaddubh
    3012U,	// V6_vaddubh_128B
    0U,	// V6_vaddubsat
    0U,	// V6_vaddubsat_128B
    0U,	// V6_vaddubsat_dv
    0U,	// V6_vaddubsat_dv_128B
    0U,	// V6_vadduhsat
    0U,	// V6_vadduhsat_128B
    0U,	// V6_vadduhsat_dv
    0U,	// V6_vadduhsat_dv_128B
    2948U,	// V6_vadduhw
    2948U,	// V6_vadduhw_128B
    3076U,	// V6_vaddw
    3076U,	// V6_vaddw_128B
    3076U,	// V6_vaddw_dv
    3076U,	// V6_vaddw_dv_128B
    0U,	// V6_vaddwnq
    0U,	// V6_vaddwnq_128B
    0U,	// V6_vaddwq
    0U,	// V6_vaddwq_128B
    3140U,	// V6_vaddwsat
    3140U,	// V6_vaddwsat_128B
    3140U,	// V6_vaddwsat_dv
    3140U,	// V6_vaddwsat_dv_128B
    672U,	// V6_valignb
    672U,	// V6_valignb_128B
    672U,	// V6_valignbi
    672U,	// V6_valignbi_128B
    0U,	// V6_vand
    0U,	// V6_vand_128B
    0U,	// V6_vandqrt
    0U,	// V6_vandqrt_128B
    0U,	// V6_vandqrt_acc
    0U,	// V6_vandqrt_acc_128B
    0U,	// V6_vandvrt
    0U,	// V6_vandvrt_128B
    0U,	// V6_vandvrt_acc
    0U,	// V6_vandvrt_acc_128B
    0U,	// V6_vaslh
    0U,	// V6_vaslh_128B
    0U,	// V6_vaslhv
    0U,	// V6_vaslhv_128B
    0U,	// V6_vaslw
    0U,	// V6_vaslw_128B
    0U,	// V6_vaslw_acc
    0U,	// V6_vaslw_acc_128B
    0U,	// V6_vaslwv
    0U,	// V6_vaslwv_128B
    644U,	// V6_vasrh
    644U,	// V6_vasrh_128B
    0U,	// V6_vasrhbrndsat
    0U,	// V6_vasrhbrndsat_128B
    0U,	// V6_vasrhubrndsat
    0U,	// V6_vasrhubrndsat_128B
    0U,	// V6_vasrhubsat
    0U,	// V6_vasrhubsat_128B
    324U,	// V6_vasrhv
    324U,	// V6_vasrhv_128B
    0U,	// V6_vasrw
    0U,	// V6_vasrw_128B
    0U,	// V6_vasrw_acc
    0U,	// V6_vasrw_acc_128B
    3204U,	// V6_vasrwh
    3204U,	// V6_vasrwh_128B
    7300U,	// V6_vasrwhrndsat
    7300U,	// V6_vasrwhrndsat_128B
    7300U,	// V6_vasrwhsat
    7300U,	// V6_vasrwhsat_128B
    0U,	// V6_vasrwuhsat
    0U,	// V6_vasrwuhsat_128B
    0U,	// V6_vasrwv
    0U,	// V6_vasrwv_128B
    0U,	// V6_vassign
    0U,	// V6_vassign_128B
    0U,	// V6_vavgh
    0U,	// V6_vavgh_128B
    0U,	// V6_vavghrnd
    0U,	// V6_vavghrnd_128B
    0U,	// V6_vavgub
    0U,	// V6_vavgub_128B
    0U,	// V6_vavgubrnd
    0U,	// V6_vavgubrnd_128B
    0U,	// V6_vavguh
    0U,	// V6_vavguh_128B
    0U,	// V6_vavguhrnd
    0U,	// V6_vavguhrnd_128B
    0U,	// V6_vavgw
    0U,	// V6_vavgw_128B
    0U,	// V6_vavgwrnd
    0U,	// V6_vavgwrnd_128B
    0U,	// V6_vccombine
    0U,	// V6_vccombine_128B
    0U,	// V6_vcl0h
    0U,	// V6_vcl0h_128B
    0U,	// V6_vcl0w
    0U,	// V6_vcl0w_128B
    0U,	// V6_vcmov
    0U,	// V6_vcmov_128B
    0U,	// V6_vcombine
    0U,	// V6_vcombine_128B
    1144U,	// V6_vdeal
    1144U,	// V6_vdeal_128B
    0U,	// V6_vdealb
    0U,	// V6_vdealb4w
    0U,	// V6_vdealb4w_128B
    0U,	// V6_vdealb_128B
    0U,	// V6_vdealh
    0U,	// V6_vdealh_128B
    0U,	// V6_vdealvdd
    0U,	// V6_vdealvdd_128B
    0U,	// V6_vdelta
    0U,	// V6_vdelta_128B
    0U,	// V6_vdmpybus
    0U,	// V6_vdmpybus_128B
    0U,	// V6_vdmpybus_acc
    0U,	// V6_vdmpybus_acc_128B
    0U,	// V6_vdmpybus_dv
    0U,	// V6_vdmpybus_dv_128B
    0U,	// V6_vdmpybus_dv_acc
    0U,	// V6_vdmpybus_dv_acc_128B
    0U,	// V6_vdmpyhb
    0U,	// V6_vdmpyhb_128B
    0U,	// V6_vdmpyhb_acc
    0U,	// V6_vdmpyhb_acc_128B
    0U,	// V6_vdmpyhb_dv
    0U,	// V6_vdmpyhb_dv_128B
    0U,	// V6_vdmpyhb_dv_acc
    0U,	// V6_vdmpyhb_dv_acc_128B
    0U,	// V6_vdmpyhisat
    0U,	// V6_vdmpyhisat_128B
    0U,	// V6_vdmpyhisat_acc
    0U,	// V6_vdmpyhisat_acc_128B
    0U,	// V6_vdmpyhsat
    0U,	// V6_vdmpyhsat_128B
    0U,	// V6_vdmpyhsat_acc
    0U,	// V6_vdmpyhsat_acc_128B
    0U,	// V6_vdmpyhsuisat
    0U,	// V6_vdmpyhsuisat_128B
    0U,	// V6_vdmpyhsuisat_acc
    0U,	// V6_vdmpyhsuisat_acc_128B
    0U,	// V6_vdmpyhsusat
    0U,	// V6_vdmpyhsusat_128B
    0U,	// V6_vdmpyhsusat_acc
    0U,	// V6_vdmpyhsusat_acc_128B
    0U,	// V6_vdmpyhvsat
    0U,	// V6_vdmpyhvsat_128B
    0U,	// V6_vdmpyhvsat_acc
    0U,	// V6_vdmpyhvsat_acc_128B
    0U,	// V6_vdsaduh
    0U,	// V6_vdsaduh_128B
    0U,	// V6_vdsaduh_acc
    0U,	// V6_vdsaduh_acc_128B
    3268U,	// V6_veqb
    3268U,	// V6_veqb_128B
    3296U,	// V6_veqb_and
    3296U,	// V6_veqb_and_128B
    3296U,	// V6_veqb_or
    3296U,	// V6_veqb_or_128B
    3296U,	// V6_veqb_xor
    3296U,	// V6_veqb_xor_128B
    324U,	// V6_veqh
    324U,	// V6_veqh_128B
    352U,	// V6_veqh_and
    352U,	// V6_veqh_and_128B
    352U,	// V6_veqh_or
    352U,	// V6_veqh_or_128B
    352U,	// V6_veqh_xor
    352U,	// V6_veqh_xor_128B
    3076U,	// V6_veqw
    3076U,	// V6_veqw_128B
    3104U,	// V6_veqw_and
    3104U,	// V6_veqw_and_128B
    3104U,	// V6_veqw_or
    3104U,	// V6_veqw_or_128B
    3104U,	// V6_veqw_xor
    3104U,	// V6_veqw_xor_128B
    3268U,	// V6_vgtb
    3268U,	// V6_vgtb_128B
    3296U,	// V6_vgtb_and
    3296U,	// V6_vgtb_and_128B
    3296U,	// V6_vgtb_or
    3296U,	// V6_vgtb_or_128B
    3296U,	// V6_vgtb_xor
    3296U,	// V6_vgtb_xor_128B
    324U,	// V6_vgth
    324U,	// V6_vgth_128B
    352U,	// V6_vgth_and
    352U,	// V6_vgth_and_128B
    352U,	// V6_vgth_or
    352U,	// V6_vgth_or_128B
    352U,	// V6_vgth_xor
    352U,	// V6_vgth_xor_128B
    3012U,	// V6_vgtub
    3012U,	// V6_vgtub_128B
    3040U,	// V6_vgtub_and
    3040U,	// V6_vgtub_and_128B
    3040U,	// V6_vgtub_or
    3040U,	// V6_vgtub_or_128B
    3040U,	// V6_vgtub_xor
    3040U,	// V6_vgtub_xor_128B
    2948U,	// V6_vgtuh
    2948U,	// V6_vgtuh_128B
    2976U,	// V6_vgtuh_and
    2976U,	// V6_vgtuh_and_128B
    2976U,	// V6_vgtuh_or
    2976U,	// V6_vgtuh_or_128B
    2976U,	// V6_vgtuh_xor
    2976U,	// V6_vgtuh_xor_128B
    3332U,	// V6_vgtuw
    3332U,	// V6_vgtuw_128B
    3360U,	// V6_vgtuw_and
    3360U,	// V6_vgtuw_and_128B
    3360U,	// V6_vgtuw_or
    3360U,	// V6_vgtuw_or_128B
    3360U,	// V6_vgtuw_xor
    3360U,	// V6_vgtuw_xor_128B
    3076U,	// V6_vgtw
    3076U,	// V6_vgtw_128B
    3104U,	// V6_vgtw_and
    3104U,	// V6_vgtw_and_128B
    3104U,	// V6_vgtw_or
    3104U,	// V6_vgtw_or_128B
    3104U,	// V6_vgtw_xor
    3104U,	// V6_vgtw_xor_128B
    0U,	// V6_vhist
    0U,	// V6_vhistq
    0U,	// V6_vinsertwr
    0U,	// V6_vinsertwr_128B
    672U,	// V6_vlalignb
    672U,	// V6_vlalignb_128B
    672U,	// V6_vlalignbi
    672U,	// V6_vlalignbi_128B
    0U,	// V6_vlsrh
    0U,	// V6_vlsrh_128B
    0U,	// V6_vlsrhv
    0U,	// V6_vlsrhv_128B
    0U,	// V6_vlsrw
    0U,	// V6_vlsrw_128B
    0U,	// V6_vlsrwv
    0U,	// V6_vlsrwv_128B
    0U,	// V6_vlutvvb
    0U,	// V6_vlutvvb_128B
    0U,	// V6_vlutvvb_oracc
    0U,	// V6_vlutvvb_oracc_128B
    0U,	// V6_vlutvwh
    0U,	// V6_vlutvwh_128B
    0U,	// V6_vlutvwh_oracc
    0U,	// V6_vlutvwh_oracc_128B
    0U,	// V6_vmaxh
    0U,	// V6_vmaxh_128B
    0U,	// V6_vmaxub
    0U,	// V6_vmaxub_128B
    0U,	// V6_vmaxuh
    0U,	// V6_vmaxuh_128B
    0U,	// V6_vmaxw
    0U,	// V6_vmaxw_128B
    0U,	// V6_vminh
    0U,	// V6_vminh_128B
    0U,	// V6_vminub
    0U,	// V6_vminub_128B
    0U,	// V6_vminuh
    0U,	// V6_vminuh_128B
    0U,	// V6_vminw
    0U,	// V6_vminw_128B
    0U,	// V6_vmpabus
    0U,	// V6_vmpabus_128B
    0U,	// V6_vmpabus_acc
    0U,	// V6_vmpabus_acc_128B
    0U,	// V6_vmpabusv
    0U,	// V6_vmpabusv_128B
    0U,	// V6_vmpabuuv
    0U,	// V6_vmpabuuv_128B
    0U,	// V6_vmpahb
    0U,	// V6_vmpahb_128B
    0U,	// V6_vmpahb_acc
    0U,	// V6_vmpahb_acc_128B
    3268U,	// V6_vmpybus
    3268U,	// V6_vmpybus_128B
    3296U,	// V6_vmpybus_acc
    3296U,	// V6_vmpybus_acc_128B
    3268U,	// V6_vmpybusv
    3268U,	// V6_vmpybusv_128B
    3296U,	// V6_vmpybusv_acc
    3296U,	// V6_vmpybusv_acc_128B
    3268U,	// V6_vmpybv
    3268U,	// V6_vmpybv_128B
    3296U,	// V6_vmpybv_acc
    3296U,	// V6_vmpybv_acc_128B
    0U,	// V6_vmpyewuh
    0U,	// V6_vmpyewuh_128B
    0U,	// V6_vmpyh
    0U,	// V6_vmpyh_128B
    0U,	// V6_vmpyhsat_acc
    0U,	// V6_vmpyhsat_acc_128B
    1476U,	// V6_vmpyhsrs
    1476U,	// V6_vmpyhsrs_128B
    1540U,	// V6_vmpyhss
    1540U,	// V6_vmpyhss_128B
    0U,	// V6_vmpyhus
    0U,	// V6_vmpyhus_128B
    0U,	// V6_vmpyhus_acc
    0U,	// V6_vmpyhus_acc_128B
    0U,	// V6_vmpyhv
    0U,	// V6_vmpyhv_128B
    0U,	// V6_vmpyhv_acc
    0U,	// V6_vmpyhv_acc_128B
    1476U,	// V6_vmpyhvsrs
    1476U,	// V6_vmpyhvsrs_128B
    0U,	// V6_vmpyieoh
    0U,	// V6_vmpyieoh_128B
    0U,	// V6_vmpyiewh_acc
    0U,	// V6_vmpyiewh_acc_128B
    0U,	// V6_vmpyiewuh
    0U,	// V6_vmpyiewuh_128B
    0U,	// V6_vmpyiewuh_acc
    0U,	// V6_vmpyiewuh_acc_128B
    0U,	// V6_vmpyih
    0U,	// V6_vmpyih_128B
    0U,	// V6_vmpyih_acc
    0U,	// V6_vmpyih_acc_128B
    0U,	// V6_vmpyihb
    0U,	// V6_vmpyihb_128B
    0U,	// V6_vmpyihb_acc
    0U,	// V6_vmpyihb_acc_128B
    0U,	// V6_vmpyiowh
    0U,	// V6_vmpyiowh_128B
    0U,	// V6_vmpyiwb
    0U,	// V6_vmpyiwb_128B
    0U,	// V6_vmpyiwb_acc
    0U,	// V6_vmpyiwb_acc_128B
    0U,	// V6_vmpyiwh
    0U,	// V6_vmpyiwh_128B
    0U,	// V6_vmpyiwh_acc
    0U,	// V6_vmpyiwh_acc_128B
    0U,	// V6_vmpyowh
    0U,	// V6_vmpyowh_128B
    0U,	// V6_vmpyowh_rnd
    0U,	// V6_vmpyowh_rnd_128B
    0U,	// V6_vmpyowh_rnd_sacc
    0U,	// V6_vmpyowh_rnd_sacc_128B
    0U,	// V6_vmpyowh_sacc
    0U,	// V6_vmpyowh_sacc_128B
    0U,	// V6_vmpyub
    0U,	// V6_vmpyub_128B
    0U,	// V6_vmpyub_acc
    0U,	// V6_vmpyub_acc_128B
    0U,	// V6_vmpyubv
    0U,	// V6_vmpyubv_128B
    0U,	// V6_vmpyubv_acc
    0U,	// V6_vmpyubv_acc_128B
    0U,	// V6_vmpyuh
    0U,	// V6_vmpyuh_128B
    0U,	// V6_vmpyuh_acc
    0U,	// V6_vmpyuh_acc_128B
    0U,	// V6_vmpyuhv
    0U,	// V6_vmpyuhv_128B
    0U,	// V6_vmpyuhv_acc
    0U,	// V6_vmpyuhv_acc_128B
    3396U,	// V6_vmux
    3396U,	// V6_vmux_128B
    0U,	// V6_vnavgh
    0U,	// V6_vnavgh_128B
    0U,	// V6_vnavgub
    0U,	// V6_vnavgub_128B
    0U,	// V6_vnavgw
    0U,	// V6_vnavgw_128B
    0U,	// V6_vnccombine
    0U,	// V6_vnccombine_128B
    0U,	// V6_vncmov
    0U,	// V6_vncmov_128B
    0U,	// V6_vnormamth
    0U,	// V6_vnormamth_128B
    0U,	// V6_vnormamtw
    0U,	// V6_vnormamtw_128B
    0U,	// V6_vnot
    0U,	// V6_vnot_128B
    0U,	// V6_vor
    0U,	// V6_vor_128B
    0U,	// V6_vpackeb
    0U,	// V6_vpackeb_128B
    0U,	// V6_vpackeh
    0U,	// V6_vpackeh_128B
    0U,	// V6_vpackhb_sat
    0U,	// V6_vpackhb_sat_128B
    0U,	// V6_vpackhub_sat
    0U,	// V6_vpackhub_sat_128B
    0U,	// V6_vpackob
    0U,	// V6_vpackob_128B
    0U,	// V6_vpackoh
    0U,	// V6_vpackoh_128B
    0U,	// V6_vpackwh_sat
    0U,	// V6_vpackwh_sat_128B
    0U,	// V6_vpackwuh_sat
    0U,	// V6_vpackwuh_sat_128B
    0U,	// V6_vpopcounth
    0U,	// V6_vpopcounth_128B
    0U,	// V6_vrdelta
    0U,	// V6_vrdelta_128B
    3268U,	// V6_vrmpybus
    3268U,	// V6_vrmpybus_128B
    3296U,	// V6_vrmpybus_acc
    3296U,	// V6_vrmpybus_acc_128B
    23940U,	// V6_vrmpybusi
    23940U,	// V6_vrmpybusi_128B
    40352U,	// V6_vrmpybusi_acc
    40352U,	// V6_vrmpybusi_acc_128B
    3268U,	// V6_vrmpybusv
    3268U,	// V6_vrmpybusv_128B
    3296U,	// V6_vrmpybusv_acc
    3296U,	// V6_vrmpybusv_acc_128B
    3268U,	// V6_vrmpybv
    3268U,	// V6_vrmpybv_128B
    3296U,	// V6_vrmpybv_acc
    3296U,	// V6_vrmpybv_acc_128B
    0U,	// V6_vrmpyub
    0U,	// V6_vrmpyub_128B
    0U,	// V6_vrmpyub_acc
    0U,	// V6_vrmpyub_acc_128B
    672U,	// V6_vrmpyubi
    672U,	// V6_vrmpyubi_128B
    650U,	// V6_vrmpyubi_acc
    650U,	// V6_vrmpyubi_acc_128B
    0U,	// V6_vrmpyubv
    0U,	// V6_vrmpyubv_128B
    0U,	// V6_vrmpyubv_acc
    0U,	// V6_vrmpyubv_acc_128B
    0U,	// V6_vror
    0U,	// V6_vror_128B
    0U,	// V6_vroundhb
    0U,	// V6_vroundhb_128B
    0U,	// V6_vroundhub
    0U,	// V6_vroundhub_128B
    0U,	// V6_vroundwh
    0U,	// V6_vroundwh_128B
    0U,	// V6_vroundwuh
    0U,	// V6_vroundwuh_128B
    0U,	// V6_vrsadubi
    0U,	// V6_vrsadubi_128B
    0U,	// V6_vrsadubi_acc
    0U,	// V6_vrsadubi_acc_128B
    0U,	// V6_vsathub
    0U,	// V6_vsathub_128B
    0U,	// V6_vsatwh
    0U,	// V6_vsatwh_128B
    0U,	// V6_vsb
    0U,	// V6_vsb_128B
    0U,	// V6_vsh
    0U,	// V6_vsh_128B
    0U,	// V6_vshufeh
    0U,	// V6_vshufeh_128B
    1144U,	// V6_vshuff
    1144U,	// V6_vshuff_128B
    0U,	// V6_vshuffb
    0U,	// V6_vshuffb_128B
    0U,	// V6_vshuffeb
    0U,	// V6_vshuffeb_128B
    0U,	// V6_vshuffh
    0U,	// V6_vshuffh_128B
    0U,	// V6_vshuffob
    0U,	// V6_vshuffob_128B
    0U,	// V6_vshuffvdd
    0U,	// V6_vshuffvdd_128B
    0U,	// V6_vshufoeb
    0U,	// V6_vshufoeb_128B
    0U,	// V6_vshufoeh
    0U,	// V6_vshufoeh_128B
    0U,	// V6_vshufoh
    0U,	// V6_vshufoh_128B
    0U,	// V6_vsubb
    0U,	// V6_vsubb_128B
    0U,	// V6_vsubb_dv
    0U,	// V6_vsubb_dv_128B
    0U,	// V6_vsubbnq
    0U,	// V6_vsubbnq_128B
    0U,	// V6_vsubbq
    0U,	// V6_vsubbq_128B
    324U,	// V6_vsubh
    324U,	// V6_vsubh_128B
    324U,	// V6_vsubh_dv
    324U,	// V6_vsubh_dv_128B
    0U,	// V6_vsubhnq
    0U,	// V6_vsubhnq_128B
    0U,	// V6_vsubhq
    0U,	// V6_vsubhq_128B
    452U,	// V6_vsubhsat
    452U,	// V6_vsubhsat_128B
    452U,	// V6_vsubhsat_dv
    452U,	// V6_vsubhsat_dv_128B
    324U,	// V6_vsubhw
    324U,	// V6_vsubhw_128B
    3012U,	// V6_vsububh
    3012U,	// V6_vsububh_128B
    0U,	// V6_vsububsat
    0U,	// V6_vsububsat_128B
    0U,	// V6_vsububsat_dv
    0U,	// V6_vsububsat_dv_128B
    0U,	// V6_vsubuhsat
    0U,	// V6_vsubuhsat_128B
    0U,	// V6_vsubuhsat_dv
    0U,	// V6_vsubuhsat_dv_128B
    2948U,	// V6_vsubuhw
    2948U,	// V6_vsubuhw_128B
    3076U,	// V6_vsubw
    3076U,	// V6_vsubw_128B
    3076U,	// V6_vsubw_dv
    3076U,	// V6_vsubw_dv_128B
    0U,	// V6_vsubwnq
    0U,	// V6_vsubwnq_128B
    0U,	// V6_vsubwq
    0U,	// V6_vsubwq_128B
    3140U,	// V6_vsubwsat
    3140U,	// V6_vsubwsat_128B
    3140U,	// V6_vsubwsat_dv
    3140U,	// V6_vsubwsat_dv_128B
    0U,	// V6_vswap
    0U,	// V6_vswap_128B
    3268U,	// V6_vtmpyb
    3268U,	// V6_vtmpyb_128B
    3296U,	// V6_vtmpyb_acc
    3296U,	// V6_vtmpyb_acc_128B
    3268U,	// V6_vtmpybus
    3268U,	// V6_vtmpybus_128B
    3296U,	// V6_vtmpybus_acc
    3296U,	// V6_vtmpybus_acc_128B
    0U,	// V6_vtmpyhb
    0U,	// V6_vtmpyhb_128B
    0U,	// V6_vtmpyhb_acc
    0U,	// V6_vtmpyhb_acc_128B
    0U,	// V6_vunpackb
    0U,	// V6_vunpackb_128B
    0U,	// V6_vunpackh
    0U,	// V6_vunpackh_128B
    0U,	// V6_vunpackob
    0U,	// V6_vunpackob_128B
    0U,	// V6_vunpackoh
    0U,	// V6_vunpackoh_128B
    0U,	// V6_vunpackub
    0U,	// V6_vunpackub_128B
    0U,	// V6_vunpackuh
    0U,	// V6_vunpackuh_128B
    0U,	// V6_vxor
    0U,	// V6_vxor_128B
    0U,	// V6_vzb
    0U,	// V6_vzb_128B
    0U,	// V6_vzh
    0U,	// V6_vzh_128B
    0U,	// VMULW
    0U,	// VMULW_ACC
    0U,	// VSelectDblPseudo_V6
    0U,	// VSelectPseudo_V6
    0U,	// Y2_barrier
    0U,	// Y2_dccleana
    0U,	// Y2_dccleaninva
    0U,	// Y2_dcfetchbo
    0U,	// Y2_dcinva
    0U,	// Y2_dczeroa
    0U,	// Y2_icinva
    0U,	// Y2_isync
    0U,	// Y2_syncht
    9U,	// Y4_l2fetch
    0U,	// Y4_trace
    9U,	// Y5_l2fetch
    0U,	// Y5_l2gclean
    0U,	// Y5_l2gcleaninv
    0U,	// Y5_l2gunlock
    0U,	// Y5_l2locka
    0U,	// Y5_l2unlocka
    0U,	// Y6_l2gcleaninvpa
    0U,	// Y6_l2gcleanpa
    8192U,	// dep_A2_addsat
    8192U,	// dep_A2_subsat
    0U,	// dep_S2_packhl
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// A2_abs
    0U,	// A2_absp
    0U,	// A2_abssat
    0U,	// A2_add
    0U,	// A2_addh_h16_hh
    0U,	// A2_addh_h16_hl
    0U,	// A2_addh_h16_lh
    0U,	// A2_addh_h16_ll
    0U,	// A2_addh_h16_sat_hh
    0U,	// A2_addh_h16_sat_hl
    0U,	// A2_addh_h16_sat_lh
    0U,	// A2_addh_h16_sat_ll
    0U,	// A2_addh_l16_hl
    0U,	// A2_addh_l16_ll
    0U,	// A2_addh_l16_sat_hl
    0U,	// A2_addh_l16_sat_ll
    0U,	// A2_addi
    0U,	// A2_addp
    0U,	// A2_addpsat
    0U,	// A2_addsat
    0U,	// A2_addsp
    0U,	// A2_addsph
    0U,	// A2_addspl
    0U,	// A2_and
    0U,	// A2_andir
    0U,	// A2_andp
    0U,	// A2_aslh
    0U,	// A2_asrh
    0U,	// A2_combine_hh
    0U,	// A2_combine_hl
    0U,	// A2_combine_lh
    0U,	// A2_combine_ll
    0U,	// A2_combineii
    0U,	// A2_combinew
    0U,	// A2_max
    0U,	// A2_maxp
    0U,	// A2_maxu
    0U,	// A2_maxup
    0U,	// A2_min
    0U,	// A2_minp
    0U,	// A2_minu
    0U,	// A2_minup
    0U,	// A2_negp
    0U,	// A2_negsat
    0U,	// A2_nop
    0U,	// A2_not
    0U,	// A2_notp
    0U,	// A2_or
    0U,	// A2_orir
    0U,	// A2_orp
    0U,	// A2_paddf
    0U,	// A2_paddfnew
    0U,	// A2_paddif
    0U,	// A2_paddifnew
    0U,	// A2_paddit
    0U,	// A2_padditnew
    0U,	// A2_paddt
    0U,	// A2_paddtnew
    0U,	// A2_pandf
    0U,	// A2_pandfnew
    0U,	// A2_pandt
    0U,	// A2_pandtnew
    0U,	// A2_porf
    0U,	// A2_porfnew
    0U,	// A2_port
    0U,	// A2_portnew
    0U,	// A2_psubf
    0U,	// A2_psubfnew
    0U,	// A2_psubt
    0U,	// A2_psubtnew
    0U,	// A2_pxorf
    0U,	// A2_pxorfnew
    0U,	// A2_pxort
    0U,	// A2_pxortnew
    0U,	// A2_roundsat
    0U,	// A2_sat
    0U,	// A2_satb
    0U,	// A2_sath
    0U,	// A2_satub
    0U,	// A2_satuh
    0U,	// A2_sub
    0U,	// A2_subh_h16_hh
    0U,	// A2_subh_h16_hl
    0U,	// A2_subh_h16_lh
    0U,	// A2_subh_h16_ll
    0U,	// A2_subh_h16_sat_hh
    0U,	// A2_subh_h16_sat_hl
    0U,	// A2_subh_h16_sat_lh
    0U,	// A2_subh_h16_sat_ll
    0U,	// A2_subh_l16_hl
    0U,	// A2_subh_l16_ll
    0U,	// A2_subh_l16_sat_hl
    0U,	// A2_subh_l16_sat_ll
    0U,	// A2_subp
    0U,	// A2_subri
    0U,	// A2_subsat
    0U,	// A2_svaddh
    0U,	// A2_svaddhs
    0U,	// A2_svadduhs
    0U,	// A2_svavgh
    0U,	// A2_svavghs
    0U,	// A2_svnavgh
    0U,	// A2_svsubh
    0U,	// A2_svsubhs
    0U,	// A2_svsubuhs
    0U,	// A2_swiz
    0U,	// A2_sxtb
    0U,	// A2_sxth
    0U,	// A2_sxtw
    0U,	// A2_tfr
    0U,	// A2_tfrcrr
    0U,	// A2_tfrf
    0U,	// A2_tfrfnew
    0U,	// A2_tfrih
    0U,	// A2_tfril
    0U,	// A2_tfrp
    0U,	// A2_tfrpf
    0U,	// A2_tfrpfnew
    0U,	// A2_tfrpi
    0U,	// A2_tfrpt
    0U,	// A2_tfrptnew
    0U,	// A2_tfrrcr
    0U,	// A2_tfrsi
    0U,	// A2_tfrt
    0U,	// A2_tfrtnew
    0U,	// A2_vabsh
    0U,	// A2_vabshsat
    0U,	// A2_vabsw
    0U,	// A2_vabswsat
    0U,	// A2_vaddh
    0U,	// A2_vaddhs
    0U,	// A2_vaddub
    0U,	// A2_vaddubs
    0U,	// A2_vadduhs
    0U,	// A2_vaddw
    0U,	// A2_vaddws
    0U,	// A2_vavgh
    0U,	// A2_vavghcr
    0U,	// A2_vavghr
    0U,	// A2_vavgub
    0U,	// A2_vavgubr
    0U,	// A2_vavguh
    0U,	// A2_vavguhr
    0U,	// A2_vavguw
    0U,	// A2_vavguwr
    0U,	// A2_vavgw
    0U,	// A2_vavgwcr
    0U,	// A2_vavgwr
    0U,	// A2_vcmpbeq
    0U,	// A2_vcmpbgtu
    0U,	// A2_vcmpheq
    0U,	// A2_vcmphgt
    0U,	// A2_vcmphgtu
    0U,	// A2_vcmpweq
    0U,	// A2_vcmpwgt
    0U,	// A2_vcmpwgtu
    0U,	// A2_vconj
    0U,	// A2_vmaxb
    0U,	// A2_vmaxh
    0U,	// A2_vmaxub
    0U,	// A2_vmaxuh
    0U,	// A2_vmaxuw
    0U,	// A2_vmaxw
    0U,	// A2_vminb
    0U,	// A2_vminh
    0U,	// A2_vminub
    0U,	// A2_vminuh
    0U,	// A2_vminuw
    0U,	// A2_vminw
    0U,	// A2_vnavgh
    0U,	// A2_vnavghcr
    0U,	// A2_vnavghr
    0U,	// A2_vnavgw
    0U,	// A2_vnavgwcr
    0U,	// A2_vnavgwr
    0U,	// A2_vraddub
    0U,	// A2_vraddub_acc
    0U,	// A2_vrsadub
    0U,	// A2_vrsadub_acc
    0U,	// A2_vsubh
    0U,	// A2_vsubhs
    0U,	// A2_vsubub
    0U,	// A2_vsububs
    0U,	// A2_vsubuhs
    0U,	// A2_vsubw
    0U,	// A2_vsubws
    0U,	// A2_xor
    0U,	// A2_xorp
    0U,	// A2_zxtb
    0U,	// A2_zxth
    0U,	// A4_addp_c
    0U,	// A4_andn
    0U,	// A4_andnp
    0U,	// A4_bitsplit
    0U,	// A4_bitspliti
    0U,	// A4_boundscheck
    0U,	// A4_boundscheck_hi
    0U,	// A4_boundscheck_lo
    0U,	// A4_cmpbeq
    0U,	// A4_cmpbeqi
    0U,	// A4_cmpbgt
    0U,	// A4_cmpbgti
    0U,	// A4_cmpbgtu
    0U,	// A4_cmpbgtui
    0U,	// A4_cmpheq
    0U,	// A4_cmpheqi
    0U,	// A4_cmphgt
    0U,	// A4_cmphgti
    0U,	// A4_cmphgtu
    0U,	// A4_cmphgtui
    0U,	// A4_combineii
    0U,	// A4_combineir
    0U,	// A4_combineri
    0U,	// A4_cround_ri
    0U,	// A4_cround_rr
    0U,	// A4_ext
    0U,	// A4_ext_b
    0U,	// A4_ext_c
    0U,	// A4_ext_g
    0U,	// A4_modwrapu
    0U,	// A4_orn
    0U,	// A4_ornp
    0U,	// A4_paslhf
    0U,	// A4_paslhfnew
    0U,	// A4_paslht
    0U,	// A4_paslhtnew
    0U,	// A4_pasrhf
    0U,	// A4_pasrhfnew
    0U,	// A4_pasrht
    0U,	// A4_pasrhtnew
    0U,	// A4_psxtbf
    0U,	// A4_psxtbfnew
    0U,	// A4_psxtbt
    0U,	// A4_psxtbtnew
    0U,	// A4_psxthf
    0U,	// A4_psxthfnew
    0U,	// A4_psxtht
    0U,	// A4_psxthtnew
    0U,	// A4_pzxtbf
    0U,	// A4_pzxtbfnew
    0U,	// A4_pzxtbt
    0U,	// A4_pzxtbtnew
    0U,	// A4_pzxthf
    0U,	// A4_pzxthfnew
    0U,	// A4_pzxtht
    0U,	// A4_pzxthtnew
    0U,	// A4_rcmpeq
    0U,	// A4_rcmpeqi
    0U,	// A4_rcmpneq
    0U,	// A4_rcmpneqi
    0U,	// A4_round_ri
    0U,	// A4_round_ri_sat
    0U,	// A4_round_rr
    0U,	// A4_round_rr_sat
    0U,	// A4_subp_c
    0U,	// A4_tfrcpp
    0U,	// A4_tfrpcp
    0U,	// A4_tlbmatch
    0U,	// A4_vcmpbeq_any
    0U,	// A4_vcmpbeqi
    0U,	// A4_vcmpbgt
    0U,	// A4_vcmpbgti
    0U,	// A4_vcmpbgtui
    0U,	// A4_vcmpheqi
    0U,	// A4_vcmphgti
    0U,	// A4_vcmphgtui
    0U,	// A4_vcmpweqi
    0U,	// A4_vcmpwgti
    0U,	// A4_vcmpwgtui
    0U,	// A4_vrmaxh
    0U,	// A4_vrmaxuh
    0U,	// A4_vrmaxuw
    0U,	// A4_vrmaxw
    0U,	// A4_vrminh
    0U,	// A4_vrminuh
    0U,	// A4_vrminuw
    0U,	// A4_vrminw
    0U,	// A5_ACS
    0U,	// A5_vaddhubs
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ALIGNA
    0U,	// ALLOCA
    0U,	// ARGEXTEND
    0U,	// C2_all8
    0U,	// C2_and
    0U,	// C2_andn
    0U,	// C2_any8
    0U,	// C2_bitsclr
    0U,	// C2_bitsclri
    0U,	// C2_bitsset
    0U,	// C2_ccombinewf
    0U,	// C2_ccombinewnewf
    0U,	// C2_ccombinewnewt
    0U,	// C2_ccombinewt
    0U,	// C2_cmoveif
    0U,	// C2_cmoveit
    0U,	// C2_cmovenewif
    0U,	// C2_cmovenewit
    0U,	// C2_cmpeq
    0U,	// C2_cmpeqi
    0U,	// C2_cmpeqp
    0U,	// C2_cmpgei
    0U,	// C2_cmpgeui
    0U,	// C2_cmpgt
    0U,	// C2_cmpgti
    0U,	// C2_cmpgtp
    0U,	// C2_cmpgtu
    0U,	// C2_cmpgtui
    0U,	// C2_cmpgtup
    0U,	// C2_mask
    0U,	// C2_mux
    0U,	// C2_muxii
    0U,	// C2_muxir
    0U,	// C2_muxri
    0U,	// C2_not
    0U,	// C2_or
    0U,	// C2_orn
    0U,	// C2_pxfer_map
    0U,	// C2_tfrpr
    0U,	// C2_tfrrp
    0U,	// C2_vitpack
    0U,	// C2_vmux
    0U,	// C2_xor
    0U,	// C4_addipc
    0U,	// C4_and_and
    0U,	// C4_and_andn
    0U,	// C4_and_or
    0U,	// C4_and_orn
    0U,	// C4_cmplte
    0U,	// C4_cmpltei
    0U,	// C4_cmplteu
    0U,	// C4_cmplteui
    0U,	// C4_cmpneq
    0U,	// C4_cmpneqi
    0U,	// C4_fastcorner9
    0U,	// C4_fastcorner9_not
    0U,	// C4_nbitsclr
    0U,	// C4_nbitsclri
    0U,	// C4_nbitsset
    0U,	// C4_or_and
    0U,	// C4_or_andn
    0U,	// C4_or_or
    0U,	// C4_or_orn
    0U,	// CALLRv3nr
    0U,	// CALLv3nr
    0U,	// CONST32
    0U,	// CONST32_Float_Real
    0U,	// CONST32_Int_Real
    0U,	// CONST64_Float_Real
    0U,	// CONST64_Int_Real
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    0U,	// EH_RETURN_JMPR
    0U,	// ENDLOOP0
    0U,	// ENDLOOP1
    0U,	// F2_conv_d2df
    0U,	// F2_conv_d2sf
    0U,	// F2_conv_df2d
    0U,	// F2_conv_df2d_chop
    0U,	// F2_conv_df2sf
    0U,	// F2_conv_df2ud
    0U,	// F2_conv_df2ud_chop
    0U,	// F2_conv_df2uw
    0U,	// F2_conv_df2uw_chop
    0U,	// F2_conv_df2w
    0U,	// F2_conv_df2w_chop
    0U,	// F2_conv_sf2d
    0U,	// F2_conv_sf2d_chop
    0U,	// F2_conv_sf2df
    0U,	// F2_conv_sf2ud
    0U,	// F2_conv_sf2ud_chop
    0U,	// F2_conv_sf2uw
    0U,	// F2_conv_sf2uw_chop
    0U,	// F2_conv_sf2w
    0U,	// F2_conv_sf2w_chop
    0U,	// F2_conv_ud2df
    0U,	// F2_conv_ud2sf
    0U,	// F2_conv_uw2df
    0U,	// F2_conv_uw2sf
    0U,	// F2_conv_w2df
    0U,	// F2_conv_w2sf
    0U,	// F2_dfclass
    0U,	// F2_dfcmpeq
    0U,	// F2_dfcmpge
    0U,	// F2_dfcmpgt
    0U,	// F2_dfcmpuo
    0U,	// F2_dfimm_n
    0U,	// F2_dfimm_p
    0U,	// F2_sfadd
    0U,	// F2_sfclass
    0U,	// F2_sfcmpeq
    0U,	// F2_sfcmpge
    0U,	// F2_sfcmpgt
    0U,	// F2_sfcmpuo
    0U,	// F2_sffixupd
    0U,	// F2_sffixupn
    0U,	// F2_sffixupr
    0U,	// F2_sffma
    0U,	// F2_sffma_lib
    0U,	// F2_sffma_sc
    0U,	// F2_sffms
    0U,	// F2_sffms_lib
    0U,	// F2_sfimm_n
    0U,	// F2_sfimm_p
    0U,	// F2_sfinvsqrta
    0U,	// F2_sfmax
    0U,	// F2_sfmin
    0U,	// F2_sfmpy
    0U,	// F2_sfrecipa
    0U,	// F2_sfsub
    0U,	// FCONST32_nsdata
    0U,	// HEXAGON_V6_hi
    0U,	// HEXAGON_V6_hi_128B
    0U,	// HEXAGON_V6_lo
    0U,	// HEXAGON_V6_lo_128B
    0U,	// HEXAGON_V6_vassignp
    0U,	// HEXAGON_V6_vassignp_128B
    0U,	// HEXAGON_V6_vd0_pseudo
    0U,	// HEXAGON_V6_vd0_pseudo_128B
    0U,	// HI
    0U,	// HI_GOT
    0U,	// HI_GOTREL
    0U,	// HI_L
    0U,	// HI_PIC
    0U,	// Insert4
    0U,	// J2_call
    0U,	// J2_callf
    0U,	// J2_callr
    0U,	// J2_callrf
    0U,	// J2_callrt
    0U,	// J2_callt
    0U,	// J2_jump
    0U,	// J2_jump_ext
    0U,	// J2_jump_extf
    0U,	// J2_jump_extfnew
    0U,	// J2_jump_extfnewpt
    0U,	// J2_jump_extt
    0U,	// J2_jump_exttnew
    0U,	// J2_jump_exttnewpt
    0U,	// J2_jump_noext
    0U,	// J2_jump_noextf
    0U,	// J2_jump_noextfnew
    0U,	// J2_jump_noextfnewpt
    0U,	// J2_jump_noextt
    0U,	// J2_jump_noexttnew
    0U,	// J2_jump_noexttnewpt
    0U,	// J2_jumpf
    0U,	// J2_jumpfnew
    0U,	// J2_jumpfnewpt
    0U,	// J2_jumpr
    0U,	// J2_jumprf
    0U,	// J2_jumprfnew
    0U,	// J2_jumprfnewpt
    0U,	// J2_jumprgtez
    0U,	// J2_jumprgtezpt
    0U,	// J2_jumprltez
    0U,	// J2_jumprltezpt
    0U,	// J2_jumprnz
    0U,	// J2_jumprnzpt
    0U,	// J2_jumprt
    0U,	// J2_jumprtnew
    0U,	// J2_jumprtnewpt
    0U,	// J2_jumprz
    0U,	// J2_jumprzpt
    0U,	// J2_jumpt
    0U,	// J2_jumptnew
    0U,	// J2_jumptnewpt
    0U,	// J2_loop0i
    0U,	// J2_loop0iext
    0U,	// J2_loop0r
    0U,	// J2_loop0rext
    0U,	// J2_loop1i
    0U,	// J2_loop1iext
    0U,	// J2_loop1r
    0U,	// J2_loop1rext
    0U,	// J2_ploop1si
    0U,	// J2_ploop1sr
    0U,	// J2_ploop2si
    0U,	// J2_ploop2sr
    0U,	// J2_ploop3si
    0U,	// J2_ploop3sr
    0U,	// J4_cmpeq_f_jumpnv_nt
    0U,	// J4_cmpeq_f_jumpnv_t
    0U,	// J4_cmpeq_fp0_jump_nt
    0U,	// J4_cmpeq_fp0_jump_t
    0U,	// J4_cmpeq_fp1_jump_nt
    0U,	// J4_cmpeq_fp1_jump_t
    0U,	// J4_cmpeq_t_jumpnv_nt
    0U,	// J4_cmpeq_t_jumpnv_t
    0U,	// J4_cmpeq_tp0_jump_nt
    0U,	// J4_cmpeq_tp0_jump_t
    0U,	// J4_cmpeq_tp1_jump_nt
    0U,	// J4_cmpeq_tp1_jump_t
    0U,	// J4_cmpeqi_f_jumpnv_nt
    0U,	// J4_cmpeqi_f_jumpnv_t
    0U,	// J4_cmpeqi_fp0_jump_nt
    0U,	// J4_cmpeqi_fp0_jump_t
    0U,	// J4_cmpeqi_fp1_jump_nt
    0U,	// J4_cmpeqi_fp1_jump_t
    0U,	// J4_cmpeqi_t_jumpnv_nt
    0U,	// J4_cmpeqi_t_jumpnv_t
    0U,	// J4_cmpeqi_tp0_jump_nt
    0U,	// J4_cmpeqi_tp0_jump_t
    0U,	// J4_cmpeqi_tp1_jump_nt
    0U,	// J4_cmpeqi_tp1_jump_t
    0U,	// J4_cmpeqn1_f_jumpnv_nt
    0U,	// J4_cmpeqn1_f_jumpnv_t
    0U,	// J4_cmpeqn1_fp0_jump_nt
    0U,	// J4_cmpeqn1_fp0_jump_t
    0U,	// J4_cmpeqn1_fp1_jump_nt
    0U,	// J4_cmpeqn1_fp1_jump_t
    0U,	// J4_cmpeqn1_t_jumpnv_nt
    0U,	// J4_cmpeqn1_t_jumpnv_t
    0U,	// J4_cmpeqn1_tp0_jump_nt
    0U,	// J4_cmpeqn1_tp0_jump_t
    0U,	// J4_cmpeqn1_tp1_jump_nt
    0U,	// J4_cmpeqn1_tp1_jump_t
    0U,	// J4_cmpgt_f_jumpnv_nt
    0U,	// J4_cmpgt_f_jumpnv_t
    0U,	// J4_cmpgt_fp0_jump_nt
    0U,	// J4_cmpgt_fp0_jump_t
    0U,	// J4_cmpgt_fp1_jump_nt
    0U,	// J4_cmpgt_fp1_jump_t
    0U,	// J4_cmpgt_t_jumpnv_nt
    0U,	// J4_cmpgt_t_jumpnv_t
    0U,	// J4_cmpgt_tp0_jump_nt
    0U,	// J4_cmpgt_tp0_jump_t
    0U,	// J4_cmpgt_tp1_jump_nt
    0U,	// J4_cmpgt_tp1_jump_t
    0U,	// J4_cmpgti_f_jumpnv_nt
    0U,	// J4_cmpgti_f_jumpnv_t
    0U,	// J4_cmpgti_fp0_jump_nt
    0U,	// J4_cmpgti_fp0_jump_t
    0U,	// J4_cmpgti_fp1_jump_nt
    0U,	// J4_cmpgti_fp1_jump_t
    0U,	// J4_cmpgti_t_jumpnv_nt
    0U,	// J4_cmpgti_t_jumpnv_t
    0U,	// J4_cmpgti_tp0_jump_nt
    0U,	// J4_cmpgti_tp0_jump_t
    0U,	// J4_cmpgti_tp1_jump_nt
    0U,	// J4_cmpgti_tp1_jump_t
    0U,	// J4_cmpgtn1_f_jumpnv_nt
    0U,	// J4_cmpgtn1_f_jumpnv_t
    0U,	// J4_cmpgtn1_fp0_jump_nt
    0U,	// J4_cmpgtn1_fp0_jump_t
    0U,	// J4_cmpgtn1_fp1_jump_nt
    0U,	// J4_cmpgtn1_fp1_jump_t
    0U,	// J4_cmpgtn1_t_jumpnv_nt
    0U,	// J4_cmpgtn1_t_jumpnv_t
    0U,	// J4_cmpgtn1_tp0_jump_nt
    0U,	// J4_cmpgtn1_tp0_jump_t
    0U,	// J4_cmpgtn1_tp1_jump_nt
    0U,	// J4_cmpgtn1_tp1_jump_t
    0U,	// J4_cmpgtu_f_jumpnv_nt
    0U,	// J4_cmpgtu_f_jumpnv_t
    0U,	// J4_cmpgtu_fp0_jump_nt
    0U,	// J4_cmpgtu_fp0_jump_t
    0U,	// J4_cmpgtu_fp1_jump_nt
    0U,	// J4_cmpgtu_fp1_jump_t
    0U,	// J4_cmpgtu_t_jumpnv_nt
    0U,	// J4_cmpgtu_t_jumpnv_t
    0U,	// J4_cmpgtu_tp0_jump_nt
    0U,	// J4_cmpgtu_tp0_jump_t
    0U,	// J4_cmpgtu_tp1_jump_nt
    0U,	// J4_cmpgtu_tp1_jump_t
    0U,	// J4_cmpgtui_f_jumpnv_nt
    0U,	// J4_cmpgtui_f_jumpnv_t
    0U,	// J4_cmpgtui_fp0_jump_nt
    0U,	// J4_cmpgtui_fp0_jump_t
    0U,	// J4_cmpgtui_fp1_jump_nt
    0U,	// J4_cmpgtui_fp1_jump_t
    0U,	// J4_cmpgtui_t_jumpnv_nt
    0U,	// J4_cmpgtui_t_jumpnv_t
    0U,	// J4_cmpgtui_tp0_jump_nt
    0U,	// J4_cmpgtui_tp0_jump_t
    0U,	// J4_cmpgtui_tp1_jump_nt
    0U,	// J4_cmpgtui_tp1_jump_t
    0U,	// J4_cmplt_f_jumpnv_nt
    0U,	// J4_cmplt_f_jumpnv_t
    0U,	// J4_cmplt_t_jumpnv_nt
    0U,	// J4_cmplt_t_jumpnv_t
    0U,	// J4_cmpltu_f_jumpnv_nt
    0U,	// J4_cmpltu_f_jumpnv_t
    0U,	// J4_cmpltu_t_jumpnv_nt
    0U,	// J4_cmpltu_t_jumpnv_t
    0U,	// J4_hintjumpr
    0U,	// J4_jumpseti
    0U,	// J4_jumpsetr
    0U,	// J4_tstbit0_f_jumpnv_nt
    0U,	// J4_tstbit0_f_jumpnv_t
    0U,	// J4_tstbit0_fp0_jump_nt
    0U,	// J4_tstbit0_fp0_jump_t
    0U,	// J4_tstbit0_fp1_jump_nt
    0U,	// J4_tstbit0_fp1_jump_t
    0U,	// J4_tstbit0_t_jumpnv_nt
    0U,	// J4_tstbit0_t_jumpnv_t
    0U,	// J4_tstbit0_tp0_jump_nt
    0U,	// J4_tstbit0_tp0_jump_t
    0U,	// J4_tstbit0_tp1_jump_nt
    0U,	// J4_tstbit0_tp1_jump_t
    0U,	// JMPret
    0U,	// JMPretf
    0U,	// JMPretfnew
    0U,	// JMPretfnewpt
    0U,	// JMPrett
    0U,	// JMPrettnew
    0U,	// JMPrettnewpt
    0U,	// L2_deallocframe
    0U,	// L2_loadalignb_io
    0U,	// L2_loadalignb_pbr
    0U,	// L2_loadalignb_pci
    0U,	// L2_loadalignb_pcr
    0U,	// L2_loadalignb_pi
    0U,	// L2_loadalignb_pr
    0U,	// L2_loadalignh_io
    0U,	// L2_loadalignh_pbr
    0U,	// L2_loadalignh_pci
    0U,	// L2_loadalignh_pcr
    0U,	// L2_loadalignh_pi
    0U,	// L2_loadalignh_pr
    0U,	// L2_loadbsw2_io
    0U,	// L2_loadbsw2_pbr
    0U,	// L2_loadbsw2_pci
    0U,	// L2_loadbsw2_pcr
    0U,	// L2_loadbsw2_pi
    0U,	// L2_loadbsw2_pr
    0U,	// L2_loadbsw4_io
    0U,	// L2_loadbsw4_pbr
    0U,	// L2_loadbsw4_pci
    0U,	// L2_loadbsw4_pcr
    0U,	// L2_loadbsw4_pi
    0U,	// L2_loadbsw4_pr
    0U,	// L2_loadbzw2_io
    0U,	// L2_loadbzw2_pbr
    0U,	// L2_loadbzw2_pci
    0U,	// L2_loadbzw2_pcr
    0U,	// L2_loadbzw2_pi
    0U,	// L2_loadbzw2_pr
    0U,	// L2_loadbzw4_io
    0U,	// L2_loadbzw4_pbr
    0U,	// L2_loadbzw4_pci
    0U,	// L2_loadbzw4_pcr
    0U,	// L2_loadbzw4_pi
    0U,	// L2_loadbzw4_pr
    0U,	// L2_loadrb_io
    0U,	// L2_loadrb_pbr
    0U,	// L2_loadrb_pbr_pseudo
    0U,	// L2_loadrb_pci
    0U,	// L2_loadrb_pci_pseudo
    0U,	// L2_loadrb_pcr
    0U,	// L2_loadrb_pi
    0U,	// L2_loadrb_pr
    0U,	// L2_loadrbgp
    0U,	// L2_loadrd_io
    0U,	// L2_loadrd_pbr
    0U,	// L2_loadrd_pbr_pseudo
    0U,	// L2_loadrd_pci
    0U,	// L2_loadrd_pci_pseudo
    0U,	// L2_loadrd_pcr
    0U,	// L2_loadrd_pi
    0U,	// L2_loadrd_pr
    0U,	// L2_loadrdgp
    0U,	// L2_loadrh_io
    0U,	// L2_loadrh_pbr
    0U,	// L2_loadrh_pbr_pseudo
    0U,	// L2_loadrh_pci
    0U,	// L2_loadrh_pci_pseudo
    0U,	// L2_loadrh_pcr
    0U,	// L2_loadrh_pi
    0U,	// L2_loadrh_pr
    0U,	// L2_loadrhgp
    0U,	// L2_loadri_io
    0U,	// L2_loadri_pbr
    0U,	// L2_loadri_pbr_pseudo
    0U,	// L2_loadri_pci
    0U,	// L2_loadri_pci_pseudo
    0U,	// L2_loadri_pcr
    0U,	// L2_loadri_pi
    0U,	// L2_loadri_pr
    0U,	// L2_loadrigp
    0U,	// L2_loadrub_io
    0U,	// L2_loadrub_pbr
    0U,	// L2_loadrub_pbr_pseudo
    0U,	// L2_loadrub_pci
    0U,	// L2_loadrub_pci_pseudo
    0U,	// L2_loadrub_pcr
    0U,	// L2_loadrub_pi
    0U,	// L2_loadrub_pr
    0U,	// L2_loadrubgp
    0U,	// L2_loadruh_io
    0U,	// L2_loadruh_pbr
    0U,	// L2_loadruh_pbr_pseudo
    0U,	// L2_loadruh_pci
    0U,	// L2_loadruh_pci_pseudo
    0U,	// L2_loadruh_pcr
    0U,	// L2_loadruh_pi
    0U,	// L2_loadruh_pr
    0U,	// L2_loadruhgp
    0U,	// L2_loadw_locked
    0U,	// L2_ploadrbf_io
    0U,	// L2_ploadrbf_pi
    0U,	// L2_ploadrbfnew_io
    0U,	// L2_ploadrbfnew_pi
    0U,	// L2_ploadrbt_io
    0U,	// L2_ploadrbt_pi
    0U,	// L2_ploadrbtnew_io
    0U,	// L2_ploadrbtnew_pi
    0U,	// L2_ploadrdf_io
    0U,	// L2_ploadrdf_pi
    0U,	// L2_ploadrdfnew_io
    0U,	// L2_ploadrdfnew_pi
    0U,	// L2_ploadrdt_io
    0U,	// L2_ploadrdt_pi
    0U,	// L2_ploadrdtnew_io
    0U,	// L2_ploadrdtnew_pi
    0U,	// L2_ploadrhf_io
    0U,	// L2_ploadrhf_pi
    0U,	// L2_ploadrhfnew_io
    0U,	// L2_ploadrhfnew_pi
    0U,	// L2_ploadrht_io
    0U,	// L2_ploadrht_pi
    0U,	// L2_ploadrhtnew_io
    0U,	// L2_ploadrhtnew_pi
    0U,	// L2_ploadrif_io
    0U,	// L2_ploadrif_pi
    0U,	// L2_ploadrifnew_io
    0U,	// L2_ploadrifnew_pi
    0U,	// L2_ploadrit_io
    0U,	// L2_ploadrit_pi
    0U,	// L2_ploadritnew_io
    0U,	// L2_ploadritnew_pi
    0U,	// L2_ploadrubf_io
    0U,	// L2_ploadrubf_pi
    0U,	// L2_ploadrubfnew_io
    0U,	// L2_ploadrubfnew_pi
    0U,	// L2_ploadrubt_io
    0U,	// L2_ploadrubt_pi
    0U,	// L2_ploadrubtnew_io
    0U,	// L2_ploadrubtnew_pi
    0U,	// L2_ploadruhf_io
    0U,	// L2_ploadruhf_pi
    0U,	// L2_ploadruhfnew_io
    0U,	// L2_ploadruhfnew_pi
    0U,	// L2_ploadruht_io
    0U,	// L2_ploadruht_pi
    0U,	// L2_ploadruhtnew_io
    0U,	// L2_ploadruhtnew_pi
    0U,	// L4_add_memopb_io
    0U,	// L4_add_memoph_io
    0U,	// L4_add_memopw_io
    0U,	// L4_and_memopb_io
    0U,	// L4_and_memoph_io
    0U,	// L4_and_memopw_io
    0U,	// L4_iadd_memopb_io
    0U,	// L4_iadd_memoph_io
    0U,	// L4_iadd_memopw_io
    0U,	// L4_iand_memopb_io
    0U,	// L4_iand_memoph_io
    0U,	// L4_iand_memopw_io
    0U,	// L4_ior_memopb_io
    0U,	// L4_ior_memoph_io
    0U,	// L4_ior_memopw_io
    0U,	// L4_isub_memopb_io
    0U,	// L4_isub_memoph_io
    0U,	// L4_isub_memopw_io
    0U,	// L4_loadalignb_ap
    0U,	// L4_loadalignb_ur
    0U,	// L4_loadalignh_ap
    0U,	// L4_loadalignh_ur
    0U,	// L4_loadbsw2_ap
    0U,	// L4_loadbsw2_ur
    0U,	// L4_loadbsw4_ap
    0U,	// L4_loadbsw4_ur
    0U,	// L4_loadbzw2_ap
    0U,	// L4_loadbzw2_ur
    0U,	// L4_loadbzw4_ap
    0U,	// L4_loadbzw4_ur
    0U,	// L4_loadd_locked
    0U,	// L4_loadrb_abs
    0U,	// L4_loadrb_ap
    0U,	// L4_loadrb_rr
    0U,	// L4_loadrb_ur
    0U,	// L4_loadrd_abs
    0U,	// L4_loadrd_ap
    0U,	// L4_loadrd_rr
    0U,	// L4_loadrd_ur
    0U,	// L4_loadrh_abs
    0U,	// L4_loadrh_ap
    0U,	// L4_loadrh_rr
    0U,	// L4_loadrh_ur
    0U,	// L4_loadri_abs
    0U,	// L4_loadri_ap
    0U,	// L4_loadri_rr
    0U,	// L4_loadri_ur
    0U,	// L4_loadrub_abs
    0U,	// L4_loadrub_ap
    0U,	// L4_loadrub_rr
    0U,	// L4_loadrub_ur
    0U,	// L4_loadruh_abs
    0U,	// L4_loadruh_ap
    0U,	// L4_loadruh_rr
    0U,	// L4_loadruh_ur
    0U,	// L4_or_memopb_io
    0U,	// L4_or_memoph_io
    0U,	// L4_or_memopw_io
    0U,	// L4_ploadrbf_abs
    0U,	// L4_ploadrbf_rr
    0U,	// L4_ploadrbfnew_abs
    0U,	// L4_ploadrbfnew_rr
    0U,	// L4_ploadrbt_abs
    0U,	// L4_ploadrbt_rr
    0U,	// L4_ploadrbtnew_abs
    0U,	// L4_ploadrbtnew_rr
    0U,	// L4_ploadrdf_abs
    0U,	// L4_ploadrdf_rr
    0U,	// L4_ploadrdfnew_abs
    0U,	// L4_ploadrdfnew_rr
    0U,	// L4_ploadrdt_abs
    0U,	// L4_ploadrdt_rr
    0U,	// L4_ploadrdtnew_abs
    0U,	// L4_ploadrdtnew_rr
    0U,	// L4_ploadrhf_abs
    0U,	// L4_ploadrhf_rr
    0U,	// L4_ploadrhfnew_abs
    0U,	// L4_ploadrhfnew_rr
    0U,	// L4_ploadrht_abs
    0U,	// L4_ploadrht_rr
    0U,	// L4_ploadrhtnew_abs
    0U,	// L4_ploadrhtnew_rr
    0U,	// L4_ploadrif_abs
    0U,	// L4_ploadrif_rr
    0U,	// L4_ploadrifnew_abs
    0U,	// L4_ploadrifnew_rr
    0U,	// L4_ploadrit_abs
    0U,	// L4_ploadrit_rr
    0U,	// L4_ploadritnew_abs
    0U,	// L4_ploadritnew_rr
    0U,	// L4_ploadrubf_abs
    0U,	// L4_ploadrubf_rr
    0U,	// L4_ploadrubfnew_abs
    0U,	// L4_ploadrubfnew_rr
    0U,	// L4_ploadrubt_abs
    0U,	// L4_ploadrubt_rr
    0U,	// L4_ploadrubtnew_abs
    0U,	// L4_ploadrubtnew_rr
    0U,	// L4_ploadruhf_abs
    0U,	// L4_ploadruhf_rr
    0U,	// L4_ploadruhfnew_abs
    0U,	// L4_ploadruhfnew_rr
    0U,	// L4_ploadruht_abs
    0U,	// L4_ploadruht_rr
    0U,	// L4_ploadruhtnew_abs
    0U,	// L4_ploadruhtnew_rr
    0U,	// L4_return
    0U,	// L4_return_f
    0U,	// L4_return_fnew_pnt
    0U,	// L4_return_fnew_pt
    0U,	// L4_return_t
    0U,	// L4_return_tnew_pnt
    0U,	// L4_return_tnew_pt
    0U,	// L4_sub_memopb_io
    0U,	// L4_sub_memoph_io
    0U,	// L4_sub_memopw_io
    0U,	// LDriq_pred_V6
    0U,	// LDriq_pred_V6_128B
    0U,	// LDriq_pred_vec_V6
    0U,	// LDriq_pred_vec_V6_128B
    0U,	// LDriv_pseudo_V6
    0U,	// LDriv_pseudo_V6_128B
    0U,	// LDrivv_indexed
    0U,	// LDrivv_indexed_128B
    0U,	// LDrivv_pseudo_V6
    0U,	// LDrivv_pseudo_V6_128B
    0U,	// LDriw_pred
    0U,	// LO
    0U,	// LO_GOT
    0U,	// LO_GOTREL
    0U,	// LO_H
    0U,	// LO_PIC
    0U,	// M2_acci
    0U,	// M2_accii
    0U,	// M2_cmaci_s0
    0U,	// M2_cmacr_s0
    0U,	// M2_cmacs_s0
    0U,	// M2_cmacs_s1
    0U,	// M2_cmacsc_s0
    0U,	// M2_cmacsc_s1
    0U,	// M2_cmpyi_s0
    0U,	// M2_cmpyr_s0
    0U,	// M2_cmpyrs_s0
    0U,	// M2_cmpyrs_s1
    0U,	// M2_cmpyrsc_s0
    0U,	// M2_cmpyrsc_s1
    0U,	// M2_cmpys_s0
    0U,	// M2_cmpys_s1
    0U,	// M2_cmpysc_s0
    0U,	// M2_cmpysc_s1
    0U,	// M2_cnacs_s0
    0U,	// M2_cnacs_s1
    0U,	// M2_cnacsc_s0
    0U,	// M2_cnacsc_s1
    0U,	// M2_dpmpyss_acc_s0
    0U,	// M2_dpmpyss_nac_s0
    0U,	// M2_dpmpyss_rnd_s0
    0U,	// M2_dpmpyss_s0
    0U,	// M2_dpmpyuu_acc_s0
    0U,	// M2_dpmpyuu_nac_s0
    0U,	// M2_dpmpyuu_s0
    0U,	// M2_hmmpyh_rs1
    0U,	// M2_hmmpyh_s1
    0U,	// M2_hmmpyl_rs1
    0U,	// M2_hmmpyl_s1
    0U,	// M2_maci
    0U,	// M2_macsin
    0U,	// M2_macsip
    0U,	// M2_mmachs_rs0
    0U,	// M2_mmachs_rs1
    0U,	// M2_mmachs_s0
    0U,	// M2_mmachs_s1
    0U,	// M2_mmacls_rs0
    0U,	// M2_mmacls_rs1
    0U,	// M2_mmacls_s0
    0U,	// M2_mmacls_s1
    0U,	// M2_mmacuhs_rs0
    0U,	// M2_mmacuhs_rs1
    0U,	// M2_mmacuhs_s0
    0U,	// M2_mmacuhs_s1
    0U,	// M2_mmaculs_rs0
    0U,	// M2_mmaculs_rs1
    0U,	// M2_mmaculs_s0
    0U,	// M2_mmaculs_s1
    0U,	// M2_mmpyh_rs0
    0U,	// M2_mmpyh_rs1
    0U,	// M2_mmpyh_s0
    0U,	// M2_mmpyh_s1
    0U,	// M2_mmpyl_rs0
    0U,	// M2_mmpyl_rs1
    0U,	// M2_mmpyl_s0
    0U,	// M2_mmpyl_s1
    0U,	// M2_mmpyuh_rs0
    0U,	// M2_mmpyuh_rs1
    0U,	// M2_mmpyuh_s0
    0U,	// M2_mmpyuh_s1
    0U,	// M2_mmpyul_rs0
    0U,	// M2_mmpyul_rs1
    0U,	// M2_mmpyul_s0
    0U,	// M2_mmpyul_s1
    0U,	// M2_mpy_acc_hh_s0
    0U,	// M2_mpy_acc_hh_s1
    0U,	// M2_mpy_acc_hl_s0
    0U,	// M2_mpy_acc_hl_s1
    0U,	// M2_mpy_acc_lh_s0
    0U,	// M2_mpy_acc_lh_s1
    0U,	// M2_mpy_acc_ll_s0
    0U,	// M2_mpy_acc_ll_s1
    0U,	// M2_mpy_acc_sat_hh_s0
    0U,	// M2_mpy_acc_sat_hh_s1
    0U,	// M2_mpy_acc_sat_hl_s0
    0U,	// M2_mpy_acc_sat_hl_s1
    0U,	// M2_mpy_acc_sat_lh_s0
    0U,	// M2_mpy_acc_sat_lh_s1
    0U,	// M2_mpy_acc_sat_ll_s0
    0U,	// M2_mpy_acc_sat_ll_s1
    0U,	// M2_mpy_hh_s0
    0U,	// M2_mpy_hh_s1
    0U,	// M2_mpy_hl_s0
    0U,	// M2_mpy_hl_s1
    0U,	// M2_mpy_lh_s0
    0U,	// M2_mpy_lh_s1
    0U,	// M2_mpy_ll_s0
    0U,	// M2_mpy_ll_s1
    0U,	// M2_mpy_nac_hh_s0
    0U,	// M2_mpy_nac_hh_s1
    0U,	// M2_mpy_nac_hl_s0
    0U,	// M2_mpy_nac_hl_s1
    0U,	// M2_mpy_nac_lh_s0
    0U,	// M2_mpy_nac_lh_s1
    0U,	// M2_mpy_nac_ll_s0
    0U,	// M2_mpy_nac_ll_s1
    0U,	// M2_mpy_nac_sat_hh_s0
    0U,	// M2_mpy_nac_sat_hh_s1
    0U,	// M2_mpy_nac_sat_hl_s0
    0U,	// M2_mpy_nac_sat_hl_s1
    0U,	// M2_mpy_nac_sat_lh_s0
    0U,	// M2_mpy_nac_sat_lh_s1
    0U,	// M2_mpy_nac_sat_ll_s0
    0U,	// M2_mpy_nac_sat_ll_s1
    0U,	// M2_mpy_rnd_hh_s0
    0U,	// M2_mpy_rnd_hh_s1
    0U,	// M2_mpy_rnd_hl_s0
    0U,	// M2_mpy_rnd_hl_s1
    0U,	// M2_mpy_rnd_lh_s0
    0U,	// M2_mpy_rnd_lh_s1
    0U,	// M2_mpy_rnd_ll_s0
    0U,	// M2_mpy_rnd_ll_s1
    0U,	// M2_mpy_sat_hh_s0
    0U,	// M2_mpy_sat_hh_s1
    0U,	// M2_mpy_sat_hl_s0
    0U,	// M2_mpy_sat_hl_s1
    0U,	// M2_mpy_sat_lh_s0
    0U,	// M2_mpy_sat_lh_s1
    0U,	// M2_mpy_sat_ll_s0
    0U,	// M2_mpy_sat_ll_s1
    0U,	// M2_mpy_sat_rnd_hh_s0
    0U,	// M2_mpy_sat_rnd_hh_s1
    0U,	// M2_mpy_sat_rnd_hl_s0
    0U,	// M2_mpy_sat_rnd_hl_s1
    0U,	// M2_mpy_sat_rnd_lh_s0
    0U,	// M2_mpy_sat_rnd_lh_s1
    0U,	// M2_mpy_sat_rnd_ll_s0
    0U,	// M2_mpy_sat_rnd_ll_s1
    0U,	// M2_mpy_up
    0U,	// M2_mpy_up_s1
    0U,	// M2_mpy_up_s1_sat
    0U,	// M2_mpyd_acc_hh_s0
    0U,	// M2_mpyd_acc_hh_s1
    0U,	// M2_mpyd_acc_hl_s0
    0U,	// M2_mpyd_acc_hl_s1
    0U,	// M2_mpyd_acc_lh_s0
    0U,	// M2_mpyd_acc_lh_s1
    0U,	// M2_mpyd_acc_ll_s0
    0U,	// M2_mpyd_acc_ll_s1
    0U,	// M2_mpyd_hh_s0
    0U,	// M2_mpyd_hh_s1
    0U,	// M2_mpyd_hl_s0
    0U,	// M2_mpyd_hl_s1
    0U,	// M2_mpyd_lh_s0
    0U,	// M2_mpyd_lh_s1
    0U,	// M2_mpyd_ll_s0
    0U,	// M2_mpyd_ll_s1
    0U,	// M2_mpyd_nac_hh_s0
    0U,	// M2_mpyd_nac_hh_s1
    0U,	// M2_mpyd_nac_hl_s0
    0U,	// M2_mpyd_nac_hl_s1
    0U,	// M2_mpyd_nac_lh_s0
    0U,	// M2_mpyd_nac_lh_s1
    0U,	// M2_mpyd_nac_ll_s0
    0U,	// M2_mpyd_nac_ll_s1
    0U,	// M2_mpyd_rnd_hh_s0
    0U,	// M2_mpyd_rnd_hh_s1
    0U,	// M2_mpyd_rnd_hl_s0
    0U,	// M2_mpyd_rnd_hl_s1
    0U,	// M2_mpyd_rnd_lh_s0
    0U,	// M2_mpyd_rnd_lh_s1
    0U,	// M2_mpyd_rnd_ll_s0
    0U,	// M2_mpyd_rnd_ll_s1
    0U,	// M2_mpyi
    0U,	// M2_mpysin
    0U,	// M2_mpysip
    0U,	// M2_mpysmi
    0U,	// M2_mpysu_up
    0U,	// M2_mpyu_acc_hh_s0
    0U,	// M2_mpyu_acc_hh_s1
    0U,	// M2_mpyu_acc_hl_s0
    0U,	// M2_mpyu_acc_hl_s1
    0U,	// M2_mpyu_acc_lh_s0
    0U,	// M2_mpyu_acc_lh_s1
    0U,	// M2_mpyu_acc_ll_s0
    0U,	// M2_mpyu_acc_ll_s1
    0U,	// M2_mpyu_hh_s0
    0U,	// M2_mpyu_hh_s1
    0U,	// M2_mpyu_hl_s0
    0U,	// M2_mpyu_hl_s1
    0U,	// M2_mpyu_lh_s0
    0U,	// M2_mpyu_lh_s1
    0U,	// M2_mpyu_ll_s0
    0U,	// M2_mpyu_ll_s1
    0U,	// M2_mpyu_nac_hh_s0
    0U,	// M2_mpyu_nac_hh_s1
    0U,	// M2_mpyu_nac_hl_s0
    0U,	// M2_mpyu_nac_hl_s1
    0U,	// M2_mpyu_nac_lh_s0
    0U,	// M2_mpyu_nac_lh_s1
    0U,	// M2_mpyu_nac_ll_s0
    0U,	// M2_mpyu_nac_ll_s1
    0U,	// M2_mpyu_up
    0U,	// M2_mpyud_acc_hh_s0
    0U,	// M2_mpyud_acc_hh_s1
    0U,	// M2_mpyud_acc_hl_s0
    0U,	// M2_mpyud_acc_hl_s1
    0U,	// M2_mpyud_acc_lh_s0
    0U,	// M2_mpyud_acc_lh_s1
    0U,	// M2_mpyud_acc_ll_s0
    0U,	// M2_mpyud_acc_ll_s1
    0U,	// M2_mpyud_hh_s0
    0U,	// M2_mpyud_hh_s1
    0U,	// M2_mpyud_hl_s0
    0U,	// M2_mpyud_hl_s1
    0U,	// M2_mpyud_lh_s0
    0U,	// M2_mpyud_lh_s1
    0U,	// M2_mpyud_ll_s0
    0U,	// M2_mpyud_ll_s1
    0U,	// M2_mpyud_nac_hh_s0
    0U,	// M2_mpyud_nac_hh_s1
    0U,	// M2_mpyud_nac_hl_s0
    0U,	// M2_mpyud_nac_hl_s1
    0U,	// M2_mpyud_nac_lh_s0
    0U,	// M2_mpyud_nac_lh_s1
    0U,	// M2_mpyud_nac_ll_s0
    0U,	// M2_mpyud_nac_ll_s1
    0U,	// M2_mpyui
    0U,	// M2_nacci
    0U,	// M2_naccii
    0U,	// M2_subacc
    0U,	// M2_vabsdiffh
    0U,	// M2_vabsdiffw
    0U,	// M2_vcmac_s0_sat_i
    0U,	// M2_vcmac_s0_sat_r
    0U,	// M2_vcmpy_s0_sat_i
    0U,	// M2_vcmpy_s0_sat_r
    0U,	// M2_vcmpy_s1_sat_i
    0U,	// M2_vcmpy_s1_sat_r
    0U,	// M2_vdmacs_s0
    0U,	// M2_vdmacs_s1
    0U,	// M2_vdmpyrs_s0
    0U,	// M2_vdmpyrs_s1
    0U,	// M2_vdmpys_s0
    0U,	// M2_vdmpys_s1
    0U,	// M2_vmac2
    0U,	// M2_vmac2es
    0U,	// M2_vmac2es_s0
    0U,	// M2_vmac2es_s1
    0U,	// M2_vmac2s_s0
    0U,	// M2_vmac2s_s1
    0U,	// M2_vmac2su_s0
    0U,	// M2_vmac2su_s1
    0U,	// M2_vmpy2es_s0
    0U,	// M2_vmpy2es_s1
    0U,	// M2_vmpy2s_s0
    0U,	// M2_vmpy2s_s0pack
    0U,	// M2_vmpy2s_s1
    0U,	// M2_vmpy2s_s1pack
    0U,	// M2_vmpy2su_s0
    0U,	// M2_vmpy2su_s1
    0U,	// M2_vraddh
    0U,	// M2_vradduh
    0U,	// M2_vrcmaci_s0
    0U,	// M2_vrcmaci_s0c
    0U,	// M2_vrcmacr_s0
    0U,	// M2_vrcmacr_s0c
    0U,	// M2_vrcmpyi_s0
    0U,	// M2_vrcmpyi_s0c
    0U,	// M2_vrcmpyr_s0
    0U,	// M2_vrcmpyr_s0c
    0U,	// M2_vrcmpys_acc_s1
    0U,	// M2_vrcmpys_acc_s1_h
    0U,	// M2_vrcmpys_acc_s1_l
    0U,	// M2_vrcmpys_s1
    0U,	// M2_vrcmpys_s1_h
    0U,	// M2_vrcmpys_s1_l
    0U,	// M2_vrcmpys_s1rp
    0U,	// M2_vrcmpys_s1rp_h
    0U,	// M2_vrcmpys_s1rp_l
    0U,	// M2_vrmac_s0
    0U,	// M2_vrmpy_s0
    0U,	// M2_xor_xacc
    0U,	// M4_and_and
    0U,	// M4_and_andn
    0U,	// M4_and_or
    0U,	// M4_and_xor
    0U,	// M4_cmpyi_wh
    0U,	// M4_cmpyi_whc
    0U,	// M4_cmpyr_wh
    0U,	// M4_cmpyr_whc
    0U,	// M4_mac_up_s1_sat
    0U,	// M4_mpyri_addi
    2U,	// M4_mpyri_addr
    0U,	// M4_mpyri_addr_u2
    0U,	// M4_mpyrr_addi
    0U,	// M4_mpyrr_addr
    0U,	// M4_nac_up_s1_sat
    0U,	// M4_or_and
    0U,	// M4_or_andn
    0U,	// M4_or_or
    0U,	// M4_or_xor
    0U,	// M4_pmpyw
    0U,	// M4_pmpyw_acc
    0U,	// M4_vpmpyh
    0U,	// M4_vpmpyh_acc
    0U,	// M4_vrmpyeh_acc_s0
    0U,	// M4_vrmpyeh_acc_s1
    0U,	// M4_vrmpyeh_s0
    0U,	// M4_vrmpyeh_s1
    0U,	// M4_vrmpyoh_acc_s0
    0U,	// M4_vrmpyoh_acc_s1
    0U,	// M4_vrmpyoh_s0
    0U,	// M4_vrmpyoh_s1
    0U,	// M4_xor_and
    0U,	// M4_xor_andn
    0U,	// M4_xor_or
    0U,	// M4_xor_xacc
    0U,	// M5_vdmacbsu
    0U,	// M5_vdmpybsu
    0U,	// M5_vmacbsu
    0U,	// M5_vmacbuu
    0U,	// M5_vmpybsu
    0U,	// M5_vmpybuu
    0U,	// M5_vrmacbsu
    0U,	// M5_vrmacbuu
    0U,	// M5_vrmpybsu
    0U,	// M5_vrmpybuu
    0U,	// MUX64_rr
    0U,	// MUX_ir_f
    0U,	// MUX_ri_f
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT
    0U,	// S2_addasl_rrri
    0U,	// S2_allocframe
    0U,	// S2_asl_i_p
    0U,	// S2_asl_i_p_acc
    0U,	// S2_asl_i_p_and
    0U,	// S2_asl_i_p_nac
    0U,	// S2_asl_i_p_or
    0U,	// S2_asl_i_p_xacc
    0U,	// S2_asl_i_r
    0U,	// S2_asl_i_r_acc
    0U,	// S2_asl_i_r_and
    0U,	// S2_asl_i_r_nac
    0U,	// S2_asl_i_r_or
    0U,	// S2_asl_i_r_sat
    0U,	// S2_asl_i_r_xacc
    0U,	// S2_asl_i_vh
    0U,	// S2_asl_i_vw
    0U,	// S2_asl_r_p
    0U,	// S2_asl_r_p_acc
    0U,	// S2_asl_r_p_and
    0U,	// S2_asl_r_p_nac
    0U,	// S2_asl_r_p_or
    0U,	// S2_asl_r_p_xor
    0U,	// S2_asl_r_r
    0U,	// S2_asl_r_r_acc
    0U,	// S2_asl_r_r_and
    0U,	// S2_asl_r_r_nac
    0U,	// S2_asl_r_r_or
    0U,	// S2_asl_r_r_sat
    0U,	// S2_asl_r_vh
    0U,	// S2_asl_r_vw
    0U,	// S2_asr_i_p
    0U,	// S2_asr_i_p_acc
    0U,	// S2_asr_i_p_and
    0U,	// S2_asr_i_p_nac
    0U,	// S2_asr_i_p_or
    0U,	// S2_asr_i_p_rnd
    0U,	// S2_asr_i_p_rnd_goodsyntax
    0U,	// S2_asr_i_r
    0U,	// S2_asr_i_r_acc
    0U,	// S2_asr_i_r_and
    0U,	// S2_asr_i_r_nac
    0U,	// S2_asr_i_r_or
    0U,	// S2_asr_i_r_rnd
    0U,	// S2_asr_i_r_rnd_goodsyntax
    0U,	// S2_asr_i_svw_trun
    0U,	// S2_asr_i_vh
    0U,	// S2_asr_i_vw
    0U,	// S2_asr_r_p
    0U,	// S2_asr_r_p_acc
    0U,	// S2_asr_r_p_and
    0U,	// S2_asr_r_p_nac
    0U,	// S2_asr_r_p_or
    0U,	// S2_asr_r_p_xor
    0U,	// S2_asr_r_r
    0U,	// S2_asr_r_r_acc
    0U,	// S2_asr_r_r_and
    0U,	// S2_asr_r_r_nac
    0U,	// S2_asr_r_r_or
    0U,	// S2_asr_r_r_sat
    0U,	// S2_asr_r_svw_trun
    0U,	// S2_asr_r_vh
    0U,	// S2_asr_r_vw
    0U,	// S2_brev
    0U,	// S2_brevp
    0U,	// S2_cabacdecbin
    0U,	// S2_cabacencbin
    0U,	// S2_cl0
    0U,	// S2_cl0p
    0U,	// S2_cl1
    0U,	// S2_cl1p
    0U,	// S2_clb
    0U,	// S2_clbnorm
    0U,	// S2_clbp
    0U,	// S2_clrbit_i
    0U,	// S2_clrbit_r
    0U,	// S2_ct0
    0U,	// S2_ct0p
    0U,	// S2_ct1
    0U,	// S2_ct1p
    0U,	// S2_deinterleave
    0U,	// S2_extractu
    0U,	// S2_extractu_rp
    0U,	// S2_extractup
    0U,	// S2_extractup_rp
    0U,	// S2_insert
    0U,	// S2_insert_rp
    0U,	// S2_insertp
    0U,	// S2_insertp_rp
    0U,	// S2_interleave
    0U,	// S2_lfsp
    0U,	// S2_lsl_r_p
    0U,	// S2_lsl_r_p_acc
    0U,	// S2_lsl_r_p_and
    0U,	// S2_lsl_r_p_nac
    0U,	// S2_lsl_r_p_or
    0U,	// S2_lsl_r_p_xor
    0U,	// S2_lsl_r_r
    0U,	// S2_lsl_r_r_acc
    0U,	// S2_lsl_r_r_and
    0U,	// S2_lsl_r_r_nac
    0U,	// S2_lsl_r_r_or
    0U,	// S2_lsl_r_vh
    0U,	// S2_lsl_r_vw
    0U,	// S2_lsr_i_p
    0U,	// S2_lsr_i_p_acc
    0U,	// S2_lsr_i_p_and
    0U,	// S2_lsr_i_p_nac
    0U,	// S2_lsr_i_p_or
    0U,	// S2_lsr_i_p_xacc
    0U,	// S2_lsr_i_r
    0U,	// S2_lsr_i_r_acc
    0U,	// S2_lsr_i_r_and
    0U,	// S2_lsr_i_r_nac
    0U,	// S2_lsr_i_r_or
    0U,	// S2_lsr_i_r_xacc
    0U,	// S2_lsr_i_vh
    0U,	// S2_lsr_i_vw
    0U,	// S2_lsr_r_p
    0U,	// S2_lsr_r_p_acc
    0U,	// S2_lsr_r_p_and
    0U,	// S2_lsr_r_p_nac
    0U,	// S2_lsr_r_p_or
    0U,	// S2_lsr_r_p_xor
    0U,	// S2_lsr_r_r
    0U,	// S2_lsr_r_r_acc
    0U,	// S2_lsr_r_r_and
    0U,	// S2_lsr_r_r_nac
    0U,	// S2_lsr_r_r_or
    0U,	// S2_lsr_r_vh
    0U,	// S2_lsr_r_vw
    0U,	// S2_packhl
    0U,	// S2_parityp
    4U,	// S2_pstorerbf_io
    6U,	// S2_pstorerbf_pi
    6U,	// S2_pstorerbfnew_pi
    12U,	// S2_pstorerbnewf_io
    14U,	// S2_pstorerbnewf_pi
    14U,	// S2_pstorerbnewfnew_pi
    12U,	// S2_pstorerbnewt_io
    14U,	// S2_pstorerbnewt_pi
    14U,	// S2_pstorerbnewtnew_pi
    4U,	// S2_pstorerbt_io
    6U,	// S2_pstorerbt_pi
    6U,	// S2_pstorerbtnew_pi
    4U,	// S2_pstorerdf_io
    6U,	// S2_pstorerdf_pi
    6U,	// S2_pstorerdfnew_pi
    4U,	// S2_pstorerdt_io
    6U,	// S2_pstorerdt_pi
    6U,	// S2_pstorerdtnew_pi
    20U,	// S2_pstorerff_io
    22U,	// S2_pstorerff_pi
    22U,	// S2_pstorerffnew_pi
    20U,	// S2_pstorerft_io
    22U,	// S2_pstorerft_pi
    22U,	// S2_pstorerftnew_pi
    4U,	// S2_pstorerhf_io
    6U,	// S2_pstorerhf_pi
    6U,	// S2_pstorerhfnew_pi
    12U,	// S2_pstorerhnewf_io
    14U,	// S2_pstorerhnewf_pi
    14U,	// S2_pstorerhnewfnew_pi
    12U,	// S2_pstorerhnewt_io
    14U,	// S2_pstorerhnewt_pi
    14U,	// S2_pstorerhnewtnew_pi
    4U,	// S2_pstorerht_io
    6U,	// S2_pstorerht_pi
    6U,	// S2_pstorerhtnew_pi
    4U,	// S2_pstorerif_io
    6U,	// S2_pstorerif_pi
    6U,	// S2_pstorerifnew_pi
    12U,	// S2_pstorerinewf_io
    14U,	// S2_pstorerinewf_pi
    14U,	// S2_pstorerinewfnew_pi
    12U,	// S2_pstorerinewt_io
    14U,	// S2_pstorerinewt_pi
    14U,	// S2_pstorerinewtnew_pi
    4U,	// S2_pstorerit_io
    6U,	// S2_pstorerit_pi
    6U,	// S2_pstoreritnew_pi
    0U,	// S2_setbit_i
    0U,	// S2_setbit_r
    0U,	// S2_shuffeb
    0U,	// S2_shuffeh
    0U,	// S2_shuffob
    0U,	// S2_shuffoh
    0U,	// S2_storerb_io
    0U,	// S2_storerb_pbr
    0U,	// S2_storerb_pbr_pseudo
    0U,	// S2_storerb_pci
    0U,	// S2_storerb_pci_pseudo
    0U,	// S2_storerb_pcr
    0U,	// S2_storerb_pi
    0U,	// S2_storerb_pr
    0U,	// S2_storerbabs
    0U,	// S2_storerbgp
    0U,	// S2_storerbnew_io
    0U,	// S2_storerbnew_pbr
    0U,	// S2_storerbnew_pci
    0U,	// S2_storerbnew_pcr
    0U,	// S2_storerbnew_pi
    0U,	// S2_storerbnew_pr
    0U,	// S2_storerbnewabs
    0U,	// S2_storerbnewgp
    0U,	// S2_storerd_io
    0U,	// S2_storerd_pbr
    0U,	// S2_storerd_pbr_pseudo
    0U,	// S2_storerd_pci
    0U,	// S2_storerd_pci_pseudo
    0U,	// S2_storerd_pcr
    0U,	// S2_storerd_pi
    0U,	// S2_storerd_pr
    0U,	// S2_storerdabs
    0U,	// S2_storerdgp
    0U,	// S2_storerf_io
    0U,	// S2_storerf_pbr
    0U,	// S2_storerf_pbr_pseudo
    0U,	// S2_storerf_pci
    0U,	// S2_storerf_pci_pseudo
    0U,	// S2_storerf_pcr
    0U,	// S2_storerf_pi
    0U,	// S2_storerf_pr
    0U,	// S2_storerfabs
    0U,	// S2_storerfgp
    0U,	// S2_storerh_io
    0U,	// S2_storerh_pbr
    0U,	// S2_storerh_pbr_pseudo
    0U,	// S2_storerh_pci
    0U,	// S2_storerh_pci_pseudo
    0U,	// S2_storerh_pcr
    0U,	// S2_storerh_pi
    0U,	// S2_storerh_pr
    0U,	// S2_storerhabs
    0U,	// S2_storerhgp
    0U,	// S2_storerhnew_io
    0U,	// S2_storerhnew_pbr
    0U,	// S2_storerhnew_pci
    0U,	// S2_storerhnew_pcr
    0U,	// S2_storerhnew_pi
    0U,	// S2_storerhnew_pr
    0U,	// S2_storerhnewabs
    0U,	// S2_storerhnewgp
    0U,	// S2_storeri_io
    0U,	// S2_storeri_pbr
    0U,	// S2_storeri_pbr_pseudo
    0U,	// S2_storeri_pci
    0U,	// S2_storeri_pci_pseudo
    0U,	// S2_storeri_pcr
    0U,	// S2_storeri_pi
    0U,	// S2_storeri_pr
    0U,	// S2_storeriabs
    0U,	// S2_storerigp
    0U,	// S2_storerinew_io
    0U,	// S2_storerinew_pbr
    0U,	// S2_storerinew_pci
    0U,	// S2_storerinew_pcr
    0U,	// S2_storerinew_pi
    0U,	// S2_storerinew_pr
    0U,	// S2_storerinewabs
    0U,	// S2_storerinewgp
    0U,	// S2_storew_locked
    0U,	// S2_svsathb
    0U,	// S2_svsathub
    0U,	// S2_tableidxb
    0U,	// S2_tableidxb_goodsyntax
    0U,	// S2_tableidxd
    0U,	// S2_tableidxd_goodsyntax
    0U,	// S2_tableidxh
    0U,	// S2_tableidxh_goodsyntax
    0U,	// S2_tableidxw
    0U,	// S2_tableidxw_goodsyntax
    0U,	// S2_togglebit_i
    0U,	// S2_togglebit_r
    0U,	// S2_tstbit_i
    0U,	// S2_tstbit_r
    0U,	// S2_valignib
    0U,	// S2_valignrb
    0U,	// S2_vcnegh
    0U,	// S2_vcrotate
    0U,	// S2_vrcnegh
    0U,	// S2_vrndpackwh
    0U,	// S2_vrndpackwhs
    0U,	// S2_vsathb
    0U,	// S2_vsathb_nopack
    0U,	// S2_vsathub
    0U,	// S2_vsathub_nopack
    0U,	// S2_vsatwh
    0U,	// S2_vsatwh_nopack
    0U,	// S2_vsatwuh
    0U,	// S2_vsatwuh_nopack
    0U,	// S2_vsplatrb
    0U,	// S2_vsplatrh
    0U,	// S2_vspliceib
    0U,	// S2_vsplicerb
    0U,	// S2_vsxtbh
    0U,	// S2_vsxthw
    0U,	// S2_vtrunehb
    0U,	// S2_vtrunewh
    0U,	// S2_vtrunohb
    0U,	// S2_vtrunowh
    0U,	// S2_vzxtbh
    0U,	// S2_vzxthw
    0U,	// S4_addaddi
    0U,	// S4_addi_asl_ri
    0U,	// S4_addi_lsr_ri
    0U,	// S4_andi_asl_ri
    0U,	// S4_andi_lsr_ri
    0U,	// S4_clbaddi
    0U,	// S4_clbpaddi
    0U,	// S4_clbpnorm
    0U,	// S4_extract
    0U,	// S4_extract_rp
    0U,	// S4_extractp
    0U,	// S4_extractp_rp
    0U,	// S4_lsli
    0U,	// S4_ntstbit_i
    0U,	// S4_ntstbit_r
    0U,	// S4_or_andi
    0U,	// S4_or_andix
    0U,	// S4_or_ori
    0U,	// S4_ori_asl_ri
    0U,	// S4_ori_lsr_ri
    0U,	// S4_parity
    0U,	// S4_pstorerbf_abs
    0U,	// S4_pstorerbf_rr
    0U,	// S4_pstorerbfnew_abs
    4U,	// S4_pstorerbfnew_io
    0U,	// S4_pstorerbfnew_rr
    0U,	// S4_pstorerbnewf_abs
    0U,	// S4_pstorerbnewf_rr
    0U,	// S4_pstorerbnewfnew_abs
    12U,	// S4_pstorerbnewfnew_io
    0U,	// S4_pstorerbnewfnew_rr
    0U,	// S4_pstorerbnewt_abs
    0U,	// S4_pstorerbnewt_rr
    0U,	// S4_pstorerbnewtnew_abs
    12U,	// S4_pstorerbnewtnew_io
    0U,	// S4_pstorerbnewtnew_rr
    0U,	// S4_pstorerbt_abs
    0U,	// S4_pstorerbt_rr
    0U,	// S4_pstorerbtnew_abs
    4U,	// S4_pstorerbtnew_io
    0U,	// S4_pstorerbtnew_rr
    0U,	// S4_pstorerdf_abs
    0U,	// S4_pstorerdf_rr
    0U,	// S4_pstorerdfnew_abs
    4U,	// S4_pstorerdfnew_io
    0U,	// S4_pstorerdfnew_rr
    0U,	// S4_pstorerdt_abs
    0U,	// S4_pstorerdt_rr
    0U,	// S4_pstorerdtnew_abs
    4U,	// S4_pstorerdtnew_io
    0U,	// S4_pstorerdtnew_rr
    0U,	// S4_pstorerff_abs
    0U,	// S4_pstorerff_rr
    0U,	// S4_pstorerffnew_abs
    20U,	// S4_pstorerffnew_io
    0U,	// S4_pstorerffnew_rr
    0U,	// S4_pstorerft_abs
    0U,	// S4_pstorerft_rr
    0U,	// S4_pstorerftnew_abs
    20U,	// S4_pstorerftnew_io
    0U,	// S4_pstorerftnew_rr
    0U,	// S4_pstorerhf_abs
    0U,	// S4_pstorerhf_rr
    0U,	// S4_pstorerhfnew_abs
    4U,	// S4_pstorerhfnew_io
    0U,	// S4_pstorerhfnew_rr
    0U,	// S4_pstorerhnewf_abs
    0U,	// S4_pstorerhnewf_rr
    0U,	// S4_pstorerhnewfnew_abs
    12U,	// S4_pstorerhnewfnew_io
    0U,	// S4_pstorerhnewfnew_rr
    0U,	// S4_pstorerhnewt_abs
    0U,	// S4_pstorerhnewt_rr
    0U,	// S4_pstorerhnewtnew_abs
    12U,	// S4_pstorerhnewtnew_io
    0U,	// S4_pstorerhnewtnew_rr
    0U,	// S4_pstorerht_abs
    0U,	// S4_pstorerht_rr
    0U,	// S4_pstorerhtnew_abs
    4U,	// S4_pstorerhtnew_io
    0U,	// S4_pstorerhtnew_rr
    0U,	// S4_pstorerif_abs
    0U,	// S4_pstorerif_rr
    0U,	// S4_pstorerifnew_abs
    4U,	// S4_pstorerifnew_io
    0U,	// S4_pstorerifnew_rr
    0U,	// S4_pstorerinewf_abs
    0U,	// S4_pstorerinewf_rr
    0U,	// S4_pstorerinewfnew_abs
    12U,	// S4_pstorerinewfnew_io
    0U,	// S4_pstorerinewfnew_rr
    0U,	// S4_pstorerinewt_abs
    0U,	// S4_pstorerinewt_rr
    0U,	// S4_pstorerinewtnew_abs
    12U,	// S4_pstorerinewtnew_io
    0U,	// S4_pstorerinewtnew_rr
    0U,	// S4_pstorerit_abs
    0U,	// S4_pstorerit_rr
    0U,	// S4_pstoreritnew_abs
    4U,	// S4_pstoreritnew_io
    0U,	// S4_pstoreritnew_rr
    0U,	// S4_stored_locked
    0U,	// S4_storeirb_io
    0U,	// S4_storeirbf_io
    0U,	// S4_storeirbfnew_io
    0U,	// S4_storeirbt_io
    0U,	// S4_storeirbtnew_io
    0U,	// S4_storeirh_io
    0U,	// S4_storeirhf_io
    0U,	// S4_storeirhfnew_io
    0U,	// S4_storeirht_io
    0U,	// S4_storeirhtnew_io
    0U,	// S4_storeiri_io
    0U,	// S4_storeirif_io
    0U,	// S4_storeirifnew_io
    0U,	// S4_storeirit_io
    0U,	// S4_storeiritnew_io
    0U,	// S4_storerb_ap
    0U,	// S4_storerb_rr
    0U,	// S4_storerb_ur
    0U,	// S4_storerbnew_ap
    0U,	// S4_storerbnew_rr
    0U,	// S4_storerbnew_ur
    0U,	// S4_storerd_ap
    0U,	// S4_storerd_rr
    0U,	// S4_storerd_ur
    0U,	// S4_storerf_ap
    0U,	// S4_storerf_rr
    0U,	// S4_storerf_ur
    0U,	// S4_storerh_ap
    0U,	// S4_storerh_rr
    0U,	// S4_storerh_ur
    0U,	// S4_storerhnew_ap
    0U,	// S4_storerhnew_rr
    0U,	// S4_storerhnew_ur
    0U,	// S4_storeri_ap
    0U,	// S4_storeri_rr
    0U,	// S4_storeri_ur
    0U,	// S4_storerinew_ap
    0U,	// S4_storerinew_rr
    0U,	// S4_storerinew_ur
    0U,	// S4_subaddi
    0U,	// S4_subi_asl_ri
    0U,	// S4_subi_lsr_ri
    0U,	// S4_vrcrotate
    0U,	// S4_vrcrotate_acc
    0U,	// S4_vxaddsubh
    0U,	// S4_vxaddsubhr
    0U,	// S4_vxaddsubw
    0U,	// S4_vxsubaddh
    0U,	// S4_vxsubaddhr
    0U,	// S4_vxsubaddw
    0U,	// S5_asrhub_rnd_sat
    0U,	// S5_asrhub_rnd_sat_goodsyntax
    0U,	// S5_asrhub_sat
    0U,	// S5_popcountp
    0U,	// S5_vasrhrnd
    0U,	// S5_vasrhrnd_goodsyntax
    0U,	// S6_rol_i_p
    0U,	// S6_rol_i_p_acc
    0U,	// S6_rol_i_p_and
    0U,	// S6_rol_i_p_nac
    0U,	// S6_rol_i_p_or
    0U,	// S6_rol_i_p_xacc
    0U,	// S6_rol_i_r
    0U,	// S6_rol_i_r_acc
    0U,	// S6_rol_i_r_and
    0U,	// S6_rol_i_r_nac
    0U,	// S6_rol_i_r_or
    0U,	// S6_rol_i_r_xacc
    0U,	// SAVE_REGISTERS_CALL_V4
    0U,	// SAVE_REGISTERS_CALL_V4_EXT
    0U,	// STriq_pred_V6
    0U,	// STriq_pred_V6_128B
    0U,	// STriq_pred_vec_V6
    0U,	// STriq_pred_vec_V6_128B
    0U,	// STriv_pseudo_V6
    0U,	// STriv_pseudo_V6_128B
    0U,	// STrivv_indexed
    0U,	// STrivv_indexed_128B
    0U,	// STrivv_pseudo_V6
    0U,	// STrivv_pseudo_V6_128B
    0U,	// STriw_pred
    0U,	// TCRETURNi
    0U,	// TCRETURNr
    0U,	// TFRI64_V2_ext
    0U,	// TFRI64_V4
    0U,	// TFRI_cNotPt_f
    0U,	// TFRI_cPt_f
    0U,	// TFRI_f
    0U,	// TFR_FI
    0U,	// TFR_FIA
    0U,	// TFR_PdFalse
    0U,	// TFR_PdTrue
    0U,	// V4_SA1_addi
    0U,	// V4_SA1_addrx
    0U,	// V4_SA1_addsp
    0U,	// V4_SA1_and1
    0U,	// V4_SA1_clrf
    0U,	// V4_SA1_clrfnew
    0U,	// V4_SA1_clrt
    0U,	// V4_SA1_clrtnew
    0U,	// V4_SA1_cmpeqi
    0U,	// V4_SA1_combine0i
    0U,	// V4_SA1_combine1i
    0U,	// V4_SA1_combine2i
    0U,	// V4_SA1_combine3i
    0U,	// V4_SA1_combinerz
    0U,	// V4_SA1_combinezr
    0U,	// V4_SA1_dec
    0U,	// V4_SA1_inc
    0U,	// V4_SA1_seti
    0U,	// V4_SA1_setin1
    0U,	// V4_SA1_sxtb
    0U,	// V4_SA1_sxth
    0U,	// V4_SA1_tfr
    0U,	// V4_SA1_zxtb
    0U,	// V4_SA1_zxth
    0U,	// V4_SL1_loadri_io
    0U,	// V4_SL1_loadrub_io
    0U,	// V4_SL2_deallocframe
    0U,	// V4_SL2_jumpr31
    0U,	// V4_SL2_jumpr31_f
    0U,	// V4_SL2_jumpr31_fnew
    0U,	// V4_SL2_jumpr31_t
    0U,	// V4_SL2_jumpr31_tnew
    0U,	// V4_SL2_loadrb_io
    0U,	// V4_SL2_loadrd_sp
    0U,	// V4_SL2_loadrh_io
    0U,	// V4_SL2_loadri_sp
    0U,	// V4_SL2_loadruh_io
    0U,	// V4_SL2_return
    0U,	// V4_SL2_return_f
    0U,	// V4_SL2_return_fnew
    0U,	// V4_SL2_return_t
    0U,	// V4_SL2_return_tnew
    0U,	// V4_SS1_storeb_io
    0U,	// V4_SS1_storew_io
    0U,	// V4_SS2_allocframe
    0U,	// V4_SS2_storebi0
    0U,	// V4_SS2_storebi1
    0U,	// V4_SS2_stored_sp
    0U,	// V4_SS2_storeh_io
    0U,	// V4_SS2_storew_sp
    0U,	// V4_SS2_storewi0
    0U,	// V4_SS2_storewi1
    0U,	// V6_extractw
    0U,	// V6_extractw_128B
    0U,	// V6_lvsplatw
    0U,	// V6_lvsplatw_128B
    0U,	// V6_pred_and
    0U,	// V6_pred_and_128B
    0U,	// V6_pred_and_n
    0U,	// V6_pred_and_n_128B
    0U,	// V6_pred_not
    0U,	// V6_pred_not_128B
    0U,	// V6_pred_or
    0U,	// V6_pred_or_128B
    0U,	// V6_pred_or_n
    0U,	// V6_pred_or_n_128B
    0U,	// V6_pred_scalar2
    0U,	// V6_pred_scalar2_128B
    0U,	// V6_pred_xor
    0U,	// V6_pred_xor_128B
    0U,	// V6_vL32Ub_ai
    0U,	// V6_vL32Ub_ai_128B
    0U,	// V6_vL32Ub_pi
    0U,	// V6_vL32Ub_pi_128B
    0U,	// V6_vL32Ub_ppu
    0U,	// V6_vL32b_ai
    0U,	// V6_vL32b_ai_128B
    0U,	// V6_vL32b_cur_ai
    0U,	// V6_vL32b_cur_ai_128B
    0U,	// V6_vL32b_cur_pi
    0U,	// V6_vL32b_cur_pi_128B
    0U,	// V6_vL32b_cur_ppu
    0U,	// V6_vL32b_nt_ai
    0U,	// V6_vL32b_nt_ai_128B
    0U,	// V6_vL32b_nt_cur_ai
    0U,	// V6_vL32b_nt_cur_ai_128B
    0U,	// V6_vL32b_nt_cur_pi
    0U,	// V6_vL32b_nt_cur_pi_128B
    0U,	// V6_vL32b_nt_cur_ppu
    0U,	// V6_vL32b_nt_pi
    0U,	// V6_vL32b_nt_pi_128B
    0U,	// V6_vL32b_nt_ppu
    0U,	// V6_vL32b_nt_tmp_ai
    0U,	// V6_vL32b_nt_tmp_ai_128B
    0U,	// V6_vL32b_nt_tmp_pi
    0U,	// V6_vL32b_nt_tmp_pi_128B
    0U,	// V6_vL32b_nt_tmp_ppu
    0U,	// V6_vL32b_pi
    0U,	// V6_vL32b_pi_128B
    0U,	// V6_vL32b_ppu
    0U,	// V6_vL32b_tmp_ai
    0U,	// V6_vL32b_tmp_ai_128B
    0U,	// V6_vL32b_tmp_pi
    0U,	// V6_vL32b_tmp_pi_128B
    0U,	// V6_vL32b_tmp_ppu
    0U,	// V6_vS32Ub_ai
    0U,	// V6_vS32Ub_ai_128B
    4U,	// V6_vS32Ub_npred_ai
    4U,	// V6_vS32Ub_npred_ai_128B
    6U,	// V6_vS32Ub_npred_pi
    6U,	// V6_vS32Ub_npred_pi_128B
    6U,	// V6_vS32Ub_npred_ppu
    0U,	// V6_vS32Ub_pi
    0U,	// V6_vS32Ub_pi_128B
    0U,	// V6_vS32Ub_ppu
    4U,	// V6_vS32Ub_pred_ai
    4U,	// V6_vS32Ub_pred_ai_128B
    6U,	// V6_vS32Ub_pred_pi
    6U,	// V6_vS32Ub_pred_pi_128B
    6U,	// V6_vS32Ub_pred_ppu
    0U,	// V6_vS32b_ai
    0U,	// V6_vS32b_ai_128B
    0U,	// V6_vS32b_new_ai
    0U,	// V6_vS32b_new_ai_128B
    12U,	// V6_vS32b_new_npred_ai
    12U,	// V6_vS32b_new_npred_ai_128B
    14U,	// V6_vS32b_new_npred_pi
    14U,	// V6_vS32b_new_npred_pi_128B
    14U,	// V6_vS32b_new_npred_ppu
    0U,	// V6_vS32b_new_pi
    0U,	// V6_vS32b_new_pi_128B
    0U,	// V6_vS32b_new_ppu
    12U,	// V6_vS32b_new_pred_ai
    12U,	// V6_vS32b_new_pred_ai_128B
    14U,	// V6_vS32b_new_pred_pi
    14U,	// V6_vS32b_new_pred_pi_128B
    14U,	// V6_vS32b_new_pred_ppu
    4U,	// V6_vS32b_npred_ai
    4U,	// V6_vS32b_npred_ai_128B
    6U,	// V6_vS32b_npred_pi
    6U,	// V6_vS32b_npred_pi_128B
    6U,	// V6_vS32b_npred_ppu
    4U,	// V6_vS32b_nqpred_ai
    4U,	// V6_vS32b_nqpred_ai_128B
    6U,	// V6_vS32b_nqpred_pi
    6U,	// V6_vS32b_nqpred_pi_128B
    6U,	// V6_vS32b_nqpred_ppu
    0U,	// V6_vS32b_nt_ai
    0U,	// V6_vS32b_nt_ai_128B
    0U,	// V6_vS32b_nt_new_ai
    0U,	// V6_vS32b_nt_new_ai_128B
    13U,	// V6_vS32b_nt_new_npred_ai
    13U,	// V6_vS32b_nt_new_npred_ai_128B
    15U,	// V6_vS32b_nt_new_npred_pi
    15U,	// V6_vS32b_nt_new_npred_pi_128B
    15U,	// V6_vS32b_nt_new_npred_ppu
    0U,	// V6_vS32b_nt_new_pi
    0U,	// V6_vS32b_nt_new_pi_128B
    0U,	// V6_vS32b_nt_new_ppu
    13U,	// V6_vS32b_nt_new_pred_ai
    13U,	// V6_vS32b_nt_new_pred_ai_128B
    15U,	// V6_vS32b_nt_new_pred_pi
    15U,	// V6_vS32b_nt_new_pred_pi_128B
    15U,	// V6_vS32b_nt_new_pred_ppu
    5U,	// V6_vS32b_nt_npred_ai
    5U,	// V6_vS32b_nt_npred_ai_128B
    7U,	// V6_vS32b_nt_npred_pi
    7U,	// V6_vS32b_nt_npred_pi_128B
    7U,	// V6_vS32b_nt_npred_ppu
    5U,	// V6_vS32b_nt_nqpred_ai
    5U,	// V6_vS32b_nt_nqpred_ai_128B
    7U,	// V6_vS32b_nt_nqpred_pi
    7U,	// V6_vS32b_nt_nqpred_pi_128B
    7U,	// V6_vS32b_nt_nqpred_ppu
    0U,	// V6_vS32b_nt_pi
    0U,	// V6_vS32b_nt_pi_128B
    0U,	// V6_vS32b_nt_ppu
    5U,	// V6_vS32b_nt_pred_ai
    5U,	// V6_vS32b_nt_pred_ai_128B
    7U,	// V6_vS32b_nt_pred_pi
    7U,	// V6_vS32b_nt_pred_pi_128B
    7U,	// V6_vS32b_nt_pred_ppu
    5U,	// V6_vS32b_nt_qpred_ai
    5U,	// V6_vS32b_nt_qpred_ai_128B
    7U,	// V6_vS32b_nt_qpred_pi
    7U,	// V6_vS32b_nt_qpred_pi_128B
    7U,	// V6_vS32b_nt_qpred_ppu
    0U,	// V6_vS32b_pi
    0U,	// V6_vS32b_pi_128B
    0U,	// V6_vS32b_ppu
    4U,	// V6_vS32b_pred_ai
    4U,	// V6_vS32b_pred_ai_128B
    6U,	// V6_vS32b_pred_pi
    6U,	// V6_vS32b_pred_pi_128B
    6U,	// V6_vS32b_pred_ppu
    4U,	// V6_vS32b_qpred_ai
    4U,	// V6_vS32b_qpred_ai_128B
    6U,	// V6_vS32b_qpred_pi
    6U,	// V6_vS32b_qpred_pi_128B
    6U,	// V6_vS32b_qpred_ppu
    0U,	// V6_vabsdiffh
    0U,	// V6_vabsdiffh_128B
    0U,	// V6_vabsdiffub
    0U,	// V6_vabsdiffub_128B
    0U,	// V6_vabsdiffuh
    0U,	// V6_vabsdiffuh_128B
    0U,	// V6_vabsdiffw
    0U,	// V6_vabsdiffw_128B
    0U,	// V6_vabsh
    0U,	// V6_vabsh_128B
    0U,	// V6_vabsh_sat
    0U,	// V6_vabsh_sat_128B
    0U,	// V6_vabsw
    0U,	// V6_vabsw_128B
    0U,	// V6_vabsw_sat
    0U,	// V6_vabsw_sat_128B
    0U,	// V6_vaddb
    0U,	// V6_vaddb_128B
    0U,	// V6_vaddb_dv
    0U,	// V6_vaddb_dv_128B
    0U,	// V6_vaddbnq
    0U,	// V6_vaddbnq_128B
    0U,	// V6_vaddbq
    0U,	// V6_vaddbq_128B
    0U,	// V6_vaddh
    0U,	// V6_vaddh_128B
    0U,	// V6_vaddh_dv
    0U,	// V6_vaddh_dv_128B
    0U,	// V6_vaddhnq
    0U,	// V6_vaddhnq_128B
    0U,	// V6_vaddhq
    0U,	// V6_vaddhq_128B
    0U,	// V6_vaddhsat
    0U,	// V6_vaddhsat_128B
    0U,	// V6_vaddhsat_dv
    0U,	// V6_vaddhsat_dv_128B
    0U,	// V6_vaddhw
    0U,	// V6_vaddhw_128B
    0U,	// V6_vaddubh
    0U,	// V6_vaddubh_128B
    0U,	// V6_vaddubsat
    0U,	// V6_vaddubsat_128B
    0U,	// V6_vaddubsat_dv
    0U,	// V6_vaddubsat_dv_128B
    0U,	// V6_vadduhsat
    0U,	// V6_vadduhsat_128B
    0U,	// V6_vadduhsat_dv
    0U,	// V6_vadduhsat_dv_128B
    0U,	// V6_vadduhw
    0U,	// V6_vadduhw_128B
    0U,	// V6_vaddw
    0U,	// V6_vaddw_128B
    0U,	// V6_vaddw_dv
    0U,	// V6_vaddw_dv_128B
    0U,	// V6_vaddwnq
    0U,	// V6_vaddwnq_128B
    0U,	// V6_vaddwq
    0U,	// V6_vaddwq_128B
    0U,	// V6_vaddwsat
    0U,	// V6_vaddwsat_128B
    0U,	// V6_vaddwsat_dv
    0U,	// V6_vaddwsat_dv_128B
    0U,	// V6_valignb
    0U,	// V6_valignb_128B
    0U,	// V6_valignbi
    0U,	// V6_valignbi_128B
    0U,	// V6_vand
    0U,	// V6_vand_128B
    0U,	// V6_vandqrt
    0U,	// V6_vandqrt_128B
    0U,	// V6_vandqrt_acc
    0U,	// V6_vandqrt_acc_128B
    0U,	// V6_vandvrt
    0U,	// V6_vandvrt_128B
    0U,	// V6_vandvrt_acc
    0U,	// V6_vandvrt_acc_128B
    0U,	// V6_vaslh
    0U,	// V6_vaslh_128B
    0U,	// V6_vaslhv
    0U,	// V6_vaslhv_128B
    0U,	// V6_vaslw
    0U,	// V6_vaslw_128B
    0U,	// V6_vaslw_acc
    0U,	// V6_vaslw_acc_128B
    0U,	// V6_vaslwv
    0U,	// V6_vaslwv_128B
    0U,	// V6_vasrh
    0U,	// V6_vasrh_128B
    0U,	// V6_vasrhbrndsat
    0U,	// V6_vasrhbrndsat_128B
    0U,	// V6_vasrhubrndsat
    0U,	// V6_vasrhubrndsat_128B
    0U,	// V6_vasrhubsat
    0U,	// V6_vasrhubsat_128B
    0U,	// V6_vasrhv
    0U,	// V6_vasrhv_128B
    0U,	// V6_vasrw
    0U,	// V6_vasrw_128B
    0U,	// V6_vasrw_acc
    0U,	// V6_vasrw_acc_128B
    0U,	// V6_vasrwh
    0U,	// V6_vasrwh_128B
    1U,	// V6_vasrwhrndsat
    1U,	// V6_vasrwhrndsat_128B
    0U,	// V6_vasrwhsat
    0U,	// V6_vasrwhsat_128B
    0U,	// V6_vasrwuhsat
    0U,	// V6_vasrwuhsat_128B
    0U,	// V6_vasrwv
    0U,	// V6_vasrwv_128B
    0U,	// V6_vassign
    0U,	// V6_vassign_128B
    0U,	// V6_vavgh
    0U,	// V6_vavgh_128B
    0U,	// V6_vavghrnd
    0U,	// V6_vavghrnd_128B
    0U,	// V6_vavgub
    0U,	// V6_vavgub_128B
    0U,	// V6_vavgubrnd
    0U,	// V6_vavgubrnd_128B
    0U,	// V6_vavguh
    0U,	// V6_vavguh_128B
    0U,	// V6_vavguhrnd
    0U,	// V6_vavguhrnd_128B
    0U,	// V6_vavgw
    0U,	// V6_vavgw_128B
    0U,	// V6_vavgwrnd
    0U,	// V6_vavgwrnd_128B
    0U,	// V6_vccombine
    0U,	// V6_vccombine_128B
    0U,	// V6_vcl0h
    0U,	// V6_vcl0h_128B
    0U,	// V6_vcl0w
    0U,	// V6_vcl0w_128B
    0U,	// V6_vcmov
    0U,	// V6_vcmov_128B
    0U,	// V6_vcombine
    0U,	// V6_vcombine_128B
    0U,	// V6_vdeal
    0U,	// V6_vdeal_128B
    0U,	// V6_vdealb
    0U,	// V6_vdealb4w
    0U,	// V6_vdealb4w_128B
    0U,	// V6_vdealb_128B
    0U,	// V6_vdealh
    0U,	// V6_vdealh_128B
    0U,	// V6_vdealvdd
    0U,	// V6_vdealvdd_128B
    0U,	// V6_vdelta
    0U,	// V6_vdelta_128B
    0U,	// V6_vdmpybus
    0U,	// V6_vdmpybus_128B
    0U,	// V6_vdmpybus_acc
    0U,	// V6_vdmpybus_acc_128B
    0U,	// V6_vdmpybus_dv
    0U,	// V6_vdmpybus_dv_128B
    0U,	// V6_vdmpybus_dv_acc
    0U,	// V6_vdmpybus_dv_acc_128B
    0U,	// V6_vdmpyhb
    0U,	// V6_vdmpyhb_128B
    0U,	// V6_vdmpyhb_acc
    0U,	// V6_vdmpyhb_acc_128B
    0U,	// V6_vdmpyhb_dv
    0U,	// V6_vdmpyhb_dv_128B
    0U,	// V6_vdmpyhb_dv_acc
    0U,	// V6_vdmpyhb_dv_acc_128B
    0U,	// V6_vdmpyhisat
    0U,	// V6_vdmpyhisat_128B
    0U,	// V6_vdmpyhisat_acc
    0U,	// V6_vdmpyhisat_acc_128B
    0U,	// V6_vdmpyhsat
    0U,	// V6_vdmpyhsat_128B
    0U,	// V6_vdmpyhsat_acc
    0U,	// V6_vdmpyhsat_acc_128B
    0U,	// V6_vdmpyhsuisat
    0U,	// V6_vdmpyhsuisat_128B
    0U,	// V6_vdmpyhsuisat_acc
    0U,	// V6_vdmpyhsuisat_acc_128B
    0U,	// V6_vdmpyhsusat
    0U,	// V6_vdmpyhsusat_128B
    0U,	// V6_vdmpyhsusat_acc
    0U,	// V6_vdmpyhsusat_acc_128B
    0U,	// V6_vdmpyhvsat
    0U,	// V6_vdmpyhvsat_128B
    0U,	// V6_vdmpyhvsat_acc
    0U,	// V6_vdmpyhvsat_acc_128B
    0U,	// V6_vdsaduh
    0U,	// V6_vdsaduh_128B
    0U,	// V6_vdsaduh_acc
    0U,	// V6_vdsaduh_acc_128B
    0U,	// V6_veqb
    0U,	// V6_veqb_128B
    0U,	// V6_veqb_and
    0U,	// V6_veqb_and_128B
    0U,	// V6_veqb_or
    0U,	// V6_veqb_or_128B
    0U,	// V6_veqb_xor
    0U,	// V6_veqb_xor_128B
    0U,	// V6_veqh
    0U,	// V6_veqh_128B
    0U,	// V6_veqh_and
    0U,	// V6_veqh_and_128B
    0U,	// V6_veqh_or
    0U,	// V6_veqh_or_128B
    0U,	// V6_veqh_xor
    0U,	// V6_veqh_xor_128B
    0U,	// V6_veqw
    0U,	// V6_veqw_128B
    0U,	// V6_veqw_and
    0U,	// V6_veqw_and_128B
    0U,	// V6_veqw_or
    0U,	// V6_veqw_or_128B
    0U,	// V6_veqw_xor
    0U,	// V6_veqw_xor_128B
    0U,	// V6_vgtb
    0U,	// V6_vgtb_128B
    0U,	// V6_vgtb_and
    0U,	// V6_vgtb_and_128B
    0U,	// V6_vgtb_or
    0U,	// V6_vgtb_or_128B
    0U,	// V6_vgtb_xor
    0U,	// V6_vgtb_xor_128B
    0U,	// V6_vgth
    0U,	// V6_vgth_128B
    0U,	// V6_vgth_and
    0U,	// V6_vgth_and_128B
    0U,	// V6_vgth_or
    0U,	// V6_vgth_or_128B
    0U,	// V6_vgth_xor
    0U,	// V6_vgth_xor_128B
    0U,	// V6_vgtub
    0U,	// V6_vgtub_128B
    0U,	// V6_vgtub_and
    0U,	// V6_vgtub_and_128B
    0U,	// V6_vgtub_or
    0U,	// V6_vgtub_or_128B
    0U,	// V6_vgtub_xor
    0U,	// V6_vgtub_xor_128B
    0U,	// V6_vgtuh
    0U,	// V6_vgtuh_128B
    0U,	// V6_vgtuh_and
    0U,	// V6_vgtuh_and_128B
    0U,	// V6_vgtuh_or
    0U,	// V6_vgtuh_or_128B
    0U,	// V6_vgtuh_xor
    0U,	// V6_vgtuh_xor_128B
    0U,	// V6_vgtuw
    0U,	// V6_vgtuw_128B
    0U,	// V6_vgtuw_and
    0U,	// V6_vgtuw_and_128B
    0U,	// V6_vgtuw_or
    0U,	// V6_vgtuw_or_128B
    0U,	// V6_vgtuw_xor
    0U,	// V6_vgtuw_xor_128B
    0U,	// V6_vgtw
    0U,	// V6_vgtw_128B
    0U,	// V6_vgtw_and
    0U,	// V6_vgtw_and_128B
    0U,	// V6_vgtw_or
    0U,	// V6_vgtw_or_128B
    0U,	// V6_vgtw_xor
    0U,	// V6_vgtw_xor_128B
    0U,	// V6_vhist
    0U,	// V6_vhistq
    0U,	// V6_vinsertwr
    0U,	// V6_vinsertwr_128B
    0U,	// V6_vlalignb
    0U,	// V6_vlalignb_128B
    0U,	// V6_vlalignbi
    0U,	// V6_vlalignbi_128B
    0U,	// V6_vlsrh
    0U,	// V6_vlsrh_128B
    0U,	// V6_vlsrhv
    0U,	// V6_vlsrhv_128B
    0U,	// V6_vlsrw
    0U,	// V6_vlsrw_128B
    0U,	// V6_vlsrwv
    0U,	// V6_vlsrwv_128B
    0U,	// V6_vlutvvb
    0U,	// V6_vlutvvb_128B
    0U,	// V6_vlutvvb_oracc
    0U,	// V6_vlutvvb_oracc_128B
    0U,	// V6_vlutvwh
    0U,	// V6_vlutvwh_128B
    0U,	// V6_vlutvwh_oracc
    0U,	// V6_vlutvwh_oracc_128B
    0U,	// V6_vmaxh
    0U,	// V6_vmaxh_128B
    0U,	// V6_vmaxub
    0U,	// V6_vmaxub_128B
    0U,	// V6_vmaxuh
    0U,	// V6_vmaxuh_128B
    0U,	// V6_vmaxw
    0U,	// V6_vmaxw_128B
    0U,	// V6_vminh
    0U,	// V6_vminh_128B
    0U,	// V6_vminub
    0U,	// V6_vminub_128B
    0U,	// V6_vminuh
    0U,	// V6_vminuh_128B
    0U,	// V6_vminw
    0U,	// V6_vminw_128B
    0U,	// V6_vmpabus
    0U,	// V6_vmpabus_128B
    0U,	// V6_vmpabus_acc
    0U,	// V6_vmpabus_acc_128B
    0U,	// V6_vmpabusv
    0U,	// V6_vmpabusv_128B
    0U,	// V6_vmpabuuv
    0U,	// V6_vmpabuuv_128B
    0U,	// V6_vmpahb
    0U,	// V6_vmpahb_128B
    0U,	// V6_vmpahb_acc
    0U,	// V6_vmpahb_acc_128B
    0U,	// V6_vmpybus
    0U,	// V6_vmpybus_128B
    0U,	// V6_vmpybus_acc
    0U,	// V6_vmpybus_acc_128B
    0U,	// V6_vmpybusv
    0U,	// V6_vmpybusv_128B
    0U,	// V6_vmpybusv_acc
    0U,	// V6_vmpybusv_acc_128B
    0U,	// V6_vmpybv
    0U,	// V6_vmpybv_128B
    0U,	// V6_vmpybv_acc
    0U,	// V6_vmpybv_acc_128B
    0U,	// V6_vmpyewuh
    0U,	// V6_vmpyewuh_128B
    0U,	// V6_vmpyh
    0U,	// V6_vmpyh_128B
    0U,	// V6_vmpyhsat_acc
    0U,	// V6_vmpyhsat_acc_128B
    0U,	// V6_vmpyhsrs
    0U,	// V6_vmpyhsrs_128B
    0U,	// V6_vmpyhss
    0U,	// V6_vmpyhss_128B
    0U,	// V6_vmpyhus
    0U,	// V6_vmpyhus_128B
    0U,	// V6_vmpyhus_acc
    0U,	// V6_vmpyhus_acc_128B
    0U,	// V6_vmpyhv
    0U,	// V6_vmpyhv_128B
    0U,	// V6_vmpyhv_acc
    0U,	// V6_vmpyhv_acc_128B
    0U,	// V6_vmpyhvsrs
    0U,	// V6_vmpyhvsrs_128B
    0U,	// V6_vmpyieoh
    0U,	// V6_vmpyieoh_128B
    0U,	// V6_vmpyiewh_acc
    0U,	// V6_vmpyiewh_acc_128B
    0U,	// V6_vmpyiewuh
    0U,	// V6_vmpyiewuh_128B
    0U,	// V6_vmpyiewuh_acc
    0U,	// V6_vmpyiewuh_acc_128B
    0U,	// V6_vmpyih
    0U,	// V6_vmpyih_128B
    0U,	// V6_vmpyih_acc
    0U,	// V6_vmpyih_acc_128B
    0U,	// V6_vmpyihb
    0U,	// V6_vmpyihb_128B
    0U,	// V6_vmpyihb_acc
    0U,	// V6_vmpyihb_acc_128B
    0U,	// V6_vmpyiowh
    0U,	// V6_vmpyiowh_128B
    0U,	// V6_vmpyiwb
    0U,	// V6_vmpyiwb_128B
    0U,	// V6_vmpyiwb_acc
    0U,	// V6_vmpyiwb_acc_128B
    0U,	// V6_vmpyiwh
    0U,	// V6_vmpyiwh_128B
    0U,	// V6_vmpyiwh_acc
    0U,	// V6_vmpyiwh_acc_128B
    0U,	// V6_vmpyowh
    0U,	// V6_vmpyowh_128B
    0U,	// V6_vmpyowh_rnd
    0U,	// V6_vmpyowh_rnd_128B
    0U,	// V6_vmpyowh_rnd_sacc
    0U,	// V6_vmpyowh_rnd_sacc_128B
    0U,	// V6_vmpyowh_sacc
    0U,	// V6_vmpyowh_sacc_128B
    0U,	// V6_vmpyub
    0U,	// V6_vmpyub_128B
    0U,	// V6_vmpyub_acc
    0U,	// V6_vmpyub_acc_128B
    0U,	// V6_vmpyubv
    0U,	// V6_vmpyubv_128B
    0U,	// V6_vmpyubv_acc
    0U,	// V6_vmpyubv_acc_128B
    0U,	// V6_vmpyuh
    0U,	// V6_vmpyuh_128B
    0U,	// V6_vmpyuh_acc
    0U,	// V6_vmpyuh_acc_128B
    0U,	// V6_vmpyuhv
    0U,	// V6_vmpyuhv_128B
    0U,	// V6_vmpyuhv_acc
    0U,	// V6_vmpyuhv_acc_128B
    0U,	// V6_vmux
    0U,	// V6_vmux_128B
    0U,	// V6_vnavgh
    0U,	// V6_vnavgh_128B
    0U,	// V6_vnavgub
    0U,	// V6_vnavgub_128B
    0U,	// V6_vnavgw
    0U,	// V6_vnavgw_128B
    0U,	// V6_vnccombine
    0U,	// V6_vnccombine_128B
    0U,	// V6_vncmov
    0U,	// V6_vncmov_128B
    0U,	// V6_vnormamth
    0U,	// V6_vnormamth_128B
    0U,	// V6_vnormamtw
    0U,	// V6_vnormamtw_128B
    0U,	// V6_vnot
    0U,	// V6_vnot_128B
    0U,	// V6_vor
    0U,	// V6_vor_128B
    0U,	// V6_vpackeb
    0U,	// V6_vpackeb_128B
    0U,	// V6_vpackeh
    0U,	// V6_vpackeh_128B
    0U,	// V6_vpackhb_sat
    0U,	// V6_vpackhb_sat_128B
    0U,	// V6_vpackhub_sat
    0U,	// V6_vpackhub_sat_128B
    0U,	// V6_vpackob
    0U,	// V6_vpackob_128B
    0U,	// V6_vpackoh
    0U,	// V6_vpackoh_128B
    0U,	// V6_vpackwh_sat
    0U,	// V6_vpackwh_sat_128B
    0U,	// V6_vpackwuh_sat
    0U,	// V6_vpackwuh_sat_128B
    0U,	// V6_vpopcounth
    0U,	// V6_vpopcounth_128B
    0U,	// V6_vrdelta
    0U,	// V6_vrdelta_128B
    0U,	// V6_vrmpybus
    0U,	// V6_vrmpybus_128B
    0U,	// V6_vrmpybus_acc
    0U,	// V6_vrmpybus_acc_128B
    0U,	// V6_vrmpybusi
    0U,	// V6_vrmpybusi_128B
    0U,	// V6_vrmpybusi_acc
    0U,	// V6_vrmpybusi_acc_128B
    0U,	// V6_vrmpybusv
    0U,	// V6_vrmpybusv_128B
    0U,	// V6_vrmpybusv_acc
    0U,	// V6_vrmpybusv_acc_128B
    0U,	// V6_vrmpybv
    0U,	// V6_vrmpybv_128B
    0U,	// V6_vrmpybv_acc
    0U,	// V6_vrmpybv_acc_128B
    0U,	// V6_vrmpyub
    0U,	// V6_vrmpyub_128B
    0U,	// V6_vrmpyub_acc
    0U,	// V6_vrmpyub_acc_128B
    0U,	// V6_vrmpyubi
    0U,	// V6_vrmpyubi_128B
    0U,	// V6_vrmpyubi_acc
    0U,	// V6_vrmpyubi_acc_128B
    0U,	// V6_vrmpyubv
    0U,	// V6_vrmpyubv_128B
    0U,	// V6_vrmpyubv_acc
    0U,	// V6_vrmpyubv_acc_128B
    0U,	// V6_vror
    0U,	// V6_vror_128B
    0U,	// V6_vroundhb
    0U,	// V6_vroundhb_128B
    0U,	// V6_vroundhub
    0U,	// V6_vroundhub_128B
    0U,	// V6_vroundwh
    0U,	// V6_vroundwh_128B
    0U,	// V6_vroundwuh
    0U,	// V6_vroundwuh_128B
    0U,	// V6_vrsadubi
    0U,	// V6_vrsadubi_128B
    0U,	// V6_vrsadubi_acc
    0U,	// V6_vrsadubi_acc_128B
    0U,	// V6_vsathub
    0U,	// V6_vsathub_128B
    0U,	// V6_vsatwh
    0U,	// V6_vsatwh_128B
    0U,	// V6_vsb
    0U,	// V6_vsb_128B
    0U,	// V6_vsh
    0U,	// V6_vsh_128B
    0U,	// V6_vshufeh
    0U,	// V6_vshufeh_128B
    0U,	// V6_vshuff
    0U,	// V6_vshuff_128B
    0U,	// V6_vshuffb
    0U,	// V6_vshuffb_128B
    0U,	// V6_vshuffeb
    0U,	// V6_vshuffeb_128B
    0U,	// V6_vshuffh
    0U,	// V6_vshuffh_128B
    0U,	// V6_vshuffob
    0U,	// V6_vshuffob_128B
    0U,	// V6_vshuffvdd
    0U,	// V6_vshuffvdd_128B
    0U,	// V6_vshufoeb
    0U,	// V6_vshufoeb_128B
    0U,	// V6_vshufoeh
    0U,	// V6_vshufoeh_128B
    0U,	// V6_vshufoh
    0U,	// V6_vshufoh_128B
    0U,	// V6_vsubb
    0U,	// V6_vsubb_128B
    0U,	// V6_vsubb_dv
    0U,	// V6_vsubb_dv_128B
    0U,	// V6_vsubbnq
    0U,	// V6_vsubbnq_128B
    0U,	// V6_vsubbq
    0U,	// V6_vsubbq_128B
    0U,	// V6_vsubh
    0U,	// V6_vsubh_128B
    0U,	// V6_vsubh_dv
    0U,	// V6_vsubh_dv_128B
    0U,	// V6_vsubhnq
    0U,	// V6_vsubhnq_128B
    0U,	// V6_vsubhq
    0U,	// V6_vsubhq_128B
    0U,	// V6_vsubhsat
    0U,	// V6_vsubhsat_128B
    0U,	// V6_vsubhsat_dv
    0U,	// V6_vsubhsat_dv_128B
    0U,	// V6_vsubhw
    0U,	// V6_vsubhw_128B
    0U,	// V6_vsububh
    0U,	// V6_vsububh_128B
    0U,	// V6_vsububsat
    0U,	// V6_vsububsat_128B
    0U,	// V6_vsububsat_dv
    0U,	// V6_vsububsat_dv_128B
    0U,	// V6_vsubuhsat
    0U,	// V6_vsubuhsat_128B
    0U,	// V6_vsubuhsat_dv
    0U,	// V6_vsubuhsat_dv_128B
    0U,	// V6_vsubuhw
    0U,	// V6_vsubuhw_128B
    0U,	// V6_vsubw
    0U,	// V6_vsubw_128B
    0U,	// V6_vsubw_dv
    0U,	// V6_vsubw_dv_128B
    0U,	// V6_vsubwnq
    0U,	// V6_vsubwnq_128B
    0U,	// V6_vsubwq
    0U,	// V6_vsubwq_128B
    0U,	// V6_vsubwsat
    0U,	// V6_vsubwsat_128B
    0U,	// V6_vsubwsat_dv
    0U,	// V6_vsubwsat_dv_128B
    0U,	// V6_vswap
    0U,	// V6_vswap_128B
    0U,	// V6_vtmpyb
    0U,	// V6_vtmpyb_128B
    0U,	// V6_vtmpyb_acc
    0U,	// V6_vtmpyb_acc_128B
    0U,	// V6_vtmpybus
    0U,	// V6_vtmpybus_128B
    0U,	// V6_vtmpybus_acc
    0U,	// V6_vtmpybus_acc_128B
    0U,	// V6_vtmpyhb
    0U,	// V6_vtmpyhb_128B
    0U,	// V6_vtmpyhb_acc
    0U,	// V6_vtmpyhb_acc_128B
    0U,	// V6_vunpackb
    0U,	// V6_vunpackb_128B
    0U,	// V6_vunpackh
    0U,	// V6_vunpackh_128B
    0U,	// V6_vunpackob
    0U,	// V6_vunpackob_128B
    0U,	// V6_vunpackoh
    0U,	// V6_vunpackoh_128B
    0U,	// V6_vunpackub
    0U,	// V6_vunpackub_128B
    0U,	// V6_vunpackuh
    0U,	// V6_vunpackuh_128B
    0U,	// V6_vxor
    0U,	// V6_vxor_128B
    0U,	// V6_vzb
    0U,	// V6_vzb_128B
    0U,	// V6_vzh
    0U,	// V6_vzh_128B
    0U,	// VMULW
    0U,	// VMULW_ACC
    0U,	// VSelectDblPseudo_V6
    0U,	// VSelectPseudo_V6
    0U,	// Y2_barrier
    0U,	// Y2_dccleana
    0U,	// Y2_dccleaninva
    0U,	// Y2_dcfetchbo
    0U,	// Y2_dcinva
    0U,	// Y2_dczeroa
    0U,	// Y2_icinva
    0U,	// Y2_isync
    0U,	// Y2_syncht
    0U,	// Y4_l2fetch
    0U,	// Y4_trace
    0U,	// Y5_l2fetch
    0U,	// Y5_l2gclean
    0U,	// Y5_l2gcleaninv
    0U,	// Y5_l2gunlock
    0U,	// Y5_l2locka
    0U,	// Y5_l2unlocka
    0U,	// Y6_l2gcleaninvpa
    0U,	// Y6_l2gcleanpa
    1U,	// dep_A2_addsat
    1U,	// dep_A2_subsat
    0U,	// dep_S2_packhl
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 11) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, A2_nop, ADJCALLSTACKD...
    return;
    break;
  case 1:
    // A2_abs, A2_absp, A2_abssat, A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2...
    printOperand(MI, 0, O);
    break;
  case 2:
    // A2_paddf, A2_paddfnew, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    printOperand(MI, 1, O);
    break;
  case 3:
    // A4_ext_b, A4_ext_c, CALLv3nr, J2_call, J2_jump, J2_jump_ext, J2_jump_n...
    printBrtarget(MI, 0, O);
    break;
  case 4:
    // A4_ext_g
    printGlobalOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 5:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    printOperand(MI, 2, O);
    break;
  case 6:
    // S2_storerbabs, S2_storerdabs, S2_storerfabs, S2_storerhabs, S2_storeri...
    printExtOperand(MI, 0, O);
    O << ") = ";
    printOperand(MI, 1, O);
    break;
  }


  // Fragment 1 encoded into 10 bits for 628 unique commands.
  switch ((Bits >> 14) & 1023) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_abssat
    O << " = abs(";
    printOperand(MI, 1, O);
    break;
  case 1:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    O << " = add(";
    break;
  case 2:
    // A2_and, A2_andir, A2_andp, A4_andn, A4_andnp, C2_and, C2_andn, C4_and_...
    O << " = and(";
    printOperand(MI, 1, O);
    break;
  case 3:
    // A2_aslh
    O << " = aslh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 4:
    // A2_asrh
    O << " = asrh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 5:
    // A2_combine_hh, A2_combine_hl, A2_combine_lh, A2_combine_ll, A2_combine...
    O << " = combine(";
    printOperand(MI, 1, O);
    break;
  case 6:
    // A2_combineii, A4_combineii, A4_combineir
    O << " = combine(#";
    break;
  case 7:
    // A2_max, A2_maxp
    O << " = max(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 8:
    // A2_maxu, A2_maxup
    O << " = maxu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 9:
    // A2_min, A2_minp
    O << " = min(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 10:
    // A2_minu, A2_minup
    O << " = minu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 11:
    // A2_negp, A2_negsat
    O << " = neg(";
    printOperand(MI, 1, O);
    break;
  case 12:
    // A2_not, A2_notp, C2_not, V6_pred_not, V6_pred_not_128B
    O << " = not(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 13:
    // A2_or, A2_orir, A2_orp, A4_orn, A4_ornp, C2_or, C2_orn, C4_or_and, C4_...
    O << " = or(";
    printOperand(MI, 1, O);
    break;
  case 14:
    // A2_paddf, A2_paddif, A2_paddit, A2_paddt, A2_pandf, A2_pandt, A2_porf,...
    O << ") ";
    printOperand(MI, 0, O);
    break;
  case 15:
    // A2_paddfnew, A2_paddifnew, A2_padditnew, A2_paddtnew, A2_pandfnew, A2_...
    O << ".new) ";
    printOperand(MI, 0, O);
    break;
  case 16:
    // A2_roundsat, A4_round_ri, A4_round_ri_sat, A4_round_rr, A4_round_rr_sa...
    O << " = round(";
    printOperand(MI, 1, O);
    break;
  case 17:
    // A2_sat
    O << " = sat(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 18:
    // A2_satb
    O << " = satb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 19:
    // A2_sath
    O << " = sath(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 20:
    // A2_satub
    O << " = satub(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 21:
    // A2_satuh
    O << " = satuh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 22:
    // A2_sub, A2_subh_h16_hh, A2_subh_h16_hl, A2_subh_h16_lh, A2_subh_h16_ll...
    O << " = sub(";
    break;
  case 23:
    // A2_subri, S4_subi_asl_ri, S4_subi_lsr_ri
    O << " = sub(#";
    printExtOperand(MI, 1, O);
    break;
  case 24:
    // A2_svaddh, A2_svaddhs, A2_vaddh, A2_vaddhs
    O << " = vaddh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 25:
    // A2_svadduhs, A2_vadduhs
    O << " = vadduh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 26:
    // A2_svavgh, A2_svavghs, A2_vavgh, A2_vavghcr, A2_vavghr
    O << " = vavgh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 27:
    // A2_svnavgh, A2_vnavgh, A2_vnavghcr, A2_vnavghr
    O << " = vnavgh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 28:
    // A2_svsubh, A2_svsubhs, A2_vsubh, A2_vsubhs
    O << " = vsubh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 29:
    // A2_svsubuhs, A2_vsubuhs
    O << " = vsubuh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 30:
    // A2_swiz
    O << " = swiz(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 31:
    // A2_sxtb, V4_SA1_sxtb
    O << " = sxtb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 32:
    // A2_sxth, V4_SA1_sxth
    O << " = sxth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 33:
    // A2_sxtw
    O << " = sxtw(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 34:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrrcr, A4_tfrcpp, A4_tfrpcp, ARGEXTEND...
    O << " = ";
    printOperand(MI, 1, O);
    break;
  case 35:
    // A2_tfrih
    O << ".h = #";
    printOperand(MI, 2, O);
    return;
    break;
  case 36:
    // A2_tfril
    O << ".l = #";
    printOperand(MI, 2, O);
    return;
    break;
  case 37:
    // A2_tfrpi, A2_tfrsi, J4_jumpseti, S4_storerb_ap, S4_storerbnew_ap, S4_s...
    O << " = #";
    break;
  case 38:
    // A2_vabsh, A2_vabshsat
    O << " = vabsh(";
    printOperand(MI, 1, O);
    break;
  case 39:
    // A2_vabsw, A2_vabswsat
    O << " = vabsw(";
    printOperand(MI, 1, O);
    break;
  case 40:
    // A2_vaddub, A2_vaddubs
    O << " = vaddub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 41:
    // A2_vaddw, A2_vaddws
    O << " = vaddw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 42:
    // A2_vavgub, A2_vavgubr
    O << " = vavgub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 43:
    // A2_vavguh, A2_vavguhr
    O << " = vavguh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 44:
    // A2_vavguw, A2_vavguwr
    O << " = vavguw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 45:
    // A2_vavgw, A2_vavgwcr, A2_vavgwr
    O << " = vavgw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 46:
    // A2_vcmpbeq, A4_vcmpbeqi
    O << " = vcmpb.eq(";
    printOperand(MI, 1, O);
    break;
  case 47:
    // A2_vcmpbgtu, A4_vcmpbgtui
    O << " = vcmpb.gtu(";
    printOperand(MI, 1, O);
    break;
  case 48:
    // A2_vcmpheq, A4_vcmpheqi
    O << " = vcmph.eq(";
    printOperand(MI, 1, O);
    break;
  case 49:
    // A2_vcmphgt, A4_vcmphgti
    O << " = vcmph.gt(";
    printOperand(MI, 1, O);
    break;
  case 50:
    // A2_vcmphgtu, A4_vcmphgtui
    O << " = vcmph.gtu(";
    printOperand(MI, 1, O);
    break;
  case 51:
    // A2_vcmpweq, A4_vcmpweqi
    O << " = vcmpw.eq(";
    printOperand(MI, 1, O);
    break;
  case 52:
    // A2_vcmpwgt, A4_vcmpwgti
    O << " = vcmpw.gt(";
    printOperand(MI, 1, O);
    break;
  case 53:
    // A2_vcmpwgtu, A4_vcmpwgtui
    O << " = vcmpw.gtu(";
    printOperand(MI, 1, O);
    break;
  case 54:
    // A2_vconj
    O << " = vconj(";
    printOperand(MI, 1, O);
    O << "):sat";
    return;
    break;
  case 55:
    // A2_vmaxb
    O << " = vmaxb(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 56:
    // A2_vmaxh
    O << " = vmaxh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 57:
    // A2_vmaxub
    O << " = vmaxub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 58:
    // A2_vmaxuh
    O << " = vmaxuh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 59:
    // A2_vmaxuw
    O << " = vmaxuw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 60:
    // A2_vmaxw
    O << " = vmaxw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 61:
    // A2_vminb
    O << " = vminb(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 62:
    // A2_vminh
    O << " = vminh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 63:
    // A2_vminub
    O << " = vminub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 64:
    // A2_vminuh
    O << " = vminuh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 65:
    // A2_vminuw
    O << " = vminuw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 66:
    // A2_vminw
    O << " = vminw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 67:
    // A2_vnavgw, A2_vnavgwcr, A2_vnavgwr
    O << " = vnavgw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 68:
    // A2_vraddub
    O << " = vraddub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 69:
    // A2_vraddub_acc
    O << " += vraddub(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 70:
    // A2_vrsadub
    O << " = vrsadub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 71:
    // A2_vrsadub_acc
    O << " += vrsadub(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 72:
    // A2_vsubub, A2_vsububs
    O << " = vsubub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 73:
    // A2_vsubw, A2_vsubws
    O << " = vsubw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 74:
    // A2_xor, A2_xorp, C2_xor, TFR_PdFalse, V6_pred_xor, V6_pred_xor_128B
    O << " = xor(";
    break;
  case 75:
    // A2_zxtb
    O << " = zxtb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 76:
    // A2_zxth, V4_SA1_zxth
    O << " = zxth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 77:
    // A4_bitsplit, A4_bitspliti
    O << " = bitsplit(";
    printOperand(MI, 1, O);
    break;
  case 78:
    // A4_boundscheck
    O << "=boundscheck(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 79:
    // A4_boundscheck_hi, A4_boundscheck_lo
    O << " = boundscheck(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 80:
    // A4_cmpbeq, A4_cmpbeqi
    O << " = cmpb.eq(";
    printOperand(MI, 1, O);
    break;
  case 81:
    // A4_cmpbgt, A4_cmpbgti
    O << " = cmpb.gt(";
    printOperand(MI, 1, O);
    break;
  case 82:
    // A4_cmpbgtu, A4_cmpbgtui
    O << " = cmpb.gtu(";
    printOperand(MI, 1, O);
    break;
  case 83:
    // A4_cmpheq, A4_cmpheqi
    O << " = cmph.eq(";
    printOperand(MI, 1, O);
    break;
  case 84:
    // A4_cmphgt, A4_cmphgti
    O << " = cmph.gt(";
    printOperand(MI, 1, O);
    break;
  case 85:
    // A4_cmphgtu, A4_cmphgtui
    O << " = cmph.gtu(";
    printOperand(MI, 1, O);
    break;
  case 86:
    // A4_cround_ri, A4_cround_rr
    O << " = cround(";
    printOperand(MI, 1, O);
    break;
  case 87:
    // A4_ext, A4_ext_b, A4_ext_c, J4_hintjumpr, S2_allocframe, V4_SS2_allocf...
    O << ')';
    return;
    break;
  case 88:
    // A4_modwrapu
    O << " = modwrap(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 89:
    // A4_rcmpeq, A4_rcmpeqi, C2_cmpeq, C2_cmpeqi, C2_cmpeqp
    O << " = cmp.eq(";
    printOperand(MI, 1, O);
    break;
  case 90:
    // A4_rcmpneq, A4_rcmpneqi, C4_cmpneq, C4_cmpneqi
    O << " = !cmp.eq(";
    printOperand(MI, 1, O);
    break;
  case 91:
    // A4_tlbmatch
    O << " = tlbmatch(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 92:
    // A4_vcmpbeq_any
    O << " = any8(vcmpb.eq(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << "))";
    return;
    break;
  case 93:
    // A4_vcmpbgt, A4_vcmpbgti
    O << " = vcmpb.gt(";
    printOperand(MI, 1, O);
    break;
  case 94:
    // A4_vrmaxh
    O << " = vrmaxh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 95:
    // A4_vrmaxuh
    O << " = vrmaxuh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 96:
    // A4_vrmaxuw
    O << " = vrmaxuw(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 97:
    // A4_vrmaxw
    O << " = vrmaxw(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 98:
    // A4_vrminh
    O << " = vrminh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 99:
    // A4_vrminuh
    O << " = vrminuh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 100:
    // A4_vrminuw
    O << " = vrminuw(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 101:
    // A4_vrminw
    O << " = vrminw(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 102:
    // A5_ACS, V6_vdeal, V6_vdeal_128B, V6_vshuff, V6_vshuff_128B
    O << ',';
    break;
  case 103:
    // A5_vaddhubs
    O << " = vaddhub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 104:
    // C2_all8
    O << " = all8(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 105:
    // C2_any8
    O << " = any8(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 106:
    // C2_bitsclr, C2_bitsclri
    O << " = bitsclr(";
    printOperand(MI, 1, O);
    break;
  case 107:
    // C2_bitsset
    O << " = bitsset(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 108:
    // C2_cmpgei
    O << " = cmp.ge(";
    printOperand(MI, 1, O);
    O << ", #";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 109:
    // C2_cmpgeui
    O << " = cmp.geu(";
    printOperand(MI, 1, O);
    O << ", #";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 110:
    // C2_cmpgt, C2_cmpgti, C2_cmpgtp
    O << " = cmp.gt(";
    printOperand(MI, 1, O);
    break;
  case 111:
    // C2_cmpgtu, C2_cmpgtui, C2_cmpgtup
    O << " = cmp.gtu(";
    printOperand(MI, 1, O);
    break;
  case 112:
    // C2_mask
    O << " = mask(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 113:
    // C2_mux, C2_muxii, C2_muxir, C2_muxri, MUX_ir_f, MUX_ri_f
    O << " = mux(";
    printOperand(MI, 1, O);
    break;
  case 114:
    // C2_vitpack
    O << " = vitpack(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 115:
    // C2_vmux, V6_vmux, V6_vmux_128B
    O << " = vmux(";
    printOperand(MI, 1, O);
    break;
  case 116:
    // C4_addipc
    O << " = add(pc, #";
    printExtOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 117:
    // C4_cmplte, C4_cmpltei
    O << " = !cmp.gt(";
    printOperand(MI, 1, O);
    break;
  case 118:
    // C4_cmplteu, C4_cmplteui
    O << " = !cmp.gtu(";
    printOperand(MI, 1, O);
    break;
  case 119:
    // C4_fastcorner9
    O << " = fastcorner9(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 120:
    // C4_fastcorner9_not
    O << " = !fastcorner9(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 121:
    // C4_nbitsclr, C4_nbitsclri
    O << " = !bitsclr(";
    printOperand(MI, 1, O);
    break;
  case 122:
    // C4_nbitsset
    O << " = !bitsset(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 123:
    // CALLRv3nr, CALLv3nr, EH_RETURN_JMPR, J2_call, J2_callr, J2_jump, J2_ju...
    return;
    break;
  case 124:
    // CONST32, CONST32_Float_Real, CONST32_Int_Real, FCONST32_nsdata
    O << " = CONST32(#";
    break;
  case 125:
    // CONST64_Float_Real, CONST64_Int_Real
    O << " = CONST64(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 126:
    // F2_conv_d2df
    O << " = convert_d2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 127:
    // F2_conv_d2sf
    O << " = convert_d2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 128:
    // F2_conv_df2d, F2_conv_df2d_chop
    O << " = convert_df2d(";
    printOperand(MI, 1, O);
    break;
  case 129:
    // F2_conv_df2sf
    O << " = convert_df2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 130:
    // F2_conv_df2ud, F2_conv_df2ud_chop
    O << " = convert_df2ud(";
    printOperand(MI, 1, O);
    break;
  case 131:
    // F2_conv_df2uw, F2_conv_df2uw_chop
    O << " = convert_df2uw(";
    printOperand(MI, 1, O);
    break;
  case 132:
    // F2_conv_df2w, F2_conv_df2w_chop
    O << " = convert_df2w(";
    printOperand(MI, 1, O);
    break;
  case 133:
    // F2_conv_sf2d, F2_conv_sf2d_chop
    O << " = convert_sf2d(";
    printOperand(MI, 1, O);
    break;
  case 134:
    // F2_conv_sf2df
    O << " = convert_sf2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 135:
    // F2_conv_sf2ud, F2_conv_sf2ud_chop
    O << " = convert_sf2ud(";
    printOperand(MI, 1, O);
    break;
  case 136:
    // F2_conv_sf2uw, F2_conv_sf2uw_chop
    O << " = convert_sf2uw(";
    printOperand(MI, 1, O);
    break;
  case 137:
    // F2_conv_sf2w, F2_conv_sf2w_chop
    O << " = convert_sf2w(";
    printOperand(MI, 1, O);
    break;
  case 138:
    // F2_conv_ud2df
    O << " = convert_ud2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 139:
    // F2_conv_ud2sf
    O << " = convert_ud2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 140:
    // F2_conv_uw2df
    O << " = convert_uw2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 141:
    // F2_conv_uw2sf
    O << " = convert_uw2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 142:
    // F2_conv_w2df
    O << " = convert_w2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 143:
    // F2_conv_w2sf
    O << " = convert_w2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 144:
    // F2_dfclass
    O << " = dfclass(";
    printOperand(MI, 1, O);
    O << ", #";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 145:
    // F2_dfcmpeq
    O << " = dfcmp.eq(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 146:
    // F2_dfcmpge
    O << " = dfcmp.ge(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 147:
    // F2_dfcmpgt
    O << " = dfcmp.gt(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 148:
    // F2_dfcmpuo
    O << " = dfcmp.uo(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 149:
    // F2_dfimm_n, F2_dfimm_p
    O << " = dfmake(#";
    printOperand(MI, 1, O);
    break;
  case 150:
    // F2_sfadd
    O << " = sfadd(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 151:
    // F2_sfclass
    O << " = sfclass(";
    printOperand(MI, 1, O);
    O << ", #";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 152:
    // F2_sfcmpeq
    O << " = sfcmp.eq(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 153:
    // F2_sfcmpge
    O << " = sfcmp.ge(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 154:
    // F2_sfcmpgt
    O << " = sfcmp.gt(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 155:
    // F2_sfcmpuo
    O << " = sfcmp.uo(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 156:
    // F2_sffixupd
    O << " = sffixupd(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 157:
    // F2_sffixupn
    O << " = sffixupn(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 158:
    // F2_sffixupr
    O << " = sffixupr(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 159:
    // F2_sffma, F2_sffma_lib, F2_sffma_sc
    O << " += sfmpy(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 160:
    // F2_sffms, F2_sffms_lib
    O << " -= sfmpy(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 161:
    // F2_sfimm_n, F2_sfimm_p
    O << " = sfmake(#";
    printOperand(MI, 1, O);
    break;
  case 162:
    // F2_sfinvsqrta, F2_sfrecipa, J2_loop0r, J2_loop0rext, J2_loop1r, J2_loo...
    O << ", ";
    break;
  case 163:
    // F2_sfmax
    O << " = sfmax(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 164:
    // F2_sfmin
    O << " = sfmin(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 165:
    // F2_sfmpy
    O << " = sfmpy(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 166:
    // F2_sfsub
    O << " = sfsub(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 167:
    // HEXAGON_V6_hi, HEXAGON_V6_hi_128B
    O << "=hi_W(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 168:
    // HEXAGON_V6_lo, HEXAGON_V6_lo_128B
    O << "=lo_W(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 169:
    // HEXAGON_V6_vassignp
    O << "=vassignp_W(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 170:
    // HEXAGON_V6_vassignp_128B
    O << "=vassignp_W_128B(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 171:
    // HEXAGON_V6_vd0_pseudo, HEXAGON_V6_vd0_pseudo_128B
    O << "=#0";
    return;
    break;
  case 172:
    // HI, HI_GOT, HI_GOTREL, HI_PIC
    O << ".h = #HI(";
    break;
  case 173:
    // HI_L
    O << ".h = #LO(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 174:
    // J2_callf, J2_callt
    O << ") call ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 175:
    // J2_callrf, J2_callrt
    O << ") callr ";
    printOperand(MI, 1, O);
    return;
    break;
  case 176:
    // J2_jump_extf, J2_jump_extt
    O << ") jump ##";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 177:
    // J2_jump_extfnew, J2_jump_exttnew
    O << ".new) jump:nt ##";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 178:
    // J2_jump_extfnewpt, J2_jump_exttnewpt
    O << ".new) jump:t ##";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 179:
    // J2_jump_noextf, J2_jump_noextt
    O << ") jump #";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 180:
    // J2_jump_noextfnew, J2_jump_noexttnew
    O << ".new) jump:nt #";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 181:
    // J2_jump_noextfnewpt, J2_jump_noexttnewpt
    O << ".new) jump:t #";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 182:
    // J2_jumpf, J2_jumpt
    O << ") jump ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 183:
    // J2_jumpfnew, J2_jumptnew
    O << ".new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 184:
    // J2_jumpfnewpt, J2_jumptnewpt
    O << ".new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 185:
    // J2_jumprf, J2_jumprt, JMPretf, JMPrett
    O << ") jumpr ";
    printOperand(MI, 1, O);
    return;
    break;
  case 186:
    // J2_jumprfnew, J2_jumprtnew, JMPretfnew, JMPrettnew
    O << ".new) jumpr:nt ";
    printOperand(MI, 1, O);
    return;
    break;
  case 187:
    // J2_jumprfnewpt, J2_jumprtnewpt, JMPretfnewpt, JMPrettnewpt
    O << ".new) jumpr:t ";
    printOperand(MI, 1, O);
    return;
    break;
  case 188:
    // J2_jumprgtez
    O << ">=#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 189:
    // J2_jumprgtezpt
    O << ">=#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 190:
    // J2_jumprltez
    O << "<=#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 191:
    // J2_jumprltezpt
    O << "<=#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 192:
    // J2_jumprnz
    O << "==#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 193:
    // J2_jumprnzpt
    O << "==#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 194:
    // J2_jumprz
    O << "!=#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 195:
    // J2_jumprzpt
    O << "!=#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 196:
    // J2_loop0i, J2_loop0iext, J2_loop1i, J2_loop1iext, J2_ploop1si, J2_ploo...
    O << ", #";
    printOperand(MI, 1, O);
    break;
  case 197:
    // J4_cmpeq_f_jumpnv_nt, J4_cmpeq_f_jumpnv_t, J4_cmpeq_t_jumpnv_nt, J4_cm...
    O << ".new, ";
    printOperand(MI, 1, O);
    break;
  case 198:
    // J4_cmpeqi_f_jumpnv_nt, J4_cmpeqi_f_jumpnv_t, J4_cmpeqi_t_jumpnv_nt, J4...
    O << ".new, #";
    printOperand(MI, 1, O);
    break;
  case 199:
    // J4_cmpeqn1_f_jumpnv_nt, J4_cmpeqn1_t_jumpnv_nt, J4_cmpgtn1_f_jumpnv_nt...
    O << ".new, #-1)) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 200:
    // J4_cmpeqn1_f_jumpnv_t, J4_cmpeqn1_t_jumpnv_t, J4_cmpgtn1_f_jumpnv_t, J...
    O << ".new, #-1)) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 201:
    // J4_cmpeqn1_fp0_jump_nt, J4_cmpgtn1_fp0_jump_nt
    O << ",#-1); if (!p0.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 202:
    // J4_cmpeqn1_fp0_jump_t, J4_cmpgtn1_fp0_jump_t
    O << ",#-1); if (!p0.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 203:
    // J4_cmpeqn1_fp1_jump_nt, J4_cmpgtn1_fp1_jump_nt
    O << ",#-1); if (!p1.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 204:
    // J4_cmpeqn1_fp1_jump_t, J4_cmpgtn1_fp1_jump_t
    O << ",#-1); if (!p1.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 205:
    // J4_cmpeqn1_tp0_jump_nt, J4_cmpgtn1_tp0_jump_nt
    O << ",#-1); if (p0.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 206:
    // J4_cmpeqn1_tp0_jump_t, J4_cmpgtn1_tp0_jump_t
    O << ",#-1); if (p0.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 207:
    // J4_cmpeqn1_tp1_jump_nt, J4_cmpgtn1_tp1_jump_nt
    O << ",#-1); if (p1.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 208:
    // J4_cmpeqn1_tp1_jump_t, J4_cmpgtn1_tp1_jump_t
    O << ",#-1); if (p1.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 209:
    // J4_tstbit0_f_jumpnv_nt, J4_tstbit0_t_jumpnv_nt
    O << ".new, #0)) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 210:
    // J4_tstbit0_f_jumpnv_t, J4_tstbit0_t_jumpnv_t
    O << ".new, #0)) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 211:
    // J4_tstbit0_fp0_jump_nt
    O << ", #0); if (!p0.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 212:
    // J4_tstbit0_fp0_jump_t
    O << ", #0); if (!p0.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 213:
    // J4_tstbit0_fp1_jump_nt
    O << ", #0); if (!p1.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 214:
    // J4_tstbit0_fp1_jump_t
    O << ", #0); if (!p1.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 215:
    // J4_tstbit0_tp0_jump_nt
    O << ", #0); if (p0.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 216:
    // J4_tstbit0_tp0_jump_t
    O << ", #0); if (p0.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 217:
    // J4_tstbit0_tp1_jump_nt
    O << ", #0); if (p1.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 218:
    // J4_tstbit0_tp1_jump_t
    O << ", #0); if (p1.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 219:
    // L2_loadalignb_io, L2_loadalignb_pbr, L2_loadalignb_pci, L2_loadalignb_...
    O << " = memb_fifo(";
    break;
  case 220:
    // L2_loadalignh_io, L2_loadalignh_pbr, L2_loadalignh_pci, L2_loadalignh_...
    O << " = memh_fifo(";
    break;
  case 221:
    // L2_loadbsw2_io, L2_loadbsw2_pbr, L2_loadbsw2_pci, L2_loadbsw2_pcr, L2_...
    O << " = membh(";
    break;
  case 222:
    // L2_loadbzw2_io, L2_loadbzw2_pbr, L2_loadbzw2_pci, L2_loadbzw2_pcr, L2_...
    O << " = memubh(";
    break;
  case 223:
    // L2_loadrb_io, L2_loadrb_pbr, L2_loadrb_pbr_pseudo, L2_loadrb_pci, L2_l...
    O << " = memb(";
    break;
  case 224:
    // L2_loadrbgp, L4_loadrb_abs
    O << " = memb(#";
    break;
  case 225:
    // L2_loadrd_io, L2_loadrd_pbr, L2_loadrd_pbr_pseudo, L2_loadrd_pci, L2_l...
    O << " = memd(";
    break;
  case 226:
    // L2_loadrdgp, L4_loadrd_abs
    O << " = memd(#";
    break;
  case 227:
    // L2_loadrh_io, L2_loadrh_pbr, L2_loadrh_pbr_pseudo, L2_loadrh_pci, L2_l...
    O << " = memh(";
    break;
  case 228:
    // L2_loadrhgp, L4_loadrh_abs
    O << " = memh(#";
    break;
  case 229:
    // L2_loadri_io, L2_loadri_pbr, L2_loadri_pbr_pseudo, L2_loadri_pci, L2_l...
    O << " = memw(";
    break;
  case 230:
    // L2_loadrigp, L4_loadri_abs
    O << " = memw(#";
    break;
  case 231:
    // L2_loadrub_io, L2_loadrub_pbr, L2_loadrub_pbr_pseudo, L2_loadrub_pci, ...
    O << " = memub(";
    break;
  case 232:
    // L2_loadrubgp, L4_loadrub_abs
    O << " = memub(#";
    break;
  case 233:
    // L2_loadruh_io, L2_loadruh_pbr, L2_loadruh_pbr_pseudo, L2_loadruh_pci, ...
    O << " = memuh(";
    break;
  case 234:
    // L2_loadruhgp, L4_loadruh_abs
    O << " = memuh(#";
    break;
  case 235:
    // L2_loadw_locked
    O << " = memw_locked(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 236:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io, L4_and_memopb_io...
    O << "+#";
    break;
  case 237:
    // L4_loadd_locked
    O << " = memd_locked(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 238:
    // L4_return_f, L4_return_t
    O << ") dealloc_return";
    return;
    break;
  case 239:
    // L4_return_fnew_pnt, L4_return_tnew_pnt
    O << ".new) dealloc_return:nt";
    return;
    break;
  case 240:
    // L4_return_fnew_pt, L4_return_tnew_pt
    O << ".new) dealloc_return:t";
    return;
    break;
  case 241:
    // LDrivv_indexed, LDrivv_indexed_128B
    O << "=vvmem(";
    printOperand(MI, 1, O);
    O << "+#";
    break;
  case 242:
    // LO, LO_GOT, LO_GOTREL, LO_PIC
    O << ".l = #LO(";
    break;
  case 243:
    // LO_H
    O << ".l = #HI(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 244:
    // M2_acci, M2_accii
    O << " += add(";
    printOperand(MI, 2, O);
    break;
  case 245:
    // M2_cmaci_s0
    O << " += cmpyi(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 246:
    // M2_cmacr_s0
    O << " += cmpyr(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 247:
    // M2_cmacs_s0, M2_cmacs_s1, M2_cmacsc_s0, M2_cmacsc_s1
    O << " += cmpy(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 248:
    // M2_cmpyi_s0
    O << " = cmpyi(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 249:
    // M2_cmpyr_s0
    O << " = cmpyr(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 250:
    // M2_cmpyrs_s0, M2_cmpyrs_s1, M2_cmpyrsc_s0, M2_cmpyrsc_s1, M2_cmpys_s0,...
    O << " = cmpy(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 251:
    // M2_cnacs_s0, M2_cnacs_s1, M2_cnacsc_s0, M2_cnacsc_s1
    O << " -= cmpy(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 252:
    // M2_dpmpyss_acc_s0, M2_mpy_acc_hh_s0, M2_mpy_acc_hh_s1, M2_mpy_acc_hl_s...
    O << " += mpy(";
    printOperand(MI, 2, O);
    break;
  case 253:
    // M2_dpmpyss_nac_s0, M2_mpy_nac_hh_s0, M2_mpy_nac_hh_s1, M2_mpy_nac_hl_s...
    O << " -= mpy(";
    printOperand(MI, 2, O);
    break;
  case 254:
    // M2_dpmpyss_rnd_s0, M2_dpmpyss_s0, M2_hmmpyh_rs1, M2_hmmpyh_s1, M2_hmmp...
    O << " = mpy(";
    printOperand(MI, 1, O);
    break;
  case 255:
    // M2_dpmpyuu_acc_s0, M2_mpyu_acc_hh_s0, M2_mpyu_acc_hh_s1, M2_mpyu_acc_h...
    O << " += mpyu(";
    printOperand(MI, 2, O);
    break;
  case 256:
    // M2_dpmpyuu_nac_s0, M2_mpyu_nac_hh_s0, M2_mpyu_nac_hh_s1, M2_mpyu_nac_h...
    O << " -= mpyu(";
    printOperand(MI, 2, O);
    break;
  case 257:
    // M2_dpmpyuu_s0, M2_mpyu_hh_s0, M2_mpyu_hh_s1, M2_mpyu_hl_s0, M2_mpyu_hl...
    O << " = mpyu(";
    printOperand(MI, 1, O);
    break;
  case 258:
    // M2_maci, M2_macsip
    O << " += mpyi(";
    printOperand(MI, 2, O);
    break;
  case 259:
    // M2_macsin
    O << " -= mpyi(";
    printOperand(MI, 2, O);
    O << ", #";
    printExtOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 260:
    // M2_mmachs_rs0, M2_mmachs_rs1, M2_mmachs_s0, M2_mmachs_s1
    O << " += vmpywoh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 261:
    // M2_mmacls_rs0, M2_mmacls_rs1, M2_mmacls_s0, M2_mmacls_s1
    O << " += vmpyweh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 262:
    // M2_mmacuhs_rs0, M2_mmacuhs_rs1, M2_mmacuhs_s0, M2_mmacuhs_s1
    O << " += vmpywouh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 263:
    // M2_mmaculs_rs0, M2_mmaculs_rs1, M2_mmaculs_s0, M2_mmaculs_s1
    O << " += vmpyweuh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 264:
    // M2_mmpyh_rs0, M2_mmpyh_rs1, M2_mmpyh_s0, M2_mmpyh_s1
    O << " = vmpywoh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 265:
    // M2_mmpyl_rs0, M2_mmpyl_rs1, M2_mmpyl_s0, M2_mmpyl_s1
    O << " = vmpyweh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 266:
    // M2_mmpyuh_rs0, M2_mmpyuh_rs1, M2_mmpyuh_s0, M2_mmpyuh_s1
    O << " = vmpywouh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 267:
    // M2_mmpyul_rs0, M2_mmpyul_rs1, M2_mmpyul_s0, M2_mmpyul_s1
    O << " = vmpyweuh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 268:
    // M2_mpyi, M2_mpysmi
    O << " = mpyi(";
    printOperand(MI, 1, O);
    break;
  case 269:
    // M2_mpysin
    O << " =- mpyi(";
    printOperand(MI, 1, O);
    O << ", #";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 270:
    // M2_mpysip
    O << " =+ mpyi(";
    printOperand(MI, 1, O);
    O << ", #";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 271:
    // M2_mpysu_up
    O << " = mpysu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 272:
    // M2_mpyui
    O << " = mpyui(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 273:
    // M2_nacci, M2_naccii
    O << " -= add(";
    printOperand(MI, 2, O);
    break;
  case 274:
    // M2_subacc
    O << " += sub(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 275:
    // M2_vabsdiffh
    O << " = vabsdiffh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 276:
    // M2_vabsdiffw
    O << " = vabsdiffw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 277:
    // M2_vcmac_s0_sat_i
    O << " += vcmpyi(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 278:
    // M2_vcmac_s0_sat_r
    O << " += vcmpyr(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 279:
    // M2_vcmpy_s0_sat_i, M2_vcmpy_s1_sat_i
    O << " = vcmpyi(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 280:
    // M2_vcmpy_s0_sat_r, M2_vcmpy_s1_sat_r
    O << " = vcmpyr(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 281:
    // M2_vdmacs_s0, M2_vdmacs_s1
    O << " += vdmpy(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 282:
    // M2_vdmpyrs_s0, M2_vdmpyrs_s1, M2_vdmpys_s0, M2_vdmpys_s1
    O << " = vdmpy(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 283:
    // M2_vmac2, M2_vmac2s_s0, M2_vmac2s_s1
    O << " += vmpyh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 284:
    // M2_vmac2es, M2_vmac2es_s0, M2_vmac2es_s1
    O << " += vmpyeh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 285:
    // M2_vmac2su_s0, M2_vmac2su_s1
    O << " += vmpyhsu(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 286:
    // M2_vmpy2es_s0, M2_vmpy2es_s1
    O << " = vmpyeh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 287:
    // M2_vmpy2s_s0, M2_vmpy2s_s0pack, M2_vmpy2s_s1, M2_vmpy2s_s1pack
    O << " = vmpyh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 288:
    // M2_vmpy2su_s0, M2_vmpy2su_s1
    O << " = vmpyhsu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 289:
    // M2_vraddh
    O << " = vraddh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 290:
    // M2_vradduh
    O << " = vradduh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 291:
    // M2_vrcmaci_s0, M2_vrcmaci_s0c
    O << " += vrcmpyi(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 292:
    // M2_vrcmacr_s0, M2_vrcmacr_s0c
    O << " += vrcmpyr(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 293:
    // M2_vrcmpyi_s0, M2_vrcmpyi_s0c
    O << " = vrcmpyi(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 294:
    // M2_vrcmpyr_s0, M2_vrcmpyr_s0c
    O << " = vrcmpyr(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 295:
    // M2_vrcmpys_acc_s1, M2_vrcmpys_acc_s1_h, M2_vrcmpys_acc_s1_l
    O << " += vrcmpys(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 296:
    // M2_vrcmpys_s1, M2_vrcmpys_s1rp
    O << "=vrcmpys(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 297:
    // M2_vrcmpys_s1_h, M2_vrcmpys_s1_l, M2_vrcmpys_s1rp_h, M2_vrcmpys_s1rp_l
    O << " = vrcmpys(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 298:
    // M2_vrmac_s0
    O << " += vrmpyh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 299:
    // M2_vrmpy_s0
    O << " = vrmpyh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 300:
    // M2_xor_xacc, M4_xor_xacc
    O << " ^= xor(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 301:
    // M4_and_and, M4_and_andn
    O << " &= and(";
    printOperand(MI, 2, O);
    break;
  case 302:
    // M4_and_or
    O << " &= or(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 303:
    // M4_and_xor
    O << " &= xor(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 304:
    // M4_cmpyi_wh, M4_cmpyi_whc
    O << " = cmpyiwh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 305:
    // M4_cmpyr_wh, M4_cmpyr_whc
    O << " = cmpyrwh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 306:
    // M4_mpyri_addi, M4_mpyrr_addi, S4_addi_asl_ri, S4_addi_lsr_ri
    O << " = add(#";
    printExtOperand(MI, 1, O);
    break;
  case 307:
    // M4_or_and, M4_or_andn, S4_or_andi
    O << " |= and(";
    printOperand(MI, 2, O);
    break;
  case 308:
    // M4_or_or, S4_or_ori
    O << " |= or(";
    printOperand(MI, 2, O);
    break;
  case 309:
    // M4_or_xor
    O << " |= xor(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 310:
    // M4_pmpyw
    O << " = pmpyw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 311:
    // M4_pmpyw_acc
    O << " ^= pmpyw(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 312:
    // M4_vpmpyh
    O << " = vpmpyh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 313:
    // M4_vpmpyh_acc
    O << " ^= vpmpyh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 314:
    // M4_vrmpyeh_acc_s0, M4_vrmpyeh_acc_s1
    O << " += vrmpyweh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 315:
    // M4_vrmpyeh_s0, M4_vrmpyeh_s1
    O << " = vrmpyweh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 316:
    // M4_vrmpyoh_acc_s0, M4_vrmpyoh_acc_s1
    O << " += vrmpywoh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 317:
    // M4_vrmpyoh_s0, M4_vrmpyoh_s1
    O << " = vrmpywoh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 318:
    // M4_xor_and, M4_xor_andn
    O << " ^= and(";
    printOperand(MI, 2, O);
    break;
  case 319:
    // M4_xor_or
    O << " ^= or(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 320:
    // M5_vdmacbsu
    O << " += vdmpybsu(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 321:
    // M5_vdmpybsu
    O << " = vdmpybsu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 322:
    // M5_vmacbsu
    O << " += vmpybsu(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 323:
    // M5_vmacbuu
    O << " += vmpybu(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 324:
    // M5_vmpybsu
    O << " = vmpybsu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 325:
    // M5_vmpybuu
    O << " = vmpybu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 326:
    // M5_vrmacbsu
    O << " += vrmpybsu(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 327:
    // M5_vrmacbuu
    O << " += vrmpybu(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 328:
    // M5_vrmpybsu
    O << " = vrmpybsu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 329:
    // M5_vrmpybuu
    O << " = vrmpybu(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 330:
    // S2_addasl_rrri
    O << " = addasl(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 331:
    // S2_asl_i_p, S2_asl_i_r, S2_asl_i_r_sat, S2_asl_r_p, S2_asl_r_r, S2_asl...
    O << " = asl(";
    printOperand(MI, 1, O);
    break;
  case 332:
    // S2_asl_i_p_acc, S2_asl_i_r_acc, S2_asl_r_p_acc, S2_asl_r_r_acc
    O << " += asl(";
    printOperand(MI, 2, O);
    break;
  case 333:
    // S2_asl_i_p_and, S2_asl_i_r_and, S2_asl_r_p_and, S2_asl_r_r_and
    O << " &= asl(";
    printOperand(MI, 2, O);
    break;
  case 334:
    // S2_asl_i_p_nac, S2_asl_i_r_nac, S2_asl_r_p_nac, S2_asl_r_r_nac
    O << " -= asl(";
    printOperand(MI, 2, O);
    break;
  case 335:
    // S2_asl_i_p_or, S2_asl_i_r_or, S2_asl_r_p_or, S2_asl_r_r_or
    O << " |= asl(";
    printOperand(MI, 2, O);
    break;
  case 336:
    // S2_asl_i_p_xacc, S2_asl_i_r_xacc, S2_asl_r_p_xor
    O << " ^= asl(";
    printOperand(MI, 2, O);
    break;
  case 337:
    // S2_asl_i_vh, S2_asl_r_vh
    O << " = vaslh(";
    printOperand(MI, 1, O);
    break;
  case 338:
    // S2_asl_i_vw, S2_asl_r_vw
    O << " = vaslw(";
    printOperand(MI, 1, O);
    break;
  case 339:
    // S2_asr_i_p, S2_asr_i_p_rnd, S2_asr_i_r, S2_asr_i_r_rnd, S2_asr_r_p, S2...
    O << " = asr(";
    printOperand(MI, 1, O);
    break;
  case 340:
    // S2_asr_i_p_acc, S2_asr_i_r_acc, S2_asr_r_p_acc, S2_asr_r_r_acc
    O << " += asr(";
    printOperand(MI, 2, O);
    break;
  case 341:
    // S2_asr_i_p_and, S2_asr_i_r_and, S2_asr_r_p_and, S2_asr_r_r_and
    O << " &= asr(";
    printOperand(MI, 2, O);
    break;
  case 342:
    // S2_asr_i_p_nac, S2_asr_i_r_nac, S2_asr_r_p_nac, S2_asr_r_r_nac
    O << " -= asr(";
    printOperand(MI, 2, O);
    break;
  case 343:
    // S2_asr_i_p_or, S2_asr_i_r_or, S2_asr_r_p_or, S2_asr_r_r_or
    O << " |= asr(";
    printOperand(MI, 2, O);
    break;
  case 344:
    // S2_asr_i_p_rnd_goodsyntax, S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd(";
    printOperand(MI, 1, O);
    O << ", #";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 345:
    // S2_asr_i_svw_trun, S2_asr_i_vw, S2_asr_r_svw_trun, S2_asr_r_vw
    O << " = vasrw(";
    printOperand(MI, 1, O);
    break;
  case 346:
    // S2_asr_i_vh, S2_asr_r_vh, S5_vasrhrnd, S5_vasrhrnd_goodsyntax
    O << " = vasrh(";
    printOperand(MI, 1, O);
    break;
  case 347:
    // S2_asr_r_p_xor
    O << " ^= asr(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 348:
    // S2_brev, S2_brevp
    O << " = brev(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 349:
    // S2_cabacdecbin
    O << " = decbin(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 350:
    // S2_cabacencbin
    O << " = encbin(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 351:
    // S2_cl0, S2_cl0p
    O << " = cl0(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 352:
    // S2_cl1, S2_cl1p
    O << " = cl1(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 353:
    // S2_clb, S2_clbp
    O << " = clb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 354:
    // S2_clbnorm, S4_clbpnorm
    O << " = normamt(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 355:
    // S2_clrbit_i, S2_clrbit_r
    O << " = clrbit(";
    printOperand(MI, 1, O);
    break;
  case 356:
    // S2_ct0, S2_ct0p
    O << " = ct0(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 357:
    // S2_ct1, S2_ct1p
    O << " = ct1(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 358:
    // S2_deinterleave
    O << " = deinterleave(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 359:
    // S2_extractu, S2_extractu_rp, S2_extractup, S2_extractup_rp
    O << " = extractu(";
    printOperand(MI, 1, O);
    break;
  case 360:
    // S2_insert, S2_insert_rp, S2_insertp, S2_insertp_rp
    O << " = insert(";
    printOperand(MI, 2, O);
    break;
  case 361:
    // S2_interleave
    O << " = interleave(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 362:
    // S2_lfsp
    O << " = lfs(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 363:
    // S2_lsl_r_p, S2_lsl_r_r
    O << " = lsl(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 364:
    // S2_lsl_r_p_acc, S2_lsl_r_r_acc
    O << " += lsl(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 365:
    // S2_lsl_r_p_and, S2_lsl_r_r_and
    O << " &= lsl(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 366:
    // S2_lsl_r_p_nac, S2_lsl_r_r_nac
    O << " -= lsl(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 367:
    // S2_lsl_r_p_or, S2_lsl_r_r_or
    O << " |= lsl(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 368:
    // S2_lsl_r_p_xor
    O << " ^= lsl(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 369:
    // S2_lsl_r_vh
    O << " = vlslh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 370:
    // S2_lsl_r_vw
    O << " = vlslw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 371:
    // S2_lsr_i_p, S2_lsr_i_r, S2_lsr_r_p, S2_lsr_r_r
    O << " = lsr(";
    printOperand(MI, 1, O);
    break;
  case 372:
    // S2_lsr_i_p_acc, S2_lsr_i_r_acc, S2_lsr_r_p_acc, S2_lsr_r_r_acc
    O << " += lsr(";
    printOperand(MI, 2, O);
    break;
  case 373:
    // S2_lsr_i_p_and, S2_lsr_i_r_and, S2_lsr_r_p_and, S2_lsr_r_r_and
    O << " &= lsr(";
    printOperand(MI, 2, O);
    break;
  case 374:
    // S2_lsr_i_p_nac, S2_lsr_i_r_nac, S2_lsr_r_p_nac, S2_lsr_r_r_nac
    O << " -= lsr(";
    printOperand(MI, 2, O);
    break;
  case 375:
    // S2_lsr_i_p_or, S2_lsr_i_r_or, S2_lsr_r_p_or, S2_lsr_r_r_or
    O << " |= lsr(";
    printOperand(MI, 2, O);
    break;
  case 376:
    // S2_lsr_i_p_xacc, S2_lsr_i_r_xacc, S2_lsr_r_p_xor
    O << " ^= lsr(";
    printOperand(MI, 2, O);
    break;
  case 377:
    // S2_lsr_i_vh, S2_lsr_r_vh
    O << " = vlsrh(";
    printOperand(MI, 1, O);
    break;
  case 378:
    // S2_lsr_i_vw, S2_lsr_r_vw
    O << " = vlsrw(";
    printOperand(MI, 1, O);
    break;
  case 379:
    // S2_packhl, dep_S2_packhl
    O << " = packhl(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 380:
    // S2_parityp, S4_parity
    O << " = parity(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 381:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbnewf_io, S2_pstorerbnewf_...
    O << ") memb(";
    break;
  case 382:
    // S2_pstorerbfnew_pi, S2_pstorerbnewfnew_pi, S2_pstorerbnewtnew_pi, S2_p...
    O << ".new) memb(";
    break;
  case 383:
    // S2_pstorerdf_io, S2_pstorerdf_pi, S2_pstorerdt_io, S2_pstorerdt_pi, S4...
    O << ") memd(";
    break;
  case 384:
    // S2_pstorerdfnew_pi, S2_pstorerdtnew_pi, S4_pstorerdfnew_io, S4_pstorer...
    O << ".new) memd(";
    break;
  case 385:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerft_io, S2_pstorerft_pi, S2...
    O << ") memh(";
    break;
  case 386:
    // S2_pstorerffnew_pi, S2_pstorerftnew_pi, S2_pstorerhfnew_pi, S2_pstorer...
    O << ".new) memh(";
    break;
  case 387:
    // S2_pstorerif_io, S2_pstorerif_pi, S2_pstorerinewf_io, S2_pstorerinewf_...
    O << ") memw(";
    break;
  case 388:
    // S2_pstorerifnew_pi, S2_pstorerinewfnew_pi, S2_pstorerinewtnew_pi, S2_p...
    O << ".new) memw(";
    break;
  case 389:
    // S2_setbit_i, S2_setbit_r
    O << " = setbit(";
    printOperand(MI, 1, O);
    break;
  case 390:
    // S2_shuffeb
    O << " = shuffeb(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 391:
    // S2_shuffeh
    O << " = shuffeh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 392:
    // S2_shuffob
    O << " = shuffob(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 393:
    // S2_shuffoh
    O << " = shuffoh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 394:
    // S2_storerb_pbr, S2_storerbnew_pbr, S2_storerd_pbr, S2_storerf_pbr, S2_...
    O << " ++ ";
    printOperand(MI, 2, O);
    O << ":brev) = ";
    printOperand(MI, 3, O);
    break;
  case 395:
    // S2_storerb_pbr_pseudo, S2_storerb_pr, S2_storerbnew_pr, S2_storerd_pbr...
    O << "++";
    break;
  case 396:
    // S2_storerb_pci, S2_storerbnew_pci, S2_storerd_pci, S2_storerf_pci, S2_...
    O << " ++ #";
    printOperand(MI, 2, O);
    O << ":circ(";
    printOperand(MI, 3, O);
    O << ")) = ";
    printOperand(MI, 4, O);
    break;
  case 397:
    // S2_storerb_pci_pseudo, S2_storerb_pi, S2_storerbnew_pi, S2_storerd_pci...
    O << "++#";
    break;
  case 398:
    // S2_storerb_pcr, S2_storerbnew_pcr, S2_storerd_pcr, S2_storerf_pcr, S2_...
    O << " ++ I:circ(";
    printOperand(MI, 2, O);
    O << ")) = ";
    printOperand(MI, 3, O);
    break;
  case 399:
    // S2_storerbgp, S2_storerbnewabs, S2_storerbnewgp, S2_storerdgp, S2_stor...
    O << ") = ";
    printOperand(MI, 1, O);
    break;
  case 400:
    // S2_storerfabs
    O << ".h";
    return;
    break;
  case 401:
    // S2_svsathb, S2_vsathb, S2_vsathb_nopack
    O << " = vsathb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 402:
    // S2_svsathub, S2_vsathub, S2_vsathub_nopack
    O << " = vsathub(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 403:
    // S2_tableidxb, S2_tableidxb_goodsyntax
    O << " = tableidxb(";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << ", #";
    printOperand(MI, 4, O);
    break;
  case 404:
    // S2_tableidxd, S2_tableidxd_goodsyntax
    O << " = tableidxd(";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << ", #";
    printOperand(MI, 4, O);
    break;
  case 405:
    // S2_tableidxh, S2_tableidxh_goodsyntax
    O << " = tableidxh(";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << ", #";
    printOperand(MI, 4, O);
    break;
  case 406:
    // S2_tableidxw, S2_tableidxw_goodsyntax
    O << " = tableidxw(";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << ", #";
    printOperand(MI, 4, O);
    break;
  case 407:
    // S2_togglebit_i, S2_togglebit_r
    O << " = togglebit(";
    printOperand(MI, 1, O);
    break;
  case 408:
    // S2_tstbit_i, S2_tstbit_r
    O << " = tstbit(";
    printOperand(MI, 1, O);
    break;
  case 409:
    // S2_valignib, S2_valignrb
    O << " = valignb(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 410:
    // S2_vcnegh
    O << " = vcnegh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 411:
    // S2_vcrotate
    O << " = vcrotate(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 412:
    // S2_vrcnegh
    O << " += vrcnegh(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 413:
    // S2_vrndpackwh, S2_vrndpackwhs
    O << " = vrndwh(";
    printOperand(MI, 1, O);
    break;
  case 414:
    // S2_vsatwh, S2_vsatwh_nopack
    O << " = vsatwh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 415:
    // S2_vsatwuh, S2_vsatwuh_nopack
    O << " = vsatwuh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 416:
    // S2_vsplatrb
    O << " = vsplatb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 417:
    // S2_vsplatrh
    O << " = vsplath(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 418:
    // S2_vspliceib, S2_vsplicerb
    O << " = vspliceb(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 419:
    // S2_vsxtbh
    O << " = vsxtbh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 420:
    // S2_vsxthw
    O << " = vsxthw(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 421:
    // S2_vtrunehb
    O << " = vtrunehb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 422:
    // S2_vtrunewh
    O << " = vtrunewh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 423:
    // S2_vtrunohb
    O << " = vtrunohb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 424:
    // S2_vtrunowh
    O << " = vtrunowh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 425:
    // S2_vzxtbh
    O << " = vzxtbh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 426:
    // S2_vzxthw
    O << " = vzxthw(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 427:
    // S4_andi_asl_ri, S4_andi_lsr_ri
    O << " = and(#";
    printExtOperand(MI, 1, O);
    break;
  case 428:
    // S4_clbaddi, S4_clbpaddi
    O << " = add(clb(";
    printOperand(MI, 1, O);
    O << "), #";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 429:
    // S4_extract, S4_extract_rp, S4_extractp, S4_extractp_rp
    O << " = extract(";
    printOperand(MI, 1, O);
    break;
  case 430:
    // S4_lsli
    O << " = lsl(#";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 431:
    // S4_ntstbit_i, S4_ntstbit_r
    O << " = !tstbit(";
    printOperand(MI, 1, O);
    break;
  case 432:
    // S4_ori_asl_ri, S4_ori_lsr_ri
    O << " = or(#";
    printExtOperand(MI, 1, O);
    break;
  case 433:
    // S4_pstorerbf_abs, S4_pstorerbnewf_abs, S4_pstorerbnewt_abs, S4_pstorer...
    O << ") memb(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 434:
    // S4_pstorerbfnew_abs, S4_pstorerbnewfnew_abs, S4_pstorerbnewtnew_abs, S...
    O << ".new) memb(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 435:
    // S4_pstorerdf_abs, S4_pstorerdt_abs
    O << ") memd(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 436:
    // S4_pstorerdfnew_abs, S4_pstorerdtnew_abs
    O << ".new) memd(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 437:
    // S4_pstorerff_abs, S4_pstorerft_abs, S4_pstorerhf_abs, S4_pstorerhnewf_...
    O << ") memh(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 438:
    // S4_pstorerffnew_abs, S4_pstorerftnew_abs, S4_pstorerhfnew_abs, S4_psto...
    O << ".new) memh(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 439:
    // S4_pstorerif_abs, S4_pstorerinewf_abs, S4_pstorerinewt_abs, S4_pstorer...
    O << ") memw(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 440:
    // S4_pstorerifnew_abs, S4_pstorerinewfnew_abs, S4_pstorerinewtnew_abs, S...
    O << ".new) memw(#";
    printExtOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 441:
    // S4_storerb_rr, S4_storerbnew_rr, S4_storerd_rr, S4_storerf_rr, S4_stor...
    O << " + ";
    printOperand(MI, 1, O);
    O << "<<#";
    printOperand(MI, 2, O);
    O << ") = ";
    printOperand(MI, 3, O);
    break;
  case 442:
    // S4_storerb_ur, S4_storerbnew_ur, S4_storerd_ur, S4_storerf_ur, S4_stor...
    O << "<<#";
    printOperand(MI, 1, O);
    O << " + #";
    printExtOperand(MI, 2, O);
    O << ") = ";
    printOperand(MI, 3, O);
    break;
  case 443:
    // S4_vrcrotate
    O << " = vrcrotate(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 444:
    // S4_vrcrotate_acc
    O << " += vrcrotate(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ", #";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 445:
    // S4_vxaddsubh, S4_vxaddsubhr
    O << " = vxaddsubh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 446:
    // S4_vxaddsubw
    O << " = vxaddsubw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 447:
    // S4_vxsubaddh, S4_vxsubaddhr
    O << " = vxsubaddh(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 448:
    // S4_vxsubaddw
    O << " = vxsubaddw(";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 449:
    // S5_asrhub_rnd_sat, S5_asrhub_rnd_sat_goodsyntax, S5_asrhub_sat
    O << " = vasrhub(";
    printOperand(MI, 1, O);
    O << ", #";
    printOperand(MI, 2, O);
    break;
  case 450:
    // S5_popcountp
    O << " = popcount(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 451:
    // S6_rol_i_p, S6_rol_i_r
    O << " = rol(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 452:
    // S6_rol_i_p_acc, S6_rol_i_r_acc
    O << " += rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 453:
    // S6_rol_i_p_and, S6_rol_i_r_and
    O << " &= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 454:
    // S6_rol_i_p_nac, S6_rol_i_r_nac
    O << " -= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 455:
    // S6_rol_i_p_or, S6_rol_i_r_or
    O << " |= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 456:
    // S6_rol_i_p_xacc, S6_rol_i_r_xacc
    O << " ^= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 457:
    // TFRI64_V2_ext
    O << " = combine(##";
    printExtOperand(MI, 1, O);
    O << ", #";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 458:
    // V4_SA1_addsp
    O << " = add(r29, #";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 459:
    // V4_SA1_clrf, V4_SA1_clrfnew, V4_SA1_clrt, V4_SA1_clrtnew
    O << " = #0";
    return;
    break;
  case 460:
    // V4_SA1_combine0i
    O << " = combine(#0, #";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 461:
    // V4_SA1_combine1i
    O << " = combine(#1, #";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 462:
    // V4_SA1_combine2i
    O << " = combine(#2, #";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 463:
    // V4_SA1_combine3i
    O << " = combine(#3, #";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 464:
    // V4_SA1_combinezr
    O << " = combine(#0, ";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 465:
    // V4_SA1_setin1
    O << " = #-1";
    return;
    break;
  case 466:
    // V4_SL2_loadrd_sp
    O << " = memd(r29 + #";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 467:
    // V4_SL2_loadri_sp
    O << " = memw(r29 + #";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 468:
    // V4_SS1_storeb_io, V4_SS1_storew_io, V4_SS2_storebi0, V4_SS2_storebi1, ...
    O << " + #";
    printOperand(MI, 1, O);
    break;
  case 469:
    // V6_extractw, V6_extractw_128B
    O << " = vextract(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 470:
    // V6_lvsplatw, V6_lvsplatw_128B
    O << " = vsplat(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 471:
    // V6_pred_scalar2, V6_pred_scalar2_128B
    O << " = vsetq(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 472:
    // V6_vL32Ub_ai, V6_vL32Ub_ai_128B, V6_vL32Ub_pi, V6_vL32Ub_pi_128B, V6_v...
    O << " = vmemu(";
    break;
  case 473:
    // V6_vL32b_ai, V6_vL32b_ai_128B, V6_vL32b_nt_ai, V6_vL32b_nt_ai_128B, V6...
    O << " = vmem(";
    break;
  case 474:
    // V6_vL32b_cur_ai, V6_vL32b_cur_ai_128B, V6_vL32b_cur_pi, V6_vL32b_cur_p...
    O << ".cur = vmem(";
    break;
  case 475:
    // V6_vL32b_nt_tmp_ai, V6_vL32b_nt_tmp_ai_128B, V6_vL32b_nt_tmp_pi, V6_vL...
    O << ".tmp = vmem(";
    break;
  case 476:
    // V6_vS32Ub_npred_ai, V6_vS32Ub_npred_ai_128B, V6_vS32Ub_npred_pi, V6_vS...
    O << ") vmemu(";
    break;
  case 477:
    // V6_vS32b_new_npred_ai, V6_vS32b_new_npred_ai_128B, V6_vS32b_new_npred_...
    O << ") vmem(";
    break;
  case 478:
    // V6_vabsdiffh, V6_vabsdiffh_128B, V6_vabsdiffuh, V6_vabsdiffuh_128B
    O << ".uh = vabsdiff(";
    printOperand(MI, 1, O);
    break;
  case 479:
    // V6_vabsdiffub, V6_vabsdiffub_128B
    O << ".ub = vabsdiff(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 480:
    // V6_vabsdiffw, V6_vabsdiffw_128B
    O << ".uw = vabsdiff(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 481:
    // V6_vabsh, V6_vabsh_128B, V6_vabsh_sat, V6_vabsh_sat_128B
    O << ".h = vabs(";
    printOperand(MI, 1, O);
    break;
  case 482:
    // V6_vabsw, V6_vabsw_128B, V6_vabsw_sat, V6_vabsw_sat_128B
    O << ".w = vabs(";
    printOperand(MI, 1, O);
    break;
  case 483:
    // V6_vaddb, V6_vaddb_128B, V6_vaddb_dv, V6_vaddb_dv_128B
    O << ".b = vadd(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 484:
    // V6_vaddh, V6_vaddh_128B, V6_vaddh_dv, V6_vaddh_dv_128B, V6_vaddhsat, V...
    O << ".h = vadd(";
    printOperand(MI, 1, O);
    break;
  case 485:
    // V6_vaddhw, V6_vaddhw_128B, V6_vadduhw, V6_vadduhw_128B, V6_vaddw, V6_v...
    O << ".w = vadd(";
    printOperand(MI, 1, O);
    break;
  case 486:
    // V6_vaddubsat, V6_vaddubsat_128B, V6_vaddubsat_dv, V6_vaddubsat_dv_128B
    O << ".ub = vadd(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub):sat";
    return;
    break;
  case 487:
    // V6_vadduhsat, V6_vadduhsat_128B, V6_vadduhsat_dv, V6_vadduhsat_dv_128B
    O << ".uh = vadd(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh):sat";
    return;
    break;
  case 488:
    // V6_valignb, V6_valignb_128B, V6_valignbi, V6_valignbi_128B
    O << " = valign(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 489:
    // V6_vand, V6_vand_128B, V6_vandqrt, V6_vandqrt_128B, V6_vandvrt, V6_van...
    O << " = vand(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 490:
    // V6_vandqrt_acc, V6_vandqrt_acc_128B, V6_vandvrt_acc, V6_vandvrt_acc_12...
    O << " |= vand(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 491:
    // V6_vaslh, V6_vaslh_128B, V6_vaslhv, V6_vaslhv_128B
    O << ".h = vasl(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 492:
    // V6_vaslw, V6_vaslw_128B, V6_vaslwv, V6_vaslwv_128B
    O << ".w = vasl(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 493:
    // V6_vaslw_acc, V6_vaslw_acc_128B
    O << ".w += vasl(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 494:
    // V6_vasrh, V6_vasrh_128B, V6_vasrhv, V6_vasrhv_128B, V6_vasrwh, V6_vasr...
    O << ".h = vasr(";
    printOperand(MI, 1, O);
    break;
  case 495:
    // V6_vasrhbrndsat, V6_vasrhbrndsat_128B
    O << ".b = vasr(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    O << "):rnd:sat";
    return;
    break;
  case 496:
    // V6_vasrhubrndsat, V6_vasrhubrndsat_128B, V6_vasrhubsat, V6_vasrhubsat_...
    O << ".ub = vasr(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 497:
    // V6_vasrw, V6_vasrw_128B, V6_vasrwv, V6_vasrwv_128B
    O << ".w = vasr(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 498:
    // V6_vasrw_acc, V6_vasrw_acc_128B
    O << ".w += vasr(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 499:
    // V6_vasrwuhsat, V6_vasrwuhsat_128B
    O << ".uh = vasr(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 500:
    // V6_vavgh, V6_vavgh_128B, V6_vavghrnd, V6_vavghrnd_128B
    O << ".h = vavg(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 501:
    // V6_vavgub, V6_vavgub_128B, V6_vavgubrnd, V6_vavgubrnd_128B
    O << ".ub = vavg(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    break;
  case 502:
    // V6_vavguh, V6_vavguh_128B, V6_vavguhrnd, V6_vavguhrnd_128B
    O << ".uh = vavg(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    break;
  case 503:
    // V6_vavgw, V6_vavgw_128B, V6_vavgwrnd, V6_vavgwrnd_128B
    O << ".w = vavg(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 504:
    // V6_vcl0h, V6_vcl0h_128B
    O << ".uh = vcl0(";
    printOperand(MI, 1, O);
    O << ".uh)";
    return;
    break;
  case 505:
    // V6_vcl0w, V6_vcl0w_128B
    O << ".uw = vcl0(";
    printOperand(MI, 1, O);
    O << ".uw)";
    return;
    break;
  case 506:
    // V6_vcombine, V6_vcombine_128B
    O << " = vcombine(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 507:
    // V6_vdealb, V6_vdealb_128B
    O << ".b = vdeal(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 508:
    // V6_vdealb4w, V6_vdealb4w_128B
    O << ".b = vdeale(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 509:
    // V6_vdealh, V6_vdealh_128B
    O << ".h = vdeal(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 510:
    // V6_vdealvdd, V6_vdealvdd_128B
    O << " = vdeal(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 511:
    // V6_vdelta, V6_vdelta_128B
    O << " = vdelta(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 512:
    // V6_vdmpybus, V6_vdmpybus_128B, V6_vdmpybus_dv, V6_vdmpybus_dv_128B
    O << ".h = vdmpy(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 513:
    // V6_vdmpybus_acc, V6_vdmpybus_acc_128B, V6_vdmpybus_dv_acc, V6_vdmpybus...
    O << ".h += vdmpy(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".b)";
    return;
    break;
  case 514:
    // V6_vdmpyhb, V6_vdmpyhb_128B, V6_vdmpyhb_dv, V6_vdmpyhb_dv_128B, V6_vdm...
    O << ".w = vdmpy(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 515:
    // V6_vdmpyhb_acc, V6_vdmpyhb_acc_128B, V6_vdmpyhb_dv_acc, V6_vdmpyhb_dv_...
    O << ".w += vdmpy(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 516:
    // V6_vdsaduh, V6_vdsaduh_128B
    O << ".uw = vdsad(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 517:
    // V6_vdsaduh_acc, V6_vdsaduh_acc_128B
    O << ".uw += vdsad(";
    printOperand(MI, 2, O);
    O << ".uh,";
    printOperand(MI, 3, O);
    O << ".uh)";
    return;
    break;
  case 518:
    // V6_veqb, V6_veqb_128B, V6_veqh, V6_veqh_128B, V6_veqw, V6_veqw_128B
    O << " = vcmp.eq(";
    printOperand(MI, 1, O);
    break;
  case 519:
    // V6_veqb_and, V6_veqb_and_128B, V6_veqh_and, V6_veqh_and_128B, V6_veqw_...
    O << " &= vcmp.eq(";
    printOperand(MI, 2, O);
    break;
  case 520:
    // V6_veqb_or, V6_veqb_or_128B, V6_veqh_or, V6_veqh_or_128B, V6_veqw_or, ...
    O << " |= vcmp.eq(";
    printOperand(MI, 2, O);
    break;
  case 521:
    // V6_veqb_xor, V6_veqb_xor_128B, V6_veqh_xor, V6_veqh_xor_128B, V6_veqw_...
    O << " ^= vcmp.eq(";
    printOperand(MI, 2, O);
    break;
  case 522:
    // V6_vgtb, V6_vgtb_128B, V6_vgth, V6_vgth_128B, V6_vgtub, V6_vgtub_128B,...
    O << " = vcmp.gt(";
    printOperand(MI, 1, O);
    break;
  case 523:
    // V6_vgtb_and, V6_vgtb_and_128B, V6_vgth_and, V6_vgth_and_128B, V6_vgtub...
    O << " &= vcmp.gt(";
    printOperand(MI, 2, O);
    break;
  case 524:
    // V6_vgtb_or, V6_vgtb_or_128B, V6_vgth_or, V6_vgth_or_128B, V6_vgtub_or,...
    O << " |= vcmp.gt(";
    printOperand(MI, 2, O);
    break;
  case 525:
    // V6_vgtb_xor, V6_vgtb_xor_128B, V6_vgth_xor, V6_vgth_xor_128B, V6_vgtub...
    O << " ^= vcmp.gt(";
    printOperand(MI, 2, O);
    break;
  case 526:
    // V6_vinsertwr, V6_vinsertwr_128B
    O << ".w = vinsert(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 527:
    // V6_vlalignb, V6_vlalignb_128B, V6_vlalignbi, V6_vlalignbi_128B
    O << " = vlalign(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 528:
    // V6_vlsrh, V6_vlsrh_128B
    O << ".uh = vlsr(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 529:
    // V6_vlsrhv, V6_vlsrhv_128B
    O << ".h = vlsr(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 530:
    // V6_vlsrw, V6_vlsrw_128B
    O << ".uw = vlsr(";
    printOperand(MI, 1, O);
    O << ".uw,";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 531:
    // V6_vlsrwv, V6_vlsrwv_128B
    O << ".w = vlsr(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 532:
    // V6_vlutvvb, V6_vlutvvb_128B
    O << ".b = vlut32(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 533:
    // V6_vlutvvb_oracc, V6_vlutvvb_oracc_128B
    O << ".b |= vlut32(";
    printOperand(MI, 2, O);
    O << ".b,";
    printOperand(MI, 3, O);
    O << ".b,";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 534:
    // V6_vlutvwh, V6_vlutvwh_128B
    O << ".h = vlut16(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 535:
    // V6_vlutvwh_oracc, V6_vlutvwh_oracc_128B
    O << ".h |= vlut16(";
    printOperand(MI, 2, O);
    O << ".b,";
    printOperand(MI, 3, O);
    O << ".h,";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 536:
    // V6_vmaxh, V6_vmaxh_128B
    O << ".h = vmax(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 537:
    // V6_vmaxub, V6_vmaxub_128B
    O << ".ub = vmax(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 538:
    // V6_vmaxuh, V6_vmaxuh_128B
    O << ".uh = vmax(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 539:
    // V6_vmaxw, V6_vmaxw_128B
    O << ".w = vmax(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 540:
    // V6_vminh, V6_vminh_128B
    O << ".h = vmin(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 541:
    // V6_vminub, V6_vminub_128B
    O << ".ub = vmin(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 542:
    // V6_vminuh, V6_vminuh_128B
    O << ".uh = vmin(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 543:
    // V6_vminw, V6_vminw_128B
    O << ".w = vmin(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 544:
    // V6_vmpabus, V6_vmpabus_128B, V6_vmpabusv, V6_vmpabusv_128B, V6_vmpabuu...
    O << ".h = vmpa(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    break;
  case 545:
    // V6_vmpabus_acc, V6_vmpabus_acc_128B
    O << ".h += vmpa(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".b)";
    return;
    break;
  case 546:
    // V6_vmpahb, V6_vmpahb_128B
    O << ".w = vmpa(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 547:
    // V6_vmpahb_acc, V6_vmpahb_acc_128B
    O << ".w += vmpa(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    O << ".b)";
    return;
    break;
  case 548:
    // V6_vmpybus, V6_vmpybus_128B, V6_vmpybusv, V6_vmpybusv_128B, V6_vmpybv,...
    O << ".h = vmpy(";
    printOperand(MI, 1, O);
    break;
  case 549:
    // V6_vmpybus_acc, V6_vmpybus_acc_128B, V6_vmpybusv_acc, V6_vmpybusv_acc_...
    O << ".h += vmpy(";
    printOperand(MI, 2, O);
    break;
  case 550:
    // V6_vmpyewuh, V6_vmpyewuh_128B
    O << ".w = vmpye(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 551:
    // V6_vmpyh, V6_vmpyh_128B, V6_vmpyhus, V6_vmpyhus_128B, V6_vmpyhv, V6_vm...
    O << ".w = vmpy(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 552:
    // V6_vmpyhsat_acc, V6_vmpyhsat_acc_128B, V6_vmpyhus_acc, V6_vmpyhus_acc_...
    O << ".w += vmpy(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 553:
    // V6_vmpyieoh, V6_vmpyieoh_128B
    O << ".w = vmpyieo(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 554:
    // V6_vmpyiewh_acc, V6_vmpyiewh_acc_128B, V6_vmpyiewuh_acc, V6_vmpyiewuh_...
    O << ".w += vmpyie(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 555:
    // V6_vmpyiewuh, V6_vmpyiewuh_128B
    O << ".w = vmpyie(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 556:
    // V6_vmpyih, V6_vmpyih_128B, V6_vmpyihb, V6_vmpyihb_128B
    O << ".h = vmpyi(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 557:
    // V6_vmpyih_acc, V6_vmpyih_acc_128B, V6_vmpyihb_acc, V6_vmpyihb_acc_128B
    O << ".h += vmpyi(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 558:
    // V6_vmpyiowh, V6_vmpyiowh_128B
    O << ".w = vmpyio(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 559:
    // V6_vmpyiwb, V6_vmpyiwb_128B, V6_vmpyiwh, V6_vmpyiwh_128B
    O << ".w = vmpyi(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 560:
    // V6_vmpyiwb_acc, V6_vmpyiwb_acc_128B, V6_vmpyiwh_acc, V6_vmpyiwh_acc_12...
    O << ".w += vmpyi(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 561:
    // V6_vmpyowh, V6_vmpyowh_128B, V6_vmpyowh_rnd, V6_vmpyowh_rnd_128B
    O << ".w = vmpyo(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 562:
    // V6_vmpyowh_rnd_sacc, V6_vmpyowh_rnd_sacc_128B, V6_vmpyowh_sacc, V6_vmp...
    O << ".w += vmpyo(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 563:
    // V6_vmpyub, V6_vmpyub_128B, V6_vmpyubv, V6_vmpyubv_128B
    O << ".uh = vmpy(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 564:
    // V6_vmpyub_acc, V6_vmpyub_acc_128B, V6_vmpyubv_acc, V6_vmpyubv_acc_128B
    O << ".uh += vmpy(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".ub)";
    return;
    break;
  case 565:
    // V6_vmpyuh, V6_vmpyuh_128B, V6_vmpyuhv, V6_vmpyuhv_128B
    O << ".uw = vmpy(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 566:
    // V6_vmpyuh_acc, V6_vmpyuh_acc_128B, V6_vmpyuhv_acc, V6_vmpyuhv_acc_128B
    O << ".uw += vmpy(";
    printOperand(MI, 2, O);
    O << ".uh,";
    printOperand(MI, 3, O);
    O << ".uh)";
    return;
    break;
  case 567:
    // V6_vnavgh, V6_vnavgh_128B
    O << ".h = vnavg(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 568:
    // V6_vnavgub, V6_vnavgub_128B
    O << ".b = vnavg(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 569:
    // V6_vnavgw, V6_vnavgw_128B
    O << ".w = vnavg(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 570:
    // V6_vnormamth, V6_vnormamth_128B
    O << ".h = vnormamt(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 571:
    // V6_vnormamtw, V6_vnormamtw_128B
    O << ".w = vnormamt(";
    printOperand(MI, 1, O);
    O << ".w)";
    return;
    break;
  case 572:
    // V6_vnot, V6_vnot_128B
    O << " = vnot(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 573:
    // V6_vor, V6_vor_128B
    O << " = vor(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 574:
    // V6_vpackeb, V6_vpackeb_128B
    O << ".b = vpacke(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 575:
    // V6_vpackeh, V6_vpackeh_128B
    O << ".h = vpacke(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 576:
    // V6_vpackhb_sat, V6_vpackhb_sat_128B
    O << ".b = vpack(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h):sat";
    return;
    break;
  case 577:
    // V6_vpackhub_sat, V6_vpackhub_sat_128B
    O << ".ub = vpack(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h):sat";
    return;
    break;
  case 578:
    // V6_vpackob, V6_vpackob_128B
    O << ".b = vpacko(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 579:
    // V6_vpackoh, V6_vpackoh_128B
    O << ".h = vpacko(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 580:
    // V6_vpackwh_sat, V6_vpackwh_sat_128B
    O << ".h = vpack(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w):sat";
    return;
    break;
  case 581:
    // V6_vpackwuh_sat, V6_vpackwuh_sat_128B
    O << ".uh = vpack(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w):sat";
    return;
    break;
  case 582:
    // V6_vpopcounth, V6_vpopcounth_128B
    O << ".h = vpopcount(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 583:
    // V6_vrdelta, V6_vrdelta_128B
    O << " = vrdelta(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 584:
    // V6_vrmpybus, V6_vrmpybus_128B, V6_vrmpybusi, V6_vrmpybusi_128B, V6_vrm...
    O << ".w = vrmpy(";
    printOperand(MI, 1, O);
    break;
  case 585:
    // V6_vrmpybus_acc, V6_vrmpybus_acc_128B, V6_vrmpybusi_acc, V6_vrmpybusi_...
    O << ".w += vrmpy(";
    printOperand(MI, 2, O);
    break;
  case 586:
    // V6_vrmpyub, V6_vrmpyub_128B, V6_vrmpyubi, V6_vrmpyubi_128B, V6_vrmpyub...
    O << ".uw = vrmpy(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    break;
  case 587:
    // V6_vrmpyub_acc, V6_vrmpyub_acc_128B, V6_vrmpyubi_acc, V6_vrmpyubi_acc_...
    O << ".uw += vrmpy(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    break;
  case 588:
    // V6_vror, V6_vror_128B
    O << " = vror(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 589:
    // V6_vroundhb, V6_vroundhb_128B
    O << ".b = vround(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h):sat";
    return;
    break;
  case 590:
    // V6_vroundhub, V6_vroundhub_128B
    O << ".ub = vround(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h):sat";
    return;
    break;
  case 591:
    // V6_vroundwh, V6_vroundwh_128B
    O << ".h = vround(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w):sat";
    return;
    break;
  case 592:
    // V6_vroundwuh, V6_vroundwuh_128B
    O << ".uh = vround(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w):sat";
    return;
    break;
  case 593:
    // V6_vrsadubi, V6_vrsadubi_128B
    O << ".uw = vrsad(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub,#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 594:
    // V6_vrsadubi_acc, V6_vrsadubi_acc_128B
    O << ".uw += vrsad(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".ub,#";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 595:
    // V6_vsathub, V6_vsathub_128B
    O << ".ub = vsat(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 596:
    // V6_vsatwh, V6_vsatwh_128B
    O << ".h = vsat(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 597:
    // V6_vsb, V6_vsb_128B
    O << ".h = vsxt(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 598:
    // V6_vsh, V6_vsh_128B
    O << ".w = vsxt(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 599:
    // V6_vshufeh, V6_vshufeh_128B
    O << ".h = vshuffe(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 600:
    // V6_vshuffb, V6_vshuffb_128B
    O << ".b = vshuff(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 601:
    // V6_vshuffeb, V6_vshuffeb_128B
    O << ".b = vshuffe(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 602:
    // V6_vshuffh, V6_vshuffh_128B
    O << ".h = vshuff(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 603:
    // V6_vshuffob, V6_vshuffob_128B
    O << ".b = vshuffo(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 604:
    // V6_vshuffvdd, V6_vshuffvdd_128B
    O << " = vshuff(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 605:
    // V6_vshufoeb, V6_vshufoeb_128B
    O << ".b = vshuffoe(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 606:
    // V6_vshufoeh, V6_vshufoeh_128B
    O << ".h = vshuffoe(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 607:
    // V6_vshufoh, V6_vshufoh_128B
    O << ".h = vshuffo(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 608:
    // V6_vsubb, V6_vsubb_128B, V6_vsubb_dv, V6_vsubb_dv_128B
    O << ".b = vsub(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 609:
    // V6_vsubh, V6_vsubh_128B, V6_vsubh_dv, V6_vsubh_dv_128B, V6_vsubhsat, V...
    O << ".h = vsub(";
    printOperand(MI, 1, O);
    break;
  case 610:
    // V6_vsubhw, V6_vsubhw_128B, V6_vsubuhw, V6_vsubuhw_128B, V6_vsubw, V6_v...
    O << ".w = vsub(";
    printOperand(MI, 1, O);
    break;
  case 611:
    // V6_vsububsat, V6_vsububsat_128B, V6_vsububsat_dv, V6_vsububsat_dv_128B
    O << ".ub = vsub(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub):sat";
    return;
    break;
  case 612:
    // V6_vsubuhsat, V6_vsubuhsat_128B, V6_vsubuhsat_dv, V6_vsubuhsat_dv_128B
    O << ".uh = vsub(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh):sat";
    return;
    break;
  case 613:
    // V6_vswap, V6_vswap_128B
    O << " = vswap(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 614:
    // V6_vtmpyb, V6_vtmpyb_128B, V6_vtmpybus, V6_vtmpybus_128B
    O << ".h = vtmpy(";
    printOperand(MI, 1, O);
    break;
  case 615:
    // V6_vtmpyb_acc, V6_vtmpyb_acc_128B, V6_vtmpybus_acc, V6_vtmpybus_acc_12...
    O << ".h += vtmpy(";
    printOperand(MI, 2, O);
    break;
  case 616:
    // V6_vtmpyhb, V6_vtmpyhb_128B
    O << ".w = vtmpy(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 617:
    // V6_vtmpyhb_acc, V6_vtmpyhb_acc_128B
    O << ".w += vtmpy(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    O << ".b)";
    return;
    break;
  case 618:
    // V6_vunpackb, V6_vunpackb_128B
    O << ".h = vunpack(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 619:
    // V6_vunpackh, V6_vunpackh_128B
    O << ".w = vunpack(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 620:
    // V6_vunpackob, V6_vunpackob_128B
    O << ".h |= vunpacko(";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 621:
    // V6_vunpackoh, V6_vunpackoh_128B
    O << ".w |= vunpacko(";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 622:
    // V6_vunpackub, V6_vunpackub_128B
    O << ".uh = vunpack(";
    printOperand(MI, 1, O);
    O << ".ub)";
    return;
    break;
  case 623:
    // V6_vunpackuh, V6_vunpackuh_128B
    O << ".uw = vunpack(";
    printOperand(MI, 1, O);
    O << ".uh)";
    return;
    break;
  case 624:
    // V6_vxor, V6_vxor_128B
    O << " = vxor(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 625:
    // V6_vzb, V6_vzb_128B
    O << ".uh = vzxt(";
    printOperand(MI, 1, O);
    O << ".ub)";
    return;
    break;
  case 626:
    // V6_vzh, V6_vzh_128B
    O << ".uw = vzxt(";
    printOperand(MI, 1, O);
    O << ".uh)";
    return;
    break;
  case 627:
    // Y5_l2locka
    O << " = l2locka(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  }


  // Fragment 2 encoded into 8 bits for 131 unique commands.
  switch ((Bits >> 24) & 255) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_negp, A2_svaddh, A2_svavgh, A2_svnavgh, A2_svsubh,...
    O << ')';
    return;
    break;
  case 1:
    // A2_abssat, A2_negsat, A2_roundsat, A2_svaddhs, A2_svsubhs, A2_vabshsat...
    O << "):sat";
    return;
    break;
  case 2:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    printOperand(MI, 1, O);
    break;
  case 3:
    // A2_and, A2_andp, A2_combinew, A2_or, A2_orp, A2_subri, A2_vcmpbeq, A2_...
    O << ", ";
    break;
  case 4:
    // A2_andir, A2_orir, A4_bitspliti, A4_cmpbeqi, A4_cmpbgti, A4_cmpbgtui, ...
    O << ", #";
    break;
  case 5:
    // A2_combine_hh, A2_combine_hl, M2_mpy_acc_hh_s0, M2_mpy_acc_hh_s1, M2_m...
    O << ".h, ";
    break;
  case 6:
    // A2_combine_lh, A2_combine_ll, M2_mpy_acc_lh_s0, M2_mpy_acc_lh_s1, M2_m...
    O << ".l, ";
    break;
  case 7:
    // A2_combineii, A2_tfrsi, A4_combineir, L4_add_memopb_io, L4_add_memoph_...
    printExtOperand(MI, 1, O);
    break;
  case 8:
    // A2_paddf, A2_paddfnew, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    O << " = add(";
    printOperand(MI, 2, O);
    break;
  case 9:
    // A2_pandf, A2_pandfnew, A2_pandt, A2_pandtnew
    O << " = and(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 10:
    // A2_porf, A2_porfnew, A2_port, A2_portnew
    O << " = or(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 11:
    // A2_psubf, A2_psubfnew, A2_psubt, A2_psubtnew
    O << " = sub(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 12:
    // A2_pxorf, A2_pxorfnew, A2_pxort, A2_pxortnew
    O << " = xor(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 13:
    // A2_svavghs, A2_vavghr, A2_vavgubr, A2_vavguhr, A2_vavguwr, A2_vavgwr
    O << "):rnd";
    return;
    break;
  case 14:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrrcr, A4_tfrcpp, A4_tfrpcp, ARGEXTEND...
    return;
    break;
  case 15:
    // A2_tfrf, A2_tfrfnew, A2_tfrpf, A2_tfrpfnew, A2_tfrpt, A2_tfrptnew, A2_...
    O << " = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 16:
    // A2_vavghcr, A2_vavgwcr
    O << "):crnd";
    return;
    break;
  case 17:
    // A2_vnavghcr, A2_vnavgwcr
    O << "):crnd:sat";
    return;
    break;
  case 18:
    // A2_vnavghr, A2_vnavgwr, M2_cmpyrs_s0, M2_mmachs_rs0, M2_mmacls_rs0, M2...
    O << "):rnd:sat";
    return;
    break;
  case 19:
    // A4_addp_c, A4_subp_c, L2_loadalignb_io, L2_loadalignb_pbr, L2_loadalig...
    printOperand(MI, 2, O);
    break;
  case 20:
    // A4_andn, A4_andnp, A4_orn, A4_ornp, M4_and_andn, M4_or_andn, M4_xor_an...
    O << ", ~";
    break;
  case 21:
    // A4_boundscheck_hi
    O << "):raw:hi";
    return;
    break;
  case 22:
    // A4_boundscheck_lo
    O << "):raw:lo";
    return;
    break;
  case 23:
    // A4_paslhf, A4_paslhfnew, A4_paslht, A4_paslhtnew
    O << " = aslh(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 24:
    // A4_pasrhf, A4_pasrhfnew, A4_pasrht, A4_pasrhtnew
    O << " = asrh(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 25:
    // A4_psxtbf, A4_psxtbfnew, A4_psxtbt, A4_psxtbtnew
    O << " = sxtb(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 26:
    // A4_psxthf, A4_psxthfnew, A4_psxtht, A4_psxthtnew
    O << " = sxth(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 27:
    // A4_pzxtbf, A4_pzxtbfnew, A4_pzxtbt, A4_pzxtbtnew
    O << " = zxtb(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 28:
    // A4_pzxthf, A4_pzxthfnew, A4_pzxtht, A4_pzxthtnew
    O << " = zxth(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 29:
    // C2_andn, C2_orn
    O << ", !";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 30:
    // C2_ccombinewf, C2_ccombinewnewf, C2_ccombinewnewt, C2_ccombinewt
    O << " = combine(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 31:
    // C2_cmoveif, C2_cmoveit, C2_cmovenewif, C2_cmovenewit, TFRI_cNotPt_f, T...
    O << " = #";
    printExtOperand(MI, 2, O);
    return;
    break;
  case 32:
    // C4_and_and, C4_and_andn, C4_or_and, C4_or_andn, S4_or_andix
    O << ", and(";
    printOperand(MI, 2, O);
    break;
  case 33:
    // C4_and_or, C4_and_orn, C4_or_or, C4_or_orn
    O << ", or(";
    printOperand(MI, 2, O);
    break;
  case 34:
    // CONST32, FCONST32_nsdata, HI_GOT, HI_GOTREL, LO_GOT, LO_GOTREL
    printGlobalOperand(MI, 1, O);
    break;
  case 35:
    // F2_conv_df2d_chop, F2_conv_df2ud_chop, F2_conv_df2uw_chop, F2_conv_df2...
    O << "):chop";
    return;
    break;
  case 36:
    // F2_dfimm_n, F2_sfimm_n
    O << "):neg";
    return;
    break;
  case 37:
    // F2_dfimm_p, F2_sfimm_p
    O << "):pos";
    return;
    break;
  case 38:
    // F2_sffma_lib, F2_sffms_lib
    O << "):lib";
    return;
    break;
  case 39:
    // J4_cmpeq_f_jumpnv_nt, J4_cmpeq_t_jumpnv_nt, J4_cmpeqi_f_jumpnv_nt, J4_...
    O << ")) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 40:
    // J4_cmpeq_f_jumpnv_t, J4_cmpeq_t_jumpnv_t, J4_cmpeqi_f_jumpnv_t, J4_cmp...
    O << ")) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 41:
    // J4_cmpeqi_fp0_jump_nt, J4_cmpgti_fp0_jump_nt, J4_cmpgtui_fp0_jump_nt
    O << "); if (!p0.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 42:
    // J4_cmpeqi_fp0_jump_t, J4_cmpgti_fp0_jump_t, J4_cmpgtui_fp0_jump_t
    O << "); if (!p0.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 43:
    // J4_cmpeqi_fp1_jump_nt, J4_cmpgti_fp1_jump_nt, J4_cmpgtui_fp1_jump_nt
    O << "); if (!p1.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 44:
    // J4_cmpeqi_fp1_jump_t, J4_cmpgti_fp1_jump_t, J4_cmpgtui_fp1_jump_t
    O << "); if (!p1.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 45:
    // J4_cmpeqi_tp0_jump_nt, J4_cmpgti_tp0_jump_nt, J4_cmpgtui_tp0_jump_nt
    O << "); if (p0.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 46:
    // J4_cmpeqi_tp0_jump_t, J4_cmpgti_tp0_jump_t, J4_cmpgtui_tp0_jump_t
    O << "); if (p0.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 47:
    // J4_cmpeqi_tp1_jump_nt, J4_cmpgti_tp1_jump_nt, J4_cmpgtui_tp1_jump_nt
    O << "); if (p1.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 48:
    // J4_cmpeqi_tp1_jump_t, J4_cmpgti_tp1_jump_t, J4_cmpgtui_tp1_jump_t
    O << "); if (p1.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 49:
    // J4_jumpsetr
    O << " ; jump ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 50:
    // L2_loadalignb_pcr, L2_loadalignb_pi, L2_loadalignb_pr, L2_loadalignh_p...
    printOperand(MI, 3, O);
    break;
  case 51:
    // L2_ploadrbf_io, L2_ploadrbf_pi, L2_ploadrbfnew_io, L2_ploadrbfnew_pi, ...
    O << " = memb(";
    break;
  case 52:
    // L2_ploadrdf_io, L2_ploadrdf_pi, L2_ploadrdfnew_io, L2_ploadrdfnew_pi, ...
    O << " = memd(";
    break;
  case 53:
    // L2_ploadrhf_io, L2_ploadrhf_pi, L2_ploadrhfnew_io, L2_ploadrhfnew_pi, ...
    O << " = memh(";
    break;
  case 54:
    // L2_ploadrif_io, L2_ploadrif_pi, L2_ploadrifnew_io, L2_ploadrifnew_pi, ...
    O << " = memw(";
    break;
  case 55:
    // L2_ploadrubf_io, L2_ploadrubf_pi, L2_ploadrubfnew_io, L2_ploadrubfnew_...
    O << " = memub(";
    break;
  case 56:
    // L2_ploadruhf_io, L2_ploadruhf_pi, L2_ploadruhfnew_io, L2_ploadruhfnew_...
    O << " = memuh(";
    break;
  case 57:
    // L4_ploadrbf_abs, L4_ploadrbfnew_abs, L4_ploadrbt_abs, L4_ploadrbtnew_a...
    O << " = memb(#";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 58:
    // L4_ploadrdf_abs, L4_ploadrdfnew_abs, L4_ploadrdt_abs, L4_ploadrdtnew_a...
    O << " = memd(#";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 59:
    // L4_ploadrhf_abs, L4_ploadrhfnew_abs, L4_ploadrht_abs, L4_ploadrhtnew_a...
    O << " = memh(#";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 60:
    // L4_ploadrif_abs, L4_ploadrifnew_abs, L4_ploadrit_abs, L4_ploadritnew_a...
    O << " = memw(#";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 61:
    // L4_ploadrubf_abs, L4_ploadrubfnew_abs, L4_ploadrubt_abs, L4_ploadrubtn...
    O << " = memub(#";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 62:
    // L4_ploadruhf_abs, L4_ploadruhfnew_abs, L4_ploadruht_abs, L4_ploadruhtn...
    O << " = memuh(#";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 63:
    // LDrivv_indexed
    prints4_6ImmOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 64:
    // LDrivv_indexed_128B
    prints4_7ImmOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 65:
    // M2_cmacs_s1, M2_cmpys_s1, M2_cnacs_s1, M2_mmachs_s1, M2_mmacls_s1, M2_...
    O << "):<<1:sat";
    return;
    break;
  case 66:
    // M2_cmacsc_s0, M2_cmpysc_s0, M2_cnacsc_s0
    O << "*):sat";
    return;
    break;
  case 67:
    // M2_cmacsc_s1, M2_cmpysc_s1, M2_cnacsc_s1
    O << "*):<<1:sat";
    return;
    break;
  case 68:
    // M2_cmpyrs_s1, M2_mmachs_rs1, M2_mmacls_rs1, M2_mmacuhs_rs1, M2_mmaculs...
    O << "):<<1:rnd:sat";
    return;
    break;
  case 69:
    // M2_cmpyrsc_s0
    O << "*):rnd:sat";
    return;
    break;
  case 70:
    // M2_cmpyrsc_s1, M4_cmpyi_whc, M4_cmpyr_whc
    O << "*):<<1:rnd:sat";
    return;
    break;
  case 71:
    // M2_vrcmaci_s0c, M2_vrcmacr_s0c, M2_vrcmpyi_s0c, M2_vrcmpyr_s0c
    O << "*)";
    return;
    break;
  case 72:
    // M2_vrcmpys_acc_s1_h, M2_vrcmpys_s1_h
    O << "):<<1:sat:raw:hi";
    return;
    break;
  case 73:
    // M2_vrcmpys_acc_s1_l, M2_vrcmpys_s1_l
    O << "):<<1:sat:raw:lo";
    return;
    break;
  case 74:
    // M2_vrcmpys_s1rp_h
    O << "):<<1:rnd:sat:raw:hi";
    return;
    break;
  case 75:
    // M2_vrcmpys_s1rp_l
    O << "):<<1:rnd:sat:raw:lo";
    return;
    break;
  case 76:
    // M4_mpyri_addi, M4_mpyrr_addi
    O << ", mpyi(";
    printOperand(MI, 2, O);
    break;
  case 77:
    // M4_vrmpyeh_acc_s1, M4_vrmpyeh_s1, M4_vrmpyoh_acc_s1, M4_vrmpyoh_s1
    O << "):<<1";
    return;
    break;
  case 78:
    // S2_storerb_pci_pseudo, S2_storerd_pci_pseudo, S2_storerf_pci_pseudo, S...
    printOperand(MI, 4, O);
    O << ":circ(";
    printOperand(MI, 3, O);
    O << ")) = ";
    printOperand(MI, 2, O);
    O << "\"";
    return;
    break;
  case 79:
    // S2_storerbnew_pbr, S2_storerbnew_pci, S2_storerbnew_pcr, S2_storerbnew...
    O << ".new";
    return;
    break;
  case 80:
    // S2_storerf_pbr, S2_storerf_pci, S2_storerf_pcr, S2_storerfgp, S4_pstor...
    O << ".h";
    return;
    break;
  case 81:
    // S2_storew_locked, S4_stored_locked, TFR_PdFalse
    printOperand(MI, 0, O);
    break;
  case 82:
    // S2_tableidxb, S2_tableidxd, S2_tableidxh, S2_tableidxw, S5_asrhub_rnd_...
    O << "):raw";
    return;
    break;
  case 83:
    // S4_addi_asl_ri, S4_andi_asl_ri, S4_ori_asl_ri, S4_subi_asl_ri
    O << ", asl(";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 84:
    // S4_addi_lsr_ri, S4_andi_lsr_ri, S4_ori_lsr_ri, S4_subi_lsr_ri
    O << ", lsr(";
    printOperand(MI, 2, O);
    O << ", #";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 85:
    // S4_vxaddsubhr, S4_vxsubaddhr
    O << "):rnd:>>1:sat";
    return;
    break;
  case 86:
    // S5_vasrhrnd_goodsyntax, V6_valignbi, V6_valignbi_128B, V6_vlalignbi, V...
    O << ",#";
    break;
  case 87:
    // STrivv_indexed, V6_vS32Ub_ai, V6_vS32b_ai, V6_vS32b_new_ai, V6_vS32b_n...
    prints4_6ImmOperand(MI, 1, O);
    break;
  case 88:
    // STrivv_indexed_128B, V6_vS32Ub_ai_128B, V6_vS32b_ai_128B, V6_vS32b_new...
    prints4_7ImmOperand(MI, 1, O);
    break;
  case 89:
    // V4_SA1_and1
    O << ", #1)";
    return;
    break;
  case 90:
    // V4_SA1_combinerz
    O << ", #0)";
    return;
    break;
  case 91:
    // V4_SA1_zxtb
    O << ", #255)";
    return;
    break;
  case 92:
    // V4_SS1_storeb_io, V4_SS1_storew_io, V4_SS2_storeh_io
    O << ") = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 93:
    // V4_SS2_storebi0, V4_SS2_storewi0
    O << ")=#0";
    return;
    break;
  case 94:
    // V4_SS2_storebi1, V4_SS2_storewi1
    O << ")=#1";
    return;
    break;
  case 95:
    // V6_pred_and, V6_pred_and_128B, V6_pred_or, V6_pred_or_128B, V6_valignb...
    O << ',';
    break;
  case 96:
    // V6_pred_and_n, V6_pred_and_n_128B, V6_pred_or_n, V6_pred_or_n_128B
    O << ",!";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 97:
    // V6_vS32Ub_pi, V6_vS32b_new_pi, V6_vS32b_nt_new_pi, V6_vS32b_nt_pi, V6_...
    prints3_6ImmOperand(MI, 2, O);
    break;
  case 98:
    // V6_vS32Ub_pi_128B, V6_vS32b_new_pi_128B, V6_vS32b_nt_new_pi_128B, V6_v...
    prints3_7ImmOperand(MI, 2, O);
    break;
  case 99:
    // V6_vabsdiffh, V6_vabsdiffh_128B, V6_vaddh, V6_vaddh_128B, V6_vaddh_dv,...
    O << ".h,";
    break;
  case 100:
    // V6_vabsdiffuh, V6_vabsdiffuh_128B, V6_vadduhw, V6_vadduhw_128B, V6_vgt...
    O << ".uh,";
    break;
  case 101:
    // V6_vabsh, V6_vabsh_128B, V6_vaslhv, V6_vaslhv_128B, V6_vavgh, V6_vavgh...
    O << ".h)";
    return;
    break;
  case 102:
    // V6_vabsh_sat, V6_vabsh_sat_128B, V6_vdmpyhisat, V6_vdmpyhisat_128B, V6...
    O << ".h):sat";
    return;
    break;
  case 103:
    // V6_vabsw, V6_vabsw_128B, V6_vaslwv, V6_vaslwv_128B, V6_vasrwv, V6_vasr...
    O << ".w)";
    return;
    break;
  case 104:
    // V6_vabsw_sat, V6_vabsw_sat_128B
    O << ".w):sat";
    return;
    break;
  case 105:
    // V6_vaddbnq, V6_vaddbnq_128B, V6_vaddbq, V6_vaddbq_128B
    O << ".b += ";
    printOperand(MI, 3, O);
    O << ".b";
    return;
    break;
  case 106:
    // V6_vaddhnq, V6_vaddhnq_128B, V6_vaddhq, V6_vaddhq_128B
    O << ".h += ";
    printOperand(MI, 3, O);
    O << ".h";
    return;
    break;
  case 107:
    // V6_vaddubh, V6_vaddubh_128B, V6_vgtub, V6_vgtub_128B, V6_vgtub_and, V6...
    O << ".ub,";
    break;
  case 108:
    // V6_vaddw, V6_vaddw_128B, V6_vaddw_dv, V6_vaddw_dv_128B, V6_vaddwsat, V...
    O << ".w,";
    break;
  case 109:
    // V6_vaddwnq, V6_vaddwnq_128B, V6_vaddwq, V6_vaddwq_128B
    O << ".w += ";
    printOperand(MI, 3, O);
    O << ".w";
    return;
    break;
  case 110:
    // V6_vavghrnd, V6_vavghrnd_128B
    O << ".h):rnd";
    return;
    break;
  case 111:
    // V6_vavgub, V6_vavgub_128B, V6_vmpabuuv, V6_vmpabuuv_128B, V6_vrmpyub, ...
    O << ".ub)";
    return;
    break;
  case 112:
    // V6_vavgubrnd, V6_vavgubrnd_128B
    O << ".ub):rnd";
    return;
    break;
  case 113:
    // V6_vavguh, V6_vavguh_128B, V6_vmpyhus, V6_vmpyhus_128B, V6_vmpyhus_acc...
    O << ".uh)";
    return;
    break;
  case 114:
    // V6_vavguhrnd, V6_vavguhrnd_128B
    O << ".uh):rnd";
    return;
    break;
  case 115:
    // V6_vavgwrnd, V6_vavgwrnd_128B
    O << ".w):rnd";
    return;
    break;
  case 116:
    // V6_vccombine, V6_vccombine_128B, V6_vnccombine, V6_vnccombine_128B
    O << " = vcombine(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 117:
    // V6_vdmpyhb, V6_vdmpyhb_128B, V6_vdmpyhb_acc, V6_vdmpyhb_acc_128B, V6_v...
    O << ".b)";
    return;
    break;
  case 118:
    // V6_vdmpyhsuisat, V6_vdmpyhsuisat_128B, V6_vdmpyhsuisat_acc, V6_vdmpyhs...
    O << ".uh,#1):sat";
    return;
    break;
  case 119:
    // V6_vdmpyhsusat, V6_vdmpyhsusat_128B, V6_vdmpyhsusat_acc, V6_vdmpyhsusa...
    O << ".uh):sat";
    return;
    break;
  case 120:
    // V6_veqb, V6_veqb_128B, V6_veqb_and, V6_veqb_and_128B, V6_veqb_or, V6_v...
    O << ".b,";
    break;
  case 121:
    // V6_vgtuw, V6_vgtuw_128B, V6_vgtuw_and, V6_vgtuw_and_128B, V6_vgtuw_or,...
    O << ".uw,";
    break;
  case 122:
    // V6_vmpyowh, V6_vmpyowh_128B
    O << ".h):<<1:sat";
    return;
    break;
  case 123:
    // V6_vmpyowh_rnd, V6_vmpyowh_rnd_128B
    O << ".h):<<1:rnd:sat";
    return;
    break;
  case 124:
    // V6_vmpyowh_rnd_sacc, V6_vmpyowh_rnd_sacc_128B
    O << ".h):<<1:rnd:sat:shift";
    return;
    break;
  case 125:
    // V6_vmpyowh_sacc, V6_vmpyowh_sacc_128B
    O << ".h):<<1:sat:shift";
    return;
    break;
  case 126:
    // V6_vrmpyubi, V6_vrmpyubi_128B, V6_vrmpyubi_acc, V6_vrmpyubi_acc_128B
    O << ".ub,#";
    break;
  case 127:
    // V6_vsubbnq, V6_vsubbnq_128B, V6_vsubbq, V6_vsubbq_128B
    O << ".b -= ";
    printOperand(MI, 3, O);
    O << ".b";
    return;
    break;
  case 128:
    // V6_vsubhnq, V6_vsubhnq_128B, V6_vsubhq, V6_vsubhq_128B
    O << ".h -= ";
    printOperand(MI, 3, O);
    O << ".h";
    return;
    break;
  case 129:
    // V6_vsubwnq, V6_vsubwnq_128B, V6_vsubwq, V6_vsubwq_128B
    O << ".w -= ";
    printOperand(MI, 3, O);
    O << ".w";
    return;
    break;
  case 130:
    // dep_S2_packhl
    O << "):deprecated";
    return;
    break;
  }


  // Fragment 3 encoded into 6 bits for 58 unique commands.
  switch ((Bits >> 32) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, A2_addspl...
    O << ", ";
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_sat_hh, A2_addh_h16_sat_hl...
    O << ".h, ";
    printOperand(MI, 2, O);
    break;
  case 2:
    // A2_addh_h16_lh, A2_addh_h16_ll, A2_addh_h16_sat_lh, A2_addh_h16_sat_ll...
    O << ".l, ";
    printOperand(MI, 2, O);
    break;
  case 3:
    // A2_addi, A2_combineii, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    O << ", #";
    break;
  case 4:
    // A2_and, A2_andp, A2_combine_hh, A2_combine_hl, A2_combine_lh, A2_combi...
    printOperand(MI, 2, O);
    break;
  case 5:
    // A2_andir, A2_orir, A4_cmpbgtui, A4_cmpheqi, A4_cmphgti, A4_cmphgtui, A...
    printExtOperand(MI, 2, O);
    break;
  case 6:
    // A2_tfrpi, A2_tfrsi, TFRI64_V4, TFRI_f, V4_SA1_seti
    return;
    break;
  case 7:
    // A5_ACS
    O << " = vacsh(";
    printOperand(MI, 3, O);
    O << ',';
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 8:
    // C4_and_andn, C4_and_orn, C4_or_andn, C4_or_orn
    O << ", !";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 9:
    // CONST32, CONST32_Float_Real, CONST32_Int_Real, FCONST32_nsdata, HI, J2...
    O << ')';
    return;
    break;
  case 10:
    // F2_sffma_sc, V6_vrmpyubi_acc, V6_vrmpyubi_acc_128B
    printOperand(MI, 4, O);
    break;
  case 11:
    // F2_sfinvsqrta
    O << " = sfinvsqrta(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 12:
    // F2_sfrecipa
    O << " = sfrecipa(";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 13:
    // HI_GOT, LO_GOT
    O << "@GOT)";
    return;
    break;
  case 14:
    // HI_GOTREL, HI_PIC, LO_GOTREL, LO_PIC
    O << "@GOTREL)";
    return;
    break;
  case 15:
    // J4_cmpeq_fp0_jump_nt, J4_cmpgt_fp0_jump_nt, J4_cmpgtu_fp0_jump_nt
    O << "); if (!p0.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 16:
    // J4_cmpeq_fp0_jump_t, J4_cmpgt_fp0_jump_t, J4_cmpgtu_fp0_jump_t
    O << "); if (!p0.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 17:
    // J4_cmpeq_fp1_jump_nt, J4_cmpgt_fp1_jump_nt, J4_cmpgtu_fp1_jump_nt
    O << "); if (!p1.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 18:
    // J4_cmpeq_fp1_jump_t, J4_cmpgt_fp1_jump_t, J4_cmpgtu_fp1_jump_t
    O << "); if (!p1.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 19:
    // J4_cmpeq_tp0_jump_nt, J4_cmpgt_tp0_jump_nt, J4_cmpgtu_tp0_jump_nt
    O << "); if (p0.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 20:
    // J4_cmpeq_tp0_jump_t, J4_cmpgt_tp0_jump_t, J4_cmpgtu_tp0_jump_t
    O << "); if (p0.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 21:
    // J4_cmpeq_tp1_jump_nt, J4_cmpgt_tp1_jump_nt, J4_cmpgtu_tp1_jump_nt
    O << "); if (p1.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 22:
    // J4_cmpeq_tp1_jump_t, J4_cmpgt_tp1_jump_t, J4_cmpgtu_tp1_jump_t
    O << "); if (p1.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 23:
    // J4_cmplt_f_jumpnv_nt, J4_cmplt_t_jumpnv_nt, J4_cmpltu_f_jumpnv_nt, J4_...
    O << ".new)) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 24:
    // J4_cmplt_f_jumpnv_t, J4_cmplt_t_jumpnv_t, J4_cmpltu_f_jumpnv_t, J4_cmp...
    O << ".new)) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 25:
    // J4_jumpseti
    O << " ; jump ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 26:
    // L2_loadalignb_io, L2_loadalignh_io, L2_loadbsw2_io, L2_loadbsw4_io, L2...
    O << " + #";
    break;
  case 27:
    // L2_loadalignb_pbr, L2_loadalignh_pbr, L2_loadbsw2_pbr, L2_loadbsw4_pbr...
    O << " ++ ";
    printOperand(MI, 3, O);
    O << ":brev)";
    return;
    break;
  case 28:
    // L2_loadalignb_pci, L2_loadalignh_pci, L2_loadbsw2_pci, L2_loadbsw4_pci...
    O << " ++ #";
    printOperand(MI, 3, O);
    O << ":circ(";
    printOperand(MI, 4, O);
    O << "))";
    return;
    break;
  case 29:
    // L2_loadalignb_pcr, L2_loadalignh_pcr, L2_loadbsw2_pcr, L2_loadbsw4_pcr...
    O << " ++ I:circ(";
    break;
  case 30:
    // L2_loadalignb_pi, L2_loadalignh_pi, L2_loadbsw2_pi, L2_loadbsw4_pi, L2...
    O << "++#";
    break;
  case 31:
    // L2_loadalignb_pr, L2_loadalignh_pr, L2_loadbsw2_pr, L2_loadbsw4_pr, L2...
    O << "++";
    break;
  case 32:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    printOperand(MI, 3, O);
    break;
  case 33:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io
    O << ") += ";
    printOperand(MI, 2, O);
    return;
    break;
  case 34:
    // L4_and_memopb_io, L4_and_memoph_io, L4_and_memopw_io
    O << ") &= ";
    printOperand(MI, 2, O);
    return;
    break;
  case 35:
    // L4_iadd_memopb_io, L4_iadd_memoph_io, L4_iadd_memopw_io
    O << ") += #";
    printOperand(MI, 2, O);
    return;
    break;
  case 36:
    // L4_iand_memopb_io, L4_iand_memoph_io, L4_iand_memopw_io
    O << ") = clrbit(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 37:
    // L4_ior_memopb_io, L4_ior_memoph_io, L4_ior_memopw_io
    O << ") = setbit(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 38:
    // L4_isub_memopb_io, L4_isub_memoph_io, L4_isub_memopw_io
    O << ") -= #";
    printOperand(MI, 2, O);
    return;
    break;
  case 39:
    // L4_loadalignb_ap, L4_loadalignh_ap, L4_loadbsw2_ap, L4_loadbsw4_ap, L4...
    O << " = #";
    printExtOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 40:
    // L4_loadalignb_ur, L4_loadalignh_ur, L4_loadbsw2_ur, L4_loadbsw4_ur, L4...
    O << "<<#";
    printOperand(MI, 2, O);
    O << " + #";
    printExtOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 41:
    // L4_loadrb_rr, L4_loadrd_rr, L4_loadrh_rr, L4_loadri_rr, L4_loadrub_rr,...
    O << " + ";
    printOperand(MI, 2, O);
    O << "<<#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 42:
    // L4_or_memopb_io, L4_or_memoph_io, L4_or_memopw_io
    O << ") |= ";
    printOperand(MI, 2, O);
    return;
    break;
  case 43:
    // L4_sub_memopb_io, L4_sub_memoph_io, L4_sub_memopw_io
    O << ") -= ";
    printOperand(MI, 2, O);
    return;
    break;
  case 44:
    // M2_accii, M2_macsip, M2_naccii, S4_or_andi, S4_or_ori
    printExtOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 45:
    // M4_mpyri_addr, M4_mpyrr_addr
    O << ", mpyi(";
    printOperand(MI, 2, O);
    break;
  case 46:
    // M4_mpyri_addr_u2
    O << ", mpyi(#";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 47:
    // S2_pstorerbf_io, S2_pstorerbnewf_io, S2_pstorerbnewt_io, S2_pstorerbt_...
    O << "+#";
    break;
  case 48:
    // S2_storerb_io, S2_storerb_pi, S2_storerb_pr, S2_storerbnew_io, S2_stor...
    O << ") = ";
    break;
  case 49:
    // S2_storerb_pbr_pseudo, S2_storerd_pbr_pseudo, S2_storerf_pbr_pseudo, S...
    O << ":brev) = ";
    printOperand(MI, 2, O);
    O << "\"";
    return;
    break;
  case 50:
    // S4_addaddi
    O << ", add(";
    printOperand(MI, 2, O);
    O << ", #";
    printExtOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 51:
    // S4_pstorerbf_rr, S4_pstorerbfnew_rr, S4_pstorerbnewf_rr, S4_pstorerbne...
    O << '+';
    printOperand(MI, 2, O);
    O << "<<#";
    printOperand(MI, 3, O);
    O << ") = ";
    printOperand(MI, 4, O);
    break;
  case 52:
    // S4_storeirb_io, S4_storeirh_io, S4_storeiri_io
    O << ")=#";
    printExtOperand(MI, 2, O);
    return;
    break;
  case 53:
    // S4_subaddi
    O << ", sub(#";
    printExtOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 54:
    // V4_SA1_dec
    O << ",#-1)";
    return;
    break;
  case 55:
    // V4_SA1_inc
    O << ", #1)";
    return;
    break;
  case 56:
    // V6_pred_xor, V6_pred_xor_128B, V6_vdeal, V6_vdeal_128B, V6_vshuff, V6_...
    O << ',';
    break;
  case 57:
    // V6_vS32b_nt_ai, V6_vS32b_nt_ai_128B, V6_vS32b_nt_new_ai, V6_vS32b_nt_n...
    O << "):nt = ";
    break;
  }


  // Fragment 4 encoded into 6 bits for 55 unique commands.
  switch ((Bits >> 38) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, A2_addspl...
    printOperand(MI, 2, O);
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_lh, A2_subh_h16_hh, A2_subh_h16_lh
    O << ".h):<<16";
    return;
    break;
  case 2:
    // A2_addh_h16_hl, A2_addh_h16_ll, A2_subh_h16_hl, A2_subh_h16_ll
    O << ".l):<<16";
    return;
    break;
  case 3:
    // A2_addh_h16_sat_hh, A2_addh_h16_sat_lh, A2_subh_h16_sat_hh, A2_subh_h1...
    O << ".h):sat:<<16";
    return;
    break;
  case 4:
    // A2_addh_h16_sat_hl, A2_addh_h16_sat_ll, A2_subh_h16_sat_hl, A2_subh_h1...
    O << ".l):sat:<<16";
    return;
    break;
  case 5:
    // A2_addh_l16_hl, A2_combine_hh, A2_combine_lh, A2_subh_l16_hl, M2_mpy_a...
    O << ".h)";
    return;
    break;
  case 6:
    // A2_addh_l16_ll, A2_combine_hl, A2_combine_ll, A2_subh_l16_ll, M2_mpy_a...
    O << ".l)";
    return;
    break;
  case 7:
    // A2_addh_l16_sat_hl, A2_subh_l16_sat_hl, M2_mpy_acc_sat_hh_s0, M2_mpy_a...
    O << ".h):sat";
    return;
    break;
  case 8:
    // A2_addh_l16_sat_ll, A2_subh_l16_sat_ll, M2_mpy_acc_sat_hl_s0, M2_mpy_a...
    O << ".l):sat";
    return;
    break;
  case 9:
    // A2_addi, A4_combineii, L2_loadbsw2_io, L2_loadbsw4_io, L2_loadbzw2_io,...
    printExtOperand(MI, 2, O);
    break;
  case 10:
    // A2_and, A2_andir, A2_andp, A2_combinew, A2_or, A2_orir, A2_orp, A2_sub...
    O << ')';
    return;
    break;
  case 11:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, A4_addp_c, A4_subp_c, C4...
    printOperand(MI, 3, O);
    break;
  case 12:
    // A2_paddif, A2_paddifnew, A2_paddit, A2_padditnew, L2_loadalignb_io, L2...
    printExtOperand(MI, 3, O);
    break;
  case 13:
    // A4_round_ri_sat, A4_round_rr_sat, S2_asl_i_r_sat, S2_asl_r_r_sat, S2_a...
    O << "):sat";
    return;
    break;
  case 14:
    // C2_mux, C2_muxri, C2_vmux, M4_mpyrr_addr, MUX_ri_f
    O << ", ";
    printOperand(MI, 3, O);
    break;
  case 15:
    // C2_muxii, C2_muxir, M4_mpyri_addr, MUX_ir_f, S2_extractu, S2_extractup...
    O << ", #";
    break;
  case 16:
    // F2_sffma_sc
    O << "):scale";
    return;
    break;
  case 17:
    // L2_loadalignb_pcr, L2_loadalignb_pi, L2_loadalignb_pr, L2_loadalignh_p...
    printOperand(MI, 4, O);
    break;
  case 18:
    // L2_loadrb_pci_pseudo, L2_loadrd_pci_pseudo, L2_loadrh_pci_pseudo, L2_l...
    printOperand(MI, 5, O);
    O << ":circ(";
    printOperand(MI, 4, O);
    O << "))\"";
    return;
    break;
  case 19:
    // L2_ploadrbf_io, L2_ploadrbfnew_io, L2_ploadrbt_io, L2_ploadrbtnew_io, ...
    O << " + #";
    printExtOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 20:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    O << "++#";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 21:
    // L4_ploadrbf_rr, L4_ploadrbfnew_rr, L4_ploadrbt_rr, L4_ploadrbtnew_rr, ...
    O << '+';
    printOperand(MI, 3, O);
    O << "<<#";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 22:
    // M2_dpmpyss_rnd_s0, S2_asr_i_p_rnd, S2_asr_i_r_rnd, S5_vasrhrnd_goodsyn...
    O << "):rnd";
    return;
    break;
  case 23:
    // M2_hmmpyh_rs1, M2_mpy_sat_rnd_hh_s1, M2_mpy_sat_rnd_lh_s1, V6_vmpyhsrs...
    O << ".h):<<1:rnd:sat";
    return;
    break;
  case 24:
    // M2_hmmpyh_s1, M2_mpy_acc_sat_hh_s1, M2_mpy_acc_sat_lh_s1, M2_mpy_nac_s...
    O << ".h):<<1:sat";
    return;
    break;
  case 25:
    // M2_hmmpyl_rs1, M2_mpy_sat_rnd_hl_s1, M2_mpy_sat_rnd_ll_s1
    O << ".l):<<1:rnd:sat";
    return;
    break;
  case 26:
    // M2_hmmpyl_s1, M2_mpy_acc_sat_hl_s1, M2_mpy_acc_sat_ll_s1, M2_mpy_nac_s...
    O << ".l):<<1:sat";
    return;
    break;
  case 27:
    // M2_mpy_acc_hh_s1, M2_mpy_acc_lh_s1, M2_mpy_hh_s1, M2_mpy_lh_s1, M2_mpy...
    O << ".h):<<1";
    return;
    break;
  case 28:
    // M2_mpy_acc_hl_s1, M2_mpy_acc_ll_s1, M2_mpy_hl_s1, M2_mpy_ll_s1, M2_mpy...
    O << ".l):<<1";
    return;
    break;
  case 29:
    // M2_mpy_rnd_hh_s0, M2_mpy_rnd_lh_s0, M2_mpyd_rnd_hh_s0, M2_mpyd_rnd_lh_...
    O << ".h):rnd";
    return;
    break;
  case 30:
    // M2_mpy_rnd_hh_s1, M2_mpy_rnd_lh_s1, M2_mpyd_rnd_hh_s1, M2_mpyd_rnd_lh_...
    O << ".h):<<1:rnd";
    return;
    break;
  case 31:
    // M2_mpy_rnd_hl_s0, M2_mpy_rnd_ll_s0, M2_mpyd_rnd_hl_s0, M2_mpyd_rnd_ll_...
    O << ".l):rnd";
    return;
    break;
  case 32:
    // M2_mpy_rnd_hl_s1, M2_mpy_rnd_ll_s1, M2_mpyd_rnd_hl_s1, M2_mpyd_rnd_ll_...
    O << ".l):<<1:rnd";
    return;
    break;
  case 33:
    // M2_mpy_sat_rnd_hh_s0, M2_mpy_sat_rnd_lh_s0
    O << ".h):rnd:sat";
    return;
    break;
  case 34:
    // M2_mpy_sat_rnd_hl_s0, M2_mpy_sat_rnd_ll_s0
    O << ".l):rnd:sat";
    return;
    break;
  case 35:
    // M2_mpy_up_s1
    O << "):<<1";
    return;
    break;
  case 36:
    // M2_mpy_up_s1_sat, M4_mac_up_s1_sat, M4_nac_up_s1_sat
    O << "):<<1:sat";
    return;
    break;
  case 37:
    // S4_pstorerbf_rr, S4_pstorerbfnew_rr, S4_pstorerbt_rr, S4_pstorerbtnew_...
    return;
    break;
  case 38:
    // S4_pstorerbnewf_rr, S4_pstorerbnewfnew_rr, S4_pstorerbnewt_rr, S4_psto...
    O << ".new";
    return;
    break;
  case 39:
    // S4_pstorerff_rr, S4_pstorerffnew_rr, S4_pstorerft_rr, S4_pstorerftnew_...
    O << ".h";
    return;
    break;
  case 40:
    // S5_vasrhrnd
    O << "):raw";
    return;
    break;
  case 41:
    // TFR_PdFalse
    printOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 42:
    // V6_vL32Ub_ai, V6_vL32b_ai, V6_vL32b_cur_ai, V6_vL32b_nt_ai, V6_vL32b_n...
    prints4_6ImmOperand(MI, 2, O);
    break;
  case 43:
    // V6_vL32Ub_ai_128B, V6_vL32b_ai_128B, V6_vL32b_cur_ai_128B, V6_vL32b_nt...
    prints4_7ImmOperand(MI, 2, O);
    break;
  case 44:
    // V6_vL32Ub_pi, V6_vL32b_cur_pi, V6_vL32b_nt_cur_pi, V6_vL32b_nt_pi, V6_...
    prints3_6ImmOperand(MI, 3, O);
    break;
  case 45:
    // V6_vL32Ub_pi_128B, V6_vL32b_cur_pi_128B, V6_vL32b_nt_cur_pi_128B, V6_v...
    prints3_7ImmOperand(MI, 3, O);
    break;
  case 46:
    // V6_vabsdiffuh, V6_vabsdiffuh_128B, V6_vadduhw, V6_vadduhw_128B, V6_vgt...
    O << ".uh)";
    return;
    break;
  case 47:
    // V6_vaddubh, V6_vaddubh_128B, V6_vgtub, V6_vgtub_128B, V6_vgtub_and, V6...
    O << ".ub)";
    return;
    break;
  case 48:
    // V6_vaddw, V6_vaddw_128B, V6_vaddw_dv, V6_vaddw_dv_128B, V6_veqw, V6_ve...
    O << ".w)";
    return;
    break;
  case 49:
    // V6_vaddwsat, V6_vaddwsat_128B, V6_vaddwsat_dv, V6_vaddwsat_dv_128B, V6...
    O << ".w):sat";
    return;
    break;
  case 50:
    // V6_vasrwh, V6_vasrwh_128B, V6_vasrwhrndsat, V6_vasrwhrndsat_128B, V6_v...
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 51:
    // V6_veqb, V6_veqb_128B, V6_veqb_and, V6_veqb_and_128B, V6_veqb_or, V6_v...
    O << ".b)";
    return;
    break;
  case 52:
    // V6_vgtuw, V6_vgtuw_128B, V6_vgtuw_and, V6_vgtuw_and_128B, V6_vgtuw_or,...
    O << ".uw)";
    return;
    break;
  case 53:
    // V6_vmux, V6_vmux_128B
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 54:
    // V6_vrmpybusi, V6_vrmpybusi_128B, V6_vrmpybusi_acc, V6_vrmpybusi_acc_12...
    O << ".b,#";
    break;
  }


  // Fragment 5 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 44) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addi, A2_addp, A2_addsp, A2_combineii, A2_paddf, A2_paddfne...
    O << ')';
    return;
    break;
  case 1:
    // A2_addpsat, A2_addsat, A2_subsat, V6_vasrwhsat, V6_vasrwhsat_128B
    O << "):sat";
    return;
    break;
  case 2:
    // A2_addsph
    O << "):raw:hi";
    return;
    break;
  case 3:
    // A2_addspl
    O << "):raw:lo";
    return;
    break;
  case 4:
    // A4_addp_c, A4_subp_c
    O << ", ";
    printOperand(MI, 4, O);
    O << "):carry";
    return;
    break;
  case 5:
    // C2_muxii, S2_extractu, S2_extractup, S4_extract, S4_extractp, V6_vrmpy...
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 6:
    // C2_muxir, M4_mpyri_addr, MUX_ir_f
    printExtOperand(MI, 3, O);
    break;
  case 7:
    // C4_and_and, C4_and_or, C4_or_and, C4_or_or, L2_loadalignb_pcr, L2_load...
    O << "))";
    return;
    break;
  case 8:
    // L2_loadrb_pbr_pseudo, L2_loadrd_pbr_pseudo, L2_loadrh_pbr_pseudo, L2_l...
    O << ":brev)\"";
    return;
    break;
  case 9:
    // S2_insert, S2_insertp, V6_vrmpybusi_acc, V6_vrmpybusi_acc_128B
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 10:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_...
    O << ") = ";
    break;
  case 11:
    // S2_storerb_io, S2_storerb_pi, S2_storerb_pr, S2_storerd_io, S2_storerd...
    return;
    break;
  case 12:
    // S2_storerbnew_io, S2_storerbnew_pi, S2_storerbnew_pr, S2_storerhnew_io...
    O << ".new";
    return;
    break;
  case 13:
    // S2_storerf_io, S2_storerf_pi, S2_storerf_pr, S4_storerf_ap
    O << ".h";
    return;
    break;
  case 14:
    // S4_storeirbf_io, S4_storeirbfnew_io, S4_storeirbt_io, S4_storeirbtnew_...
    O << ")=#";
    printExtOperand(MI, 3, O);
    return;
    break;
  case 15:
    // V6_vL32b_nt_ai, V6_vL32b_nt_ai_128B, V6_vL32b_nt_cur_ai, V6_vL32b_nt_c...
    O << "):nt";
    return;
    break;
  case 16:
    // V6_vS32b_nt_new_npred_ai, V6_vS32b_nt_new_npred_ai_128B, V6_vS32b_nt_n...
    O << "):nt = ";
    break;
  case 17:
    // V6_vasrwhrndsat, V6_vasrwhrndsat_128B
    O << "):rnd:sat";
    return;
    break;
  case 18:
    // dep_A2_addsat, dep_A2_subsat
    O << "):sat:deprecated";
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 49) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // C2_muxir, MUX_ir_f
    O << ')';
    return;
    break;
  case 1:
    // M4_mpyri_addr
    O << "))";
    return;
    break;
  case 2:
    // S2_pstorerbf_io, S2_pstorerbnewf_io, S2_pstorerbnewt_io, S2_pstorerbt_...
    printOperand(MI, 3, O);
    break;
  case 3:
    // S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_pi, S2_pstorerbne...
    printOperand(MI, 4, O);
    break;
  }


  // Fragment 7 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 51) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbt_io,...
    return;
    break;
  case 1:
    // S2_pstorerbnewf_io, S2_pstorerbnewf_pi, S2_pstorerbnewfnew_pi, S2_psto...
    O << ".new";
    return;
    break;
  case 2:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerffnew_pi, S2_pstorerft_io,...
    O << ".h";
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 131 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'c', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 14 */ 'v', '1', '1', ':', '1', '0', 0,
  /* 21 */ 'r', '1', '0', 0,
  /* 25 */ 'v', '1', '0', 0,
  /* 29 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 36 */ 'v', '2', '1', ':', '2', '0', 0,
  /* 43 */ 'r', '2', '0', 0,
  /* 47 */ 'v', '2', '0', 0,
  /* 51 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 58 */ 'v', '3', '1', ':', '3', '0', 0,
  /* 65 */ 'r', '3', '0', 0,
  /* 69 */ 'v', '3', '0', 0,
  /* 73 */ 'c', '1', ':', '0', 0,
  /* 78 */ 'r', '1', ':', '0', 0,
  /* 83 */ 'v', '1', ':', '0', 0,
  /* 88 */ 'p', '3', ':', '0', 0,
  /* 93 */ 's', 'a', '0', 0,
  /* 97 */ 'l', 'c', '0', 0,
  /* 101 */ 'm', '0', 0,
  /* 104 */ 'p', '0', 0,
  /* 107 */ 'q', '0', 0,
  /* 110 */ 'r', '0', 0,
  /* 113 */ 'c', 's', '0', 0,
  /* 117 */ 'v', '0', 0,
  /* 120 */ 'r', '1', '1', 0,
  /* 124 */ 'v', '1', '1', 0,
  /* 128 */ 'r', '2', '1', 0,
  /* 132 */ 'v', '2', '1', 0,
  /* 136 */ 'r', '3', '1', 0,
  /* 140 */ 'v', '3', '1', 0,
  /* 144 */ 's', 'a', '1', 0,
  /* 148 */ 'l', 'c', '1', 0,
  /* 152 */ 'm', '1', 0,
  /* 155 */ 'p', '1', 0,
  /* 158 */ 'q', '1', 0,
  /* 161 */ 'r', '1', 0,
  /* 164 */ 'c', 's', '1', 0,
  /* 168 */ 'v', '1', 0,
  /* 171 */ 'c', '1', '3', ':', '1', '2', 0,
  /* 178 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 185 */ 'v', '1', '3', ':', '1', '2', 0,
  /* 192 */ 'r', '1', '2', 0,
  /* 196 */ 'v', '1', '2', 0,
  /* 200 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 207 */ 'v', '2', '3', ':', '2', '2', 0,
  /* 214 */ 'r', '2', '2', 0,
  /* 218 */ 'v', '2', '2', 0,
  /* 222 */ 'c', '3', ':', '2', 0,
  /* 227 */ 'r', '3', ':', '2', 0,
  /* 232 */ 'v', '3', ':', '2', 0,
  /* 237 */ 'p', '2', 0,
  /* 240 */ 'q', '2', 0,
  /* 243 */ 'r', '2', 0,
  /* 246 */ 'v', '2', 0,
  /* 249 */ 'r', '1', '3', 0,
  /* 253 */ 'v', '1', '3', 0,
  /* 257 */ 'r', '2', '3', 0,
  /* 261 */ 'v', '2', '3', 0,
  /* 265 */ 'p', '3', 0,
  /* 268 */ 'q', '3', 0,
  /* 271 */ 'r', '3', 0,
  /* 274 */ 'v', '3', 0,
  /* 277 */ 'c', '1', '5', ':', '1', '4', 0,
  /* 284 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 291 */ 'v', '1', '5', ':', '1', '4', 0,
  /* 298 */ 'r', '1', '4', 0,
  /* 302 */ 'v', '1', '4', 0,
  /* 306 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 313 */ 'v', '2', '5', ':', '2', '4', 0,
  /* 320 */ 'r', '2', '4', 0,
  /* 324 */ 'v', '2', '4', 0,
  /* 328 */ 'r', '5', ':', '4', 0,
  /* 333 */ 'v', '5', ':', '4', 0,
  /* 338 */ 'r', '4', 0,
  /* 341 */ 'v', '4', 0,
  /* 344 */ 'r', '1', '5', 0,
  /* 348 */ 'v', '1', '5', 0,
  /* 352 */ 'r', '2', '5', 0,
  /* 356 */ 'v', '2', '5', 0,
  /* 360 */ 'c', '5', 0,
  /* 363 */ 'r', '5', 0,
  /* 366 */ 'v', '5', 0,
  /* 369 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 376 */ 'v', '1', '7', ':', '1', '6', 0,
  /* 383 */ 'r', '1', '6', 0,
  /* 387 */ 'v', '1', '6', 0,
  /* 391 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 398 */ 'v', '2', '7', ':', '2', '6', 0,
  /* 405 */ 'r', '2', '6', 0,
  /* 409 */ 'v', '2', '6', 0,
  /* 413 */ 'c', '7', ':', '6', 0,
  /* 418 */ 'r', '7', ':', '6', 0,
  /* 423 */ 'v', '7', ':', '6', 0,
  /* 428 */ 'c', '6', 0,
  /* 431 */ 'r', '6', 0,
  /* 434 */ 'v', '6', 0,
  /* 437 */ 'r', '1', '7', 0,
  /* 441 */ 'v', '1', '7', 0,
  /* 445 */ 'r', '2', '7', 0,
  /* 449 */ 'v', '2', '7', 0,
  /* 453 */ 'c', '7', 0,
  /* 456 */ 'r', '7', 0,
  /* 459 */ 'v', '7', 0,
  /* 462 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 469 */ 'v', '1', '9', ':', '1', '8', 0,
  /* 476 */ 'r', '1', '8', 0,
  /* 480 */ 'v', '1', '8', 0,
  /* 484 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 491 */ 'v', '2', '9', ':', '2', '8', 0,
  /* 498 */ 'r', '2', '8', 0,
  /* 502 */ 'v', '2', '8', 0,
  /* 506 */ 'c', '9', ':', '8', 0,
  /* 511 */ 'r', '9', ':', '8', 0,
  /* 516 */ 'v', '9', ':', '8', 0,
  /* 521 */ 'r', '8', 0,
  /* 524 */ 'v', '8', 0,
  /* 527 */ 'r', '1', '9', 0,
  /* 531 */ 'v', '1', '9', 0,
  /* 535 */ 'r', '2', '9', 0,
  /* 539 */ 'v', '2', '9', 0,
  /* 543 */ 'r', '9', 0,
  /* 546 */ 'v', '9', 0,
  /* 549 */ 'p', 'c', 0,
  /* 552 */ 'u', 's', 'r', '.', 'o', 'v', 'f', 0,
  /* 560 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'h', 'i', 0,
  /* 570 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'l', 'o', 0,
  /* 580 */ 'u', 'g', 'p', 0,
  /* 584 */ 'u', 's', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    171, 581, 549, 580, 277, 560, 570, 584, 552, 360, 428, 453, 113, 164, 
    78, 227, 328, 418, 511, 7, 178, 284, 369, 462, 29, 200, 306, 391, 
    484, 51, 97, 148, 101, 152, 104, 155, 237, 265, 107, 158, 240, 268, 
    110, 161, 243, 271, 338, 363, 431, 456, 521, 543, 21, 120, 192, 249, 
    298, 344, 383, 437, 476, 527, 43, 128, 214, 257, 320, 352, 405, 445, 
    498, 535, 65, 136, 93, 144, 117, 168, 246, 274, 341, 366, 434, 459, 
    524, 546, 25, 124, 196, 253, 302, 348, 387, 441, 480, 531, 47, 132, 
    218, 261, 324, 356, 409, 449, 502, 539, 69, 140, 83, 232, 333, 423, 
    516, 14, 185, 291, 376, 469, 36, 207, 313, 398, 491, 58, 73, 222, 
    413, 506, 0, 88, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Hexagon::A2_vaddub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (A2_vaddub DoubleRegs:$Rdd, DoubleRegs:$Rss, DoubleRegs:$Rtt)
      AsmString = "$\x01 = vaddb($\x02, $\x03)";
      break;
    }
    return false;
  case Hexagon::L2_loadrbgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (L2_loadrbgp IntRegs:$Nt, u16_0Imm:$addr)
      AsmString = "$\x01 = memb(GP+#$\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrdgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (L2_loadrdgp DoubleRegs:$Nt, u16_3Imm:$addr)
      AsmString = "$\x01 = memd(GP+#$\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrhgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (L2_loadrhgp IntRegs:$Nt, u16_1Imm:$addr)
      AsmString = "$\x01 = memh(GP+#$\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrigp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (L2_loadrigp IntRegs:$Nt, u16_2Imm:$addr)
      AsmString = "$\x01 = memw(GP+#$\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrubgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (L2_loadrubgp IntRegs:$Nt, u16_0Imm:$addr)
      AsmString = "$\x01 = memub(GP+#$\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadruhgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (L2_loadruhgp IntRegs:$Nt, u16_1Imm:$addr)
      AsmString = "$\x01 = memuh(GP+#$\x02)";
      break;
    }
    return false;
  case Hexagon::S2_storerbgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerbgp u16_0Imm:$addr, IntRegs:$Nt)
      AsmString = "memb(GP+#$\x01) = $\x02";
      break;
    }
    return false;
  case Hexagon::S2_storerbnewgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerbnewgp u16_0Imm:$addr, IntRegs:$Nt)
      AsmString = "memb(GP+#$\x01) = $\x02.new";
      break;
    }
    return false;
  case Hexagon::S2_storerdgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerdgp u16_3Imm:$addr, DoubleRegs:$Nt)
      AsmString = "memd(GP+#$\x01) = $\x02";
      break;
    }
    return false;
  case Hexagon::S2_storerfgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerfgp u16_1Imm:$addr, IntRegs:$Nt)
      AsmString = "memh(GP+#$\x01) = $\x02.h";
      break;
    }
    return false;
  case Hexagon::S2_storerhgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerhgp u16_1Imm:$addr, IntRegs:$Nt)
      AsmString = "memh(GP+#$\x01) = $\x02";
      break;
    }
    return false;
  case Hexagon::S2_storerhnewgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerhnewgp u16_1Imm:$addr, IntRegs:$Nt)
      AsmString = "memh(GP+#$\x01) = $\x02.new";
      break;
    }
    return false;
  case Hexagon::S2_storerigp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerigp u16_2Imm:$addr, IntRegs:$Nt)
      AsmString = "memw(GP+#$\x01) = $\x02";
      break;
    }
    return false;
  case Hexagon::S2_storerinewgp:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (S2_storerinewgp u16_2Imm:$addr, IntRegs:$Nt)
      AsmString = "memw(GP+#$\x01) = $\x02.new";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void HexagonInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
