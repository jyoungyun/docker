/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 103 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 111 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 120 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 131 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 143 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 153 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 164 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 171 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 179 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 189 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 200 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 209 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 219 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 231 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 239 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 248 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 255 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 270 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 278 */ 'b', 'd', 'z', '-', 32, 0,
  /* 284 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 291 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 302 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 310 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 321 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 328 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 336 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 345 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 356 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 363 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 370 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 381 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 389 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 397 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 405 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 413 */ 'o', 'r', 'c', '.', 32, 0,
  /* 419 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 430 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 437 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 444 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 452 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 461 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 469 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 477 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 485 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 493 */ 's', 'l', 'd', '.', 32, 0,
  /* 499 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 506 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 513 */ 's', 'r', 'd', '.', 32, 0,
  /* 519 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 530 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 541 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 552 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 559 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 568 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 575 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 583 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 591 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 599 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 608 */ 'f', 'r', 'e', '.', 32, 0,
  /* 614 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 624 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 632 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 640 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 649 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 656 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 664 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 671 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 682 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 690 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 701 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 712 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 724 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 736 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 744 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 755 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 764 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 771 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 780 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 789 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 798 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 807 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 816 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 825 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 834 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 842 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 853 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 862 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 871 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 880 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 889 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 898 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 907 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 915 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 924 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 931 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 938 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 949 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 956 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 965 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 973 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 982 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 991 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 998 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1010 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1022 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1034 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1044 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1055 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1066 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1077 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1084 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1096 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1108 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1115 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1127 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1135 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1144 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1150 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1156 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1162 */ 't', 's', 'r', '.', 32, 0,
  /* 1168 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1175 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1183 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1191 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1200 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1210 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1218 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1227 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1237 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1246 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1253 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1264 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1271 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1279 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1287 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1296 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1306 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1314 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1323 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1331 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1340 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1349 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1357 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1366 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1375 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1384 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1392 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1399 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1405 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1412 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1420 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1428 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1436 */ 's', 'l', 'w', '.', 32, 0,
  /* 1442 */ 's', 'r', 'w', '.', 32, 0,
  /* 1448 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1459 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1467 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1478 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1489 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1496 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1505 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 1513 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1521 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 1529 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1537 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 1545 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1554 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1561 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1571 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1581 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1590 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1598 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1606 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1628 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1650 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1664 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1678 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1692 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1707 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1726 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 1743 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 1756 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 1769 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 1782 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 1793 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 1804 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 1817 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 1830 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 1841 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 1854 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 1867 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 1878 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 1884 */ 'b', 'c', 'a', 32, 0,
  /* 1889 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 1900 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 1911 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 1922 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 1932 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 1943 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 1954 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 1965 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 1975 */ 'l', 'h', 'a', 32, 0,
  /* 1980 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 1991 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2002 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2013 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2023 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2034 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2045 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2056 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2067 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2077 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2089 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2100 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2112 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2123 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2136 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2148 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2161 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2173 */ 'b', 'l', 'a', 32, 0,
  /* 2178 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2184 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2191 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2199 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2206 */ 'l', 'w', 'a', 32, 0,
  /* 2211 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2220 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2231 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2241 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2252 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2261 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2271 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2281 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2292 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2301 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2311 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2322 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2334 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2344 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2355 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2366 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2378 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2388 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2399 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 2410 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 2421 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 2427 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 2434 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 2441 */ 'r', 'f', 'e', 'b', 'b', 32, 0,
  /* 2448 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 2456 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 2464 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 2470 */ 'v', 's', 'l', 'b', 32, 0,
  /* 2476 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 2485 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 2491 */ 'v', 's', 'r', 'b', 32, 0,
  /* 2497 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 2506 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 2514 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 2523 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 2533 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 2542 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 2550 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 2559 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 2569 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 2578 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 2586 */ 'm', 'f', 't', 'b', 32, 0,
  /* 2592 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 2600 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 2610 */ 's', 't', 'b', 32, 0,
  /* 2615 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 2624 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 2632 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 2640 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 2649 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 2659 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 2667 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 2676 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 2686 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 2696 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 2704 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 2711 */ 'b', 'c', 32, 0,
  /* 2715 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 2721 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 2730 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 2738 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 2746 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 2753 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 2760 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 2767 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 2774 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 2782 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 2791 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 2800 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 2809 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 2816 */ 's', 'y', 'n', 'c', 32, 0,
  /* 2822 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 2830 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 2837 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 2844 */ 's', 'c', 32, 0,
  /* 2848 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 2861 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 2873 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 2880 */ 'v', 'g', 'b', 'b', 'd', 32, 0,
  /* 2887 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 2895 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 2904 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 2914 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 2928 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 2941 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 2951 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 2962 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 2969 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 2977 */ 'l', 'f', 'd', 32, 0,
  /* 2982 */ 's', 't', 'f', 'd', 32, 0,
  /* 2988 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 2995 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 3004 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 3013 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3020 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 3027 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 3034 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 3040 */ 'v', 's', 'l', 'd', 32, 0,
  /* 3046 */ 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 3054 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 3063 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 3071 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 3080 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 3088 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 3096 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 3103 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 3110 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 3116 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 3124 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 3132 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 3140 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 3148 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 3158 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 3166 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 3176 */ 's', 't', 'd', 32, 0,
  /* 3181 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 3189 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 3199 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 3209 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 3217 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 3223 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 3230 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 3238 */ 'm', 'f', 'b', 'h', 'r', 'b', 'e', 32, 0,
  /* 3247 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 3253 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 3260 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 3269 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 3276 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 3283 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 3291 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 3300 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 3307 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 3314 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 3321 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 3329 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 3336 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 3343 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 3351 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 3362 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 3369 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 3376 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 3385 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 3392 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 3400 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 3406 */ 's', 'u', 'b', 'f', 32, 0,
  /* 3412 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 3422 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 3432 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 3442 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 3451 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 3457 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 3465 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 3473 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 3480 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 3487 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 3497 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 3507 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 3517 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 3526 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 3534 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 3541 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 3548 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 3555 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 3563 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 3571 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 3579 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 3585 */ 'v', 's', 'l', 'h', 32, 0,
  /* 3591 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 3600 */ 'v', 's', 'r', 'h', 32, 0,
  /* 3606 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 3615 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 3623 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 3632 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 3642 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 3651 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 3659 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 3668 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 3678 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 3687 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 3695 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 3703 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 3713 */ 's', 't', 'h', 32, 0,
  /* 3718 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 3727 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 3735 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 3743 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 3752 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 3762 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 3772 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 3780 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 3787 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 3793 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 3799 */ 's', 'u', 'b', 'i', 32, 0,
  /* 3805 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 3812 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 3819 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 3827 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 3834 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 3840 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 3848 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 3858 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 3866 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 3876 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 3883 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 3891 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 3899 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 3907 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 3915 */ 't', 'd', 'i', 32, 0,
  /* 3920 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 3928 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 3936 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 3947 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 3958 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 3971 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 3978 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 3985 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 3993 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 4001 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 4011 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 4021 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 4031 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 4040 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 4050 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 4060 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 4070 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 4080 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 4089 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 4099 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 4107 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 4115 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 4123 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 4131 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 4137 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4148 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4158 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 4165 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 4174 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 4182 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 4190 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 4200 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 4208 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 4216 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 4224 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 4231 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 4239 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 4247 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 4255 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 4263 */ 'l', 's', 'w', 'i', 32, 0,
  /* 4269 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 4276 */ 't', 'w', 'i', 32, 0,
  /* 4281 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 4292 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 4302 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 4313 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 4323 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 4335 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 4346 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 4358 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 4369 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 4377 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 4389 */ 'b', 'l', 32, 0,
  /* 4393 */ 'b', 'c', 'l', 32, 0,
  /* 4398 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 4405 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 4413 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 4421 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 4429 */ 'i', 's', 'e', 'l', 32, 0,
  /* 4435 */ 'v', 's', 'e', 'l', 32, 0,
  /* 4441 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 4448 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 4455 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 4463 */ 'l', 'v', 's', 'l', 32, 0,
  /* 4469 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 4477 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 4486 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 4492 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 4499 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 4506 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 4512 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 4519 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 4529 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 4538 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 4547 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 4557 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 4566 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 4575 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 4585 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 4594 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 4605 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 4614 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 4624 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 4631 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 4640 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 4649 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 4658 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 4666 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 4674 */ 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 4681 */ 'v', 's', 'u', 'b', 'u', 'q', 'm', 32, 0,
  /* 4690 */ 'v', 'a', 'd', 'd', 'u', 'q', 'm', 32, 0,
  /* 4699 */ 'v', 's', 'u', 'b', 'e', 'u', 'q', 'm', 32, 0,
  /* 4709 */ 'v', 'a', 'd', 'd', 'e', 'u', 'q', 'm', 32, 0,
  /* 4719 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 4728 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 4735 */ 'v', 'p', 'k', 'u', 'd', 'u', 'm', 32, 0,
  /* 4744 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 4753 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 4762 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 4771 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 4780 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 4789 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 4802 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 4815 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 4826 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 4837 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 4850 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 4863 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 4874 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 4887 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 4900 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 4911 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 4922 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 4932 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 4939 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 4947 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 4955 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 4963 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 'n', 32, 0,
  /* 4974 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 'n', 32, 0,
  /* 4985 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 4994 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 5005 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 5018 */ 'v', 's', 'l', 'o', 32, 0,
  /* 5024 */ 'v', 's', 'r', 'o', 32, 0,
  /* 5030 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 5039 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5051 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5063 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5074 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5085 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5097 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5109 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5120 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5131 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5140 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5149 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5158 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5167 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 5178 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 5189 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 5200 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 5211 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 5222 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 5230 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 5238 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 5250 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 5262 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 5271 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 5280 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 5289 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 5298 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5310 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5322 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5333 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5344 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5356 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5368 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5379 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5390 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 5401 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 5412 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 5421 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 5430 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 5440 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 5450 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 5460 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 5471 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5481 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5491 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5500 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5509 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 5520 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5530 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5541 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5552 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5562 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 5572 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5581 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5591 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5601 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5610 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 5621 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 5632 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 5641 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 5650 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 5659 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 5669 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 5677 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 5686 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 5694 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 5703 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 5713 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 5720 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 5730 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 5741 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 5749 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 5759 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 5769 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 5777 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 5784 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 5793 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 5802 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 5811 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 5819 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 5831 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 5843 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 5854 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 5865 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 5877 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 5889 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 5900 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 5911 */ 'x', 's', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 5920 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 5929 */ 'x', 's', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 5938 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 5947 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 5958 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 5969 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 5980 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 5991 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 6002 */ 'x', 's', 'r', 'e', 's', 'p', 32, 0,
  /* 6010 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 6018 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 6030 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 6042 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 6051 */ 'x', 's', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 6060 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 6069 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 6081 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 6093 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 6104 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 6115 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 6127 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 6139 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 6150 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 6161 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 6172 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 6181 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 6191 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 6201 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 6212 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 6220 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 6230 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 6239 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 6250 */ 'x', 's', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 6260 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 6271 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 6281 */ 'x', 's', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 6290 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 6300 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 6309 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 6320 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 6331 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 6340 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 6350 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 6359 */ 'v', 'b', 'p', 'e', 'r', 'm', 'q', 32, 0,
  /* 6368 */ 'v', 's', 'u', 'b', 'c', 'u', 'q', 32, 0,
  /* 6377 */ 'v', 'a', 'd', 'd', 'c', 'u', 'q', 32, 0,
  /* 6386 */ 'v', 's', 'u', 'b', 'e', 'c', 'u', 'q', 32, 0,
  /* 6396 */ 'v', 'a', 'd', 'd', 'e', 'c', 'u', 'q', 32, 0,
  /* 6406 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 6419 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 6425 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 6432 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 6439 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 6446 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 6452 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 6460 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 6468 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 6476 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 6486 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 6495 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 6501 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 6507 */ 'm', 't', 'l', 'r', 32, 0,
  /* 6513 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 6520 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 6527 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 6535 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 6542 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 6549 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 6555 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 6561 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 6569 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 6579 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 6586 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 6593 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 6600 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 6607 */ 'm', 'f', 's', 'r', 32, 0,
  /* 6613 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 6620 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 6627 */ 'm', 't', 's', 'r', 32, 0,
  /* 6633 */ 'l', 'v', 's', 'r', 32, 0,
  /* 6639 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 6646 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 6653 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 6660 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 6668 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 6677 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 6684 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 6694 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 6703 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 6712 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 6722 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 6731 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 6740 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 6749 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 6759 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 6770 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 6779 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6789 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6800 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6815 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6829 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6840 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6852 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 6862 */ 'd', 'c', 'b', 't', 'd', 's', 32, 0,
  /* 6870 */ 'd', 'c', 'b', 't', 's', 't', 'd', 's', 32, 0,
  /* 6880 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 6892 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 6904 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 6916 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 6928 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 6940 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 6952 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 6960 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 6972 */ 'm', 'f', 'f', 's', 32, 0,
  /* 6978 */ 'l', 'f', 's', 32, 0,
  /* 6983 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 6990 */ 's', 't', 'f', 's', 32, 0,
  /* 6996 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 7006 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 7015 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 7026 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 7038 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 7047 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 7057 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 7066 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 7075 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 7085 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 7092 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 7099 */ 'l', 'i', 's', 32, 0,
  /* 7104 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 7111 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 7120 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 7129 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 7139 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 7148 */ 'v', 'p', 'k', 's', 'd', 's', 's', 32, 0,
  /* 7157 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 7166 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 7175 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 7185 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 7195 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 7203 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 7214 */ 'v', 'p', 'k', 's', 'd', 'u', 's', 32, 0,
  /* 7223 */ 'v', 'p', 'k', 'u', 'd', 'u', 's', 32, 0,
  /* 7232 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 7241 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 7250 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 7259 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 7268 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 7275 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 7283 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 7293 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 7302 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 7311 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 7320 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 7329 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 7338 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 7347 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 7359 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 7371 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 7383 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 7395 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 7407 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 7419 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 7427 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 7435 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7448 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7460 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7474 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7488 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7500 */ 'd', 'c', 'b', 't', 32, 0,
  /* 7506 */ 'i', 'c', 'b', 't', 32, 0,
  /* 7512 */ 'd', 'c', 'b', 't', 'c', 't', 32, 0,
  /* 7520 */ 'd', 'c', 'b', 't', 's', 't', 'c', 't', 32, 0,
  /* 7530 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 7540 */ 'w', 'a', 'i', 't', 32, 0,
  /* 7546 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 7556 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 7563 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 7577 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 7590 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 7597 */ 'd', 's', 't', 32, 0,
  /* 7602 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 7610 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 7617 */ 'd', 'c', 'b', 't', 't', 32, 0,
  /* 7624 */ 'd', 's', 't', 't', 32, 0,
  /* 7630 */ 'd', 'c', 'b', 't', 's', 't', 't', 32, 0,
  /* 7639 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 7647 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 7653 */ 's', 't', 'b', 'u', 32, 0,
  /* 7659 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 7665 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 7672 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 7680 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 7690 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 7700 */ 'l', 'd', 'u', 32, 0,
  /* 7705 */ 's', 't', 'd', 'u', 32, 0,
  /* 7711 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 7718 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 7726 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 7734 */ 's', 't', 'h', 'u', 32, 0,
  /* 7740 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 7749 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 7758 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 7765 */ 'l', 'f', 's', 'u', 32, 0,
  /* 7771 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 7778 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 7788 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 7798 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 7806 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 7816 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 7824 */ 's', 't', 'w', 'u', 32, 0,
  /* 7830 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 7839 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 7845 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 7851 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 7857 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 7863 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 7871 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 7878 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 7885 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 7898 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 7911 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 7924 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 7937 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7950 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7963 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7977 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7990 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 8003 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 8016 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 8029 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 8043 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 8056 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 8069 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8082 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8095 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8109 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8122 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8135 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8148 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8161 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8175 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8188 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 8201 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 8213 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 8220 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 8228 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 8235 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 8243 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 8251 */ 'v', 'm', 'r', 'g', 'e', 'w', 32, 0,
  /* 8259 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 8268 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 8278 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 8286 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 8295 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 8302 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 8311 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 8320 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 8328 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 8337 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 8344 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 8351 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 8358 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 8365 */ 'l', 'm', 'w', 32, 0,
  /* 8370 */ 's', 't', 'm', 'w', 32, 0,
  /* 8376 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 8385 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 8398 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 8411 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 8424 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 8437 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8450 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8463 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8476 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8489 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8502 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8515 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8528 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8541 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8554 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8567 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8580 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8593 */ 'v', 'm', 'r', 'g', 'o', 'w', 32, 0,
  /* 8601 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 8607 */ 'v', 's', 'r', 'w', 32, 0,
  /* 8613 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 8622 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 8630 */ 'v', 'u', 'p', 'k', 'h', 's', 'w', 32, 0,
  /* 8639 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 8649 */ 'v', 'u', 'p', 'k', 'l', 's', 'w', 32, 0,
  /* 8658 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 8668 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 8676 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 8685 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 8695 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 8702 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 8710 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 8718 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 8727 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 8737 */ 's', 't', 'w', 32, 0,
  /* 8742 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 8751 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 8760 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 8769 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 8777 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 8785 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 8794 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 8804 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 8814 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 8822 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 8828 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 8835 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 8845 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 8853 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 8862 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 8870 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 8879 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 8885 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 8894 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 8904 */ 'l', 'x', 's', 'i', 'w', 'a', 'x', 32, 0,
  /* 8913 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 8919 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 8926 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 8934 */ 's', 't', 'b', 'x', 32, 0,
  /* 8940 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 8949 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 8959 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 8967 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 8976 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 8984 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 8993 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 9003 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 9013 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 9020 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 9028 */ 's', 't', 'd', 'x', 32, 0,
  /* 9034 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 9043 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 9053 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 9063 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 9071 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 9080 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 9087 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 9095 */ 's', 't', 'h', 'x', 32, 0,
  /* 9101 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 9109 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 9116 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 9124 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 9132 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 9140 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 9148 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 9156 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 9164 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 9171 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 9181 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 9191 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 9200 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 9207 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 9216 */ 'l', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 9224 */ 's', 't', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 9233 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 9240 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 9247 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 9254 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 9261 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 9268 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 9276 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 9283 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 9291 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 9298 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 9306 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 9313 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 9322 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 9332 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 9340 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 9347 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 9355 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 9364 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 9374 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 9384 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 9394 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 9408 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 9421 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 9436 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 9451 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 9464 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 9471 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 9478 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 9485 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 9495 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 9506 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 9515 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 9525 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 9531 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 9538 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 9545 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 9552 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 9562 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 9572 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 9583 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 9592 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 9602 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 9609 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 9616 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 9623 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 9630 */ 'l', 'v', 'x', 32, 0,
  /* 9635 */ 's', 't', 'v', 'x', 32, 0,
  /* 9641 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 9649 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 9658 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 9665 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 9673 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 9683 */ 's', 't', 'x', 's', 'i', 'w', 'x', 32, 0,
  /* 9692 */ 's', 't', 'w', 'x', 32, 0,
  /* 9698 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 9704 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 9710 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 9720 */ 'l', 'x', 's', 'i', 'w', 'z', 'x', 32, 0,
  /* 9729 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 9735 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 9741 */ 'l', 'b', 'z', 32, 0,
  /* 9746 */ 'b', 'd', 'z', 32, 0,
  /* 9751 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 9761 */ 'l', 'h', 'z', 32, 0,
  /* 9766 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 9773 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 9782 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 9791 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 9800 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 9808 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 9814 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 9825 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 9836 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 9846 */ 'l', 'w', 'z', 32, 0,
  /* 9851 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 9860 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 9869 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 9877 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 9886 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 9893 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 9901 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 9909 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 9918 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 9925 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 9933 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 9943 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 9955 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 9967 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 9984 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 10005 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 10026 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 10048 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 10069 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 10086 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 10107 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 10127 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 10141 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 10155 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 10170 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 10185 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 10204 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 10222 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 10240 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 10258 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 10273 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 10286 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 10307 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 10328 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 10350 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 10367 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 10388 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 10409 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 10429 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 10448 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 10466 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 10487 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 10501 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 10512 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 10526 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 10537 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 10551 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 10565 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 10586 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 10607 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 10629 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 10650 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 10667 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 10688 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 10708 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 10719 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 10733 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 10744 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 10764 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 10778 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 10798 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 10819 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 10839 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 10859 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 10878 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 10897 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 10908 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 10921 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 10937 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 10954 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 10971 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 10987 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 10999 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 11013 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 11027 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 11044 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 11059 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 11067 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 11077 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 11093 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 11106 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 11122 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 11135 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 11152 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 11166 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 11182 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 11195 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 11211 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 11224 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 11241 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 11255 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 11271 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 11284 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 11297 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 11304 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 11314 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 11330 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 11344 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 11354 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 11362 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 11372 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 11384 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 11396 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 11409 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 11422 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 11433 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 11445 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 11455 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 11471 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 11487 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 11501 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 11513 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 11525 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 11538 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 11550 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 11565 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 11580 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 11593 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 11609 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 11625 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 11635 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 11648 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 11658 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 11673 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 11679 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 11685 */ 'c', 'l', 'r', 'b', 'h', 'r', 'b', 0,
  /* 11693 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 11701 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 11707 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 11713 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 11720 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 11728 */ 'r', 'f', 'i', 'd', 0,
  /* 11733 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 11739 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 11745 */ 'r', 'f', 'c', 'i', 0,
  /* 11750 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 11756 */ 'r', 'f', 'd', 'i', 0,
  /* 11761 */ 'r', 'f', 'i', 0,
  /* 11765 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 11772 */ 'b', 'l', 'r', 'l', 0,
  /* 11777 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 11784 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 11792 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 11798 */ 'a', 't', 't', 'n', 0,
  /* 11803 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 11809 */ 't', 'r', 'a', 'p', 0,
  /* 11814 */ 'n', 'o', 'p', 0,
  /* 11818 */ 'b', 'l', 'r', 0,
  /* 11822 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 11828 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 11835 */ 'b', 'c', 't', 'r', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    11305U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11298U,	// BUNDLE
    11659U,	// LIFETIME_START
    11285U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    19275U,	// ADD4
    19275U,	// ADD4TLS
    16823U,	// ADD4o
    19275U,	// ADD8
    19275U,	// ADD8TLS
    19275U,	// ADD8TLS_
    16823U,	// ADD8o
    19100U,	// ADDC
    19100U,	// ADDC8
    16741U,	// ADDC8o
    16741U,	// ADDCo
    19632U,	// ADDE
    19632U,	// ADDE8
    16953U,	// ADDE8o
    16953U,	// ADDEo
    20219U,	// ADDI
    20219U,	// ADDI8
    19145U,	// ADDIC
    19145U,	// ADDIC8
    16782U,	// ADDICo
    23477U,	// ADDIS
    23477U,	// ADDIS8
    11045U,	// ADDISdtprelHA
    9968U,	// ADDISdtprelHA32
    11028U,	// ADDISgotTprelHA
    11000U,	// ADDIStlsgdHA
    11014U,	// ADDIStlsldHA
    10988U,	// ADDIStocHA
    11410U,	// ADDIdtprelL
    10171U,	// ADDIdtprelL32
    11373U,	// ADDItlsgdL
    10128U,	// ADDItlsgdL32
    11456U,	// ADDItlsgdLADDR
    10223U,	// ADDItlsgdLADDR32
    11385U,	// ADDItlsldL
    10142U,	// ADDItlsldL32
    11472U,	// ADDItlsldLADDR
    10241U,	// ADDItlsldLADDR32
    11363U,	// ADDItocL
    536890611U,	// ADDME
    536890611U,	// ADDME8
    536887888U,	// ADDME8o
    536887888U,	// ADDMEo
    536890682U,	// ADDZE
    536890682U,	// ADDZE8
    536887929U,	// ADDZE8o
    536887929U,	// ADDZEo
    558764U,	// ADJCALLSTACKDOWN
    17860287U,	// ADJCALLSTACKUP
    19451U,	// AND
    19451U,	// AND8
    16885U,	// AND8o
    19109U,	// ANDC
    19109U,	// ANDC8
    16748U,	// ANDC8o
    16748U,	// ANDCo
    17656U,	// ANDISo
    17656U,	// ANDISo8
    17149U,	// ANDIo
    17149U,	// ANDIo8
    11594U,	// ANDIo_1_EQ_BIT
    10938U,	// ANDIo_1_EQ_BIT8
    11610U,	// ANDIo_1_GT_BIT
    10955U,	// ANDIo_1_GT_BIT8
    16885U,	// ANDo
    1108362845U,	// ATOMIC_CMP_SWAP_I16
    1108362823U,	// ATOMIC_CMP_SWAP_I32
    10368U,	// ATOMIC_CMP_SWAP_I64
    10840U,	// ATOMIC_CMP_SWAP_I8
    10587U,	// ATOMIC_LOAD_ADD_I16
    10006U,	// ATOMIC_LOAD_ADD_I32
    10308U,	// ATOMIC_LOAD_ADD_I64
    10779U,	// ATOMIC_LOAD_ADD_I8
    10630U,	// ATOMIC_LOAD_AND_I16
    10049U,	// ATOMIC_LOAD_AND_I32
    10467U,	// ATOMIC_LOAD_AND_I64
    10820U,	// ATOMIC_LOAD_AND_I8
    10608U,	// ATOMIC_LOAD_NAND_I16
    10027U,	// ATOMIC_LOAD_NAND_I32
    10329U,	// ATOMIC_LOAD_NAND_I64
    10799U,	// ATOMIC_LOAD_NAND_I8
    10689U,	// ATOMIC_LOAD_OR_I16
    10108U,	// ATOMIC_LOAD_OR_I32
    10410U,	// ATOMIC_LOAD_OR_I64
    10879U,	// ATOMIC_LOAD_OR_I8
    10566U,	// ATOMIC_LOAD_SUB_I16
    9985U,	// ATOMIC_LOAD_SUB_I32
    10287U,	// ATOMIC_LOAD_SUB_I64
    10745U,	// ATOMIC_LOAD_SUB_I8
    10668U,	// ATOMIC_LOAD_XOR_I16
    10087U,	// ATOMIC_LOAD_XOR_I32
    10389U,	// ATOMIC_LOAD_XOR_I64
    10860U,	// ATOMIC_LOAD_XOR_I8
    10651U,	// ATOMIC_SWAP_I16
    10070U,	// ATOMIC_SWAP_I32
    10351U,	// ATOMIC_SWAP_I64
    10972U,	// ATOMIC_SWAP_I8
    11799U,	// ATTN
    575879U,	// B
    591705U,	// BA
    50348136U,	// BC
    1666476U,	// BCC
    2190764U,	// BCCA
    2715052U,	// BCCCTR
    2715052U,	// BCCCTR8
    3239340U,	// BCCCTRL
    3239340U,	// BCCCTRL8
    3763628U,	// BCCL
    4287916U,	// BCCLA
    4812204U,	// BCCLR
    5336492U,	// BCCLRL
    5783706U,	// BCCTR
    5783706U,	// BCCTR8
    5783762U,	// BCCTR8n
    5783684U,	// BCCTRL
    5783684U,	// BCCTRL8
    5783742U,	// BCCTRL8n
    5783742U,	// BCCTRLn
    5783762U,	// BCCTRn
    50348144U,	// BCL
    5783696U,	// BCLR
    5783673U,	// BCLRL
    5783732U,	// BCLRLn
    5783753U,	// BCLRn
    573517U,	// BCLalways
    50348204U,	// BCLn
    11836U,	// BCTR
    11836U,	// BCTR8
    11793U,	// BCTRL
    11793U,	// BCTRL8
    98394U,	// BCTRL8_LDinto_toc
    50348197U,	// BCn
    583249U,	// BDNZ
    583249U,	// BDNZ8
    592252U,	// BDNZA
    590080U,	// BDNZAm
    589865U,	// BDNZAp
    577953U,	// BDNZL
    592016U,	// BDNZLA
    590064U,	// BDNZLAm
    589849U,	// BDNZLAp
    11829U,	// BDNZLR
    11829U,	// BDNZLR8
    11785U,	// BDNZLRL
    9910U,	// BDNZLRLm
    9878U,	// BDNZLRLp
    9926U,	// BDNZLRm
    9894U,	// BDNZLRp
    573711U,	// BDNZLm
    573496U,	// BDNZLp
    573725U,	// BDNZm
    573510U,	// BDNZp
    583187U,	// BDZ
    583187U,	// BDZ8
    592246U,	// BDZA
    590073U,	// BDZAm
    589858U,	// BDZAp
    577947U,	// BDZL
    592009U,	// BDZLA
    590056U,	// BDZLAm
    589841U,	// BDZLAp
    11823U,	// BDZLR
    11823U,	// BDZLR8
    11778U,	// BDZLRL
    9902U,	// BDZLRLm
    9870U,	// BDZLRLp
    9919U,	// BDZLRm
    9887U,	// BDZLRp
    573704U,	// BDZLm
    573489U,	// BDZLp
    573719U,	// BDZm
    573504U,	// BDZp
    577830U,	// BL
    577830U,	// BL8
    6344998U,	// BL8_NOP
    6410534U,	// BL8_NOP_TLS
    643366U,	// BL8_TLS
    643366U,	// BL8_TLS_
    591998U,	// BLA
    591998U,	// BLA8
    6359166U,	// BLA8_NOP
    11819U,	// BLR
    11819U,	// BLR8
    11773U,	// BLRL
    643366U,	// BL_TLS
    19431U,	// BPERMD
    19194U,	// BRINC
    11686U,	// CLRBHRB
    20233U,	// CLRLSLDI
    17129U,	// CLRLSLDIo
    20575U,	// CLRLSLWI
    17227U,	// CLRLSLWIo
    20268U,	// CLRRDI
    17156U,	// CLRRDIo
    20616U,	// CLRRWI
    17256U,	// CLRRWIo
    18870U,	// CMPB
    18870U,	// CMPB8
    19495U,	// CMPD
    20261U,	// CMPDI
    19412U,	// CMPLD
    20225U,	// CMPLDI
    24729U,	// CMPLW
    20559U,	// CMPLWI
    24986U,	// CMPW
    20609U,	// CMPWI
    536890527U,	// CNTLZD
    536887856U,	// CNTLZDo
    536896134U,	// CNTLZW
    536896134U,	// CNTLZW8
    536888793U,	// CNTLZW8o
    536888793U,	// CNTLZWo
    10552U,	// CR6SET
    10538U,	// CR6UNSET
    19481U,	// CRAND
    19115U,	// CRANDC
    24256U,	// CREQV
    19465U,	// CRNAND
    22920U,	// CRNOR
    22934U,	// CROR
    19215U,	// CRORC
    67133120U,	// CRSET
    67131828U,	// CRUNSET
    22964U,	// CRXOR
    657239U,	// DCBA
    658761U,	// DCBF
    659148U,	// DCBI
    662951U,	// DCBST
    154957U,	// DCBT
    620895577U,	// DCBTCT
    620894927U,	// DCBTDS
    155059U,	// DCBTST
    620895585U,	// DCBTSTCT
    620894935U,	// DCBTSTDS
    662991U,	// DCBTSTT
    662963U,	// DCBTSTx
    662978U,	// DCBTT
    662861U,	// DCBTx
    665096U,	// DCBZ
    659860U,	// DCBZL
    536891102U,	// DCCCI
    19602U,	// DIVD
    19638U,	// DIVDE
    24103U,	// DIVDEU
    17742U,	// DIVDEUo
    16960U,	// DIVDEo
    24096U,	// DIVDU
    17734U,	// DIVDUo
    16937U,	// DIVDo
    25207U,	// DIVW
    19754U,	// DIVWE
    24111U,	// DIVWEU
    17751U,	// DIVWEUo
    17009U,	// DIVWEo
    24217U,	// DIVWU
    17769U,	// DIVWUo
    17874U,	// DIVWo
    695281U,	// DSS
    11766U,	// DSSALL
    1711463854U,	// DST
    1711463854U,	// DST64
    1711463867U,	// DSTST
    1711463867U,	// DSTST64
    1711463896U,	// DSTSTT
    1711463896U,	// DSTSTT64
    1711463881U,	// DSTT
    1711463881U,	// DSTT64
    11068U,	// DYNALLOC
    10709U,	// DYNALLOC8
    11551U,	// DYNAREAOFFSET
    10922U,	// DYNAREAOFFSET8
    10186U,	// EH_SjLj_LongJmp32
    10430U,	// EH_SjLj_LongJmp64
    10205U,	// EH_SjLj_SetJmp32
    10449U,	// EH_SjLj_SetJmp64
    573441U,	// EH_SjLj_Setup
    24251U,	// EQV
    24251U,	// EQV8
    17784U,	// EQV8o
    17784U,	// EQVo
    536893974U,	// EVABS
    83910767U,	// EVADDIW
    536895234U,	// EVADDSMIAAW
    536895366U,	// EVADDSSIAAW
    536895300U,	// EVADDUMIAAW
    536895432U,	// EVADDUSIAAW
    24605U,	// EVADDW
    19488U,	// EVAND
    19123U,	// EVANDC
    22735U,	// EVCMPEQ
    23560U,	// EVCMPGTS
    24163U,	// EVCMPGTU
    23570U,	// EVCMPLTS
    24173U,	// EVCMPLTU
    536895955U,	// EVCNTLSW
    536896132U,	// EVCNTLZW
    23723U,	// EVDIVWS
    24215U,	// EVDIVWU
    24263U,	// EVEQV
    536889866U,	// EVEXTSB
    536890975U,	// EVEXTSH
    117459859U,	// EVLDD
    25344U,	// EVLDDX
    117460445U,	// EVLDH
    25448U,	// EVLDHX
    117465125U,	// EVLDW
    26026U,	// EVLDWX
    117464332U,	// EVLHHESPLAT
    25779U,	// EVLHHESPLATX
    117464357U,	// EVLHHOSSPLAT
    25806U,	// EVLHHOSSPLATX
    117464371U,	// EVLHHOUSPLAT
    25821U,	// EVLHHOUSPLATX
    117460180U,	// EVLWHE
    25419U,	// EVLWHEX
    117464036U,	// EVLWHOS
    25759U,	// EVLWHOSX
    117464646U,	// EVLWHOU
    25937U,	// EVLWHOUX
    117464345U,	// EVLWHSPLAT
    25793U,	// EVLWHSPLATX
    117464385U,	// EVLWWSPLAT
    25836U,	// EVLWWSPLATX
    20332U,	// EVMERGEHI
    21390U,	// EVMERGEHILO
    21379U,	// EVMERGELO
    20343U,	// EVMERGELOHI
    18141U,	// EVMHEGSMFAA
    21174U,	// EVMHEGSMFAN
    18189U,	// EVMHEGSMIAA
    21222U,	// EVMHEGSMIAN
    18226U,	// EVMHEGUMIAA
    21259U,	// EVMHEGUMIAN
    19797U,	// EVMHESMF
    18274U,	// EVMHESMFA
    24270U,	// EVMHESMFAAW
    24770U,	// EVMHESMFANW
    20386U,	// EVMHESMI
    18365U,	// EVMHESMIA
    24335U,	// EVMHESMIAAW
    24822U,	// EVMHESMIANW
    19872U,	// EVMHESSF
    18317U,	// EVMHESSFA
    24296U,	// EVMHESSFAAW
    24796U,	// EVMHESSFANW
    24467U,	// EVMHESSIAAW
    24900U,	// EVMHESSIANW
    20425U,	// EVMHEUMI
    18408U,	// EVMHEUMIA
    24401U,	// EVMHEUMIAAW
    24861U,	// EVMHEUMIANW
    24533U,	// EVMHEUSIAAW
    24939U,	// EVMHEUSIANW
    18154U,	// EVMHOGSMFAA
    21187U,	// EVMHOGSMFAN
    18202U,	// EVMHOGSMIAA
    21235U,	// EVMHOGSMIAN
    18239U,	// EVMHOGUMIAA
    21272U,	// EVMHOGUMIAN
    19817U,	// EVMHOSMF
    18296U,	// EVMHOSMFA
    24283U,	// EVMHOSMFAAW
    24783U,	// EVMHOSMFANW
    20406U,	// EVMHOSMI
    18387U,	// EVMHOSMIA
    24375U,	// EVMHOSMIAAW
    24848U,	// EVMHOSMIANW
    19892U,	// EVMHOSSF
    18339U,	// EVMHOSSFA
    24309U,	// EVMHOSSFAAW
    24809U,	// EVMHOSSFANW
    24507U,	// EVMHOSSIAAW
    24926U,	// EVMHOSSIANW
    20455U,	// EVMHOUMI
    18441U,	// EVMHOUMIA
    24441U,	// EVMHOUMIAAW
    24887U,	// EVMHOUMIANW
    24573U,	// EVMHOUSIAAW
    24965U,	// EVMHOUSIANW
    536889496U,	// EVMRA
    19807U,	// EVMWHSMF
    18285U,	// EVMWHSMFA
    20396U,	// EVMWHSMI
    18376U,	// EVMWHSMIA
    19882U,	// EVMWHSSF
    18328U,	// EVMWHSSFA
    20435U,	// EVMWHUMI
    18419U,	// EVMWHUMIA
    24362U,	// EVMWLSMIAAW
    24835U,	// EVMWLSMIANW
    24494U,	// EVMWLSSIAAW
    24913U,	// EVMWLSSIANW
    20445U,	// EVMWLUMI
    18430U,	// EVMWLUMIA
    24428U,	// EVMWLUMIAAW
    24874U,	// EVMWLUMIANW
    24560U,	// EVMWLUSIAAW
    24952U,	// EVMWLUSIANW
    19827U,	// EVMWSMF
    18307U,	// EVMWSMFA
    18167U,	// EVMWSMFAA
    21200U,	// EVMWSMFAN
    20416U,	// EVMWSMI
    18398U,	// EVMWSMIA
    18215U,	// EVMWSMIAA
    21248U,	// EVMWSMIAN
    19902U,	// EVMWSSF
    18350U,	// EVMWSSFA
    18178U,	// EVMWSSFAA
    21211U,	// EVMWSSFAN
    20465U,	// EVMWUMI
    18452U,	// EVMWUMIA
    18252U,	// EVMWUMIAA
    21285U,	// EVMWUMIAN
    19473U,	// EVNAND
    536890831U,	// EVNEG
    22927U,	// EVNOR
    22940U,	// EVOR
    19222U,	// EVORC
    24736U,	// EVRLW
    20567U,	// EVRLWI
    536895532U,	// EVRNDW
    24743U,	// EVSLW
    20593U,	// EVSLWI
    536891233U,	// EVSPLATFI
    536891445U,	// EVSPLATI
    23496U,	// EVSRWIS
    24125U,	// EVSRWIU
    23660U,	// EVSRWS
    24201U,	// EVSRWU
    117459866U,	// EVSTDD
    25352U,	// EVSTDDX
    117460452U,	// EVSTDH
    25456U,	// EVSTDHX
    117465140U,	// EVSTDW
    26034U,	// EVSTDWX
    117460188U,	// EVSTWHE
    25428U,	// EVSTWHEX
    117461882U,	// EVSTWHO
    25556U,	// EVSTWHOX
    117460273U,	// EVSTWWE
    25438U,	// EVSTWWEX
    117461927U,	// EVSTWWO
    25566U,	// EVSTWWOX
    536895260U,	// EVSUBFSMIAAW
    536895392U,	// EVSUBFSSIAAW
    536895326U,	// EVSUBFUMIAAW
    536895458U,	// EVSUBFUSIAAW
    24644U,	// EVSUBFW
    134242381U,	// EVSUBIFW
    22971U,	// EVXOR
    20243U,	// EXTLDI
    17140U,	// EXTLDIo
    20601U,	// EXTLWI
    17247U,	// EXTLWIo
    20292U,	// EXTRDI
    17183U,	// EXTRDIo
    20640U,	// EXTRWI
    17283U,	// EXTRWIo
    536889868U,	// EXTSB
    536889868U,	// EXTSB8
    536889868U,	// EXTSB8_32_64
    536887599U,	// EXTSB8o
    536887599U,	// EXTSBo
    536890977U,	// EXTSH
    536890977U,	// EXTSH8
    536890977U,	// EXTSH8_32_64
    536887979U,	// EXTSH8o
    536887979U,	// EXTSHo
    536895992U,	// EXTSW
    536895992U,	// EXTSW_32_64
    536888756U,	// EXTSW_32_64o
    536888756U,	// EXTSWo
    11804U,	// EnforceIEIO
    536893959U,	// FABSD
    536888465U,	// FABSDo
    536893959U,	// FABSS
    536888465U,	// FABSSo
    19274U,	// FADD
    23157U,	// FADDS
    17595U,	// FADDSo
    16822U,	// FADDo
    0U,	// FADDrtz
    536890294U,	// FCFID
    536894151U,	// FCFIDS
    536888534U,	// FCFIDSo
    536894979U,	// FCFIDU
    536894502U,	// FCFIDUS
    536888593U,	// FCFIDUSo
    536888637U,	// FCFIDUo
    536887766U,	// FCFIDo
    24143U,	// FCMPUD
    24143U,	// FCMPUS
    21309U,	// FCPSGND
    17358U,	// FCPSGNDo
    21309U,	// FCPSGNS
    17358U,	// FCPSGNSo
    536890303U,	// FCTID
    536897113U,	// FCTIDUZ
    536888858U,	// FCTIDUZo
    536897050U,	// FCTIDZ
    536888842U,	// FCTIDZo
    536887774U,	// FCTIDo
    536895610U,	// FCTIW
    536897124U,	// FCTIWUZ
    536888868U,	// FCTIWUZo
    536897135U,	// FCTIWZ
    536888878U,	// FCTIWZo
    536888717U,	// FCTIWo
    24242U,	// FDIV
    23653U,	// FDIVS
    17691U,	// FDIVSo
    17777U,	// FDIVo
    19282U,	// FMADD
    23166U,	// FMADDS
    17603U,	// FMADDSo
    16829U,	// FMADDo
    536893812U,	// FMR
    536888441U,	// FMRo
    19054U,	// FMSUB
    23136U,	// FMSUBS
    17576U,	// FMSUBSo
    16713U,	// FMSUBo
    20856U,	// FMUL
    23507U,	// FMULS
    17664U,	// FMULSo
    17316U,	// FMULo
    536893967U,	// FNABSD
    536888472U,	// FNABSDo
    536893967U,	// FNABSS
    536888472U,	// FNABSSo
    536890825U,	// FNEGD
    536887961U,	// FNEGDo
    536890825U,	// FNEGS
    536887961U,	// FNEGSo
    19291U,	// FNMADD
    23176U,	// FNMADDS
    17612U,	// FNMADDSo
    16837U,	// FNMADDo
    19063U,	// FNMSUB
    23146U,	// FNMSUBS
    17585U,	// FNMSUBSo
    16721U,	// FNMSUBo
    536890635U,	// FRE
    536894251U,	// FRES
    536888543U,	// FRESo
    536887905U,	// FREo
    536891957U,	// FRIMD
    536888246U,	// FRIMDo
    536891957U,	// FRIMS
    536888246U,	// FRIMSo
    536892238U,	// FRIND
    536888288U,	// FRINDo
    536892238U,	// FRINS
    536888288U,	// FRINSo
    536893110U,	// FRIPD
    536888374U,	// FRIPDo
    536893110U,	// FRIPS
    536888374U,	// FRIPSo
    536897099U,	// FRIZD
    536888851U,	// FRIZDo
    536897099U,	// FRIZS
    536888851U,	// FRIZSo
    536893511U,	// FRSP
    536888405U,	// FRSPo
    536890650U,	// FRSQRTE
    536894259U,	// FRSQRTES
    536888550U,	// FRSQRTESo
    536887911U,	// FRSQRTEo
    20808U,	// FSELD
    17309U,	// FSELDo
    20808U,	// FSELS
    17309U,	// FSELSo
    536894853U,	// FSQRT
    536894492U,	// FSQRTS
    536888584U,	// FSQRTSo
    536888620U,	// FSQRTo
    19046U,	// FSUB
    23127U,	// FSUBS
    17568U,	// FSUBSo
    16706U,	// FSUBo
    11502U,	// GETtlsADDR
    10274U,	// GETtlsADDR32
    11488U,	// GETtlsldADDR
    10259U,	// GETtlsldADDR32
    659154U,	// ICBI
    204115U,	// ICBT
    536891109U,	// ICCCI
    20585U,	// INSLWI
    17238U,	// INSLWIo
    20276U,	// INSRDI
    17165U,	// INSRDIo
    20624U,	// INSRWI
    17265U,	// INSRWIo
    20814U,	// ISEL
    20814U,	// ISEL8
    11702U,	// ISYNC
    151013503U,	// LA
    117459071U,	// LAx
    570450962U,	// LBARX
    2181063698U,	// LBARXL
    117466638U,	// LBZ
    117466638U,	// LBZ8
    25525U,	// LBZCIX
    167796384U,	// LBZU
    167796384U,	// LBZU8
    184575370U,	// LBZUX
    184575370U,	// LBZUX8
    570451427U,	// LBZX
    570451427U,	// LBZX8
    117459913U,	// LD
    570450969U,	// LDARX
    2181063705U,	// LDARXL
    570450990U,	// LDBRX
    25494U,	// LDCIX
    167796245U,	// LDU
    184575286U,	// LDUX
    570450727U,	// LDX
    11397U,	// LDgotTprelL
    10156U,	// LDgotTprelL32
    11714U,	// LDtoc
    11649U,	// LDtocBA
    11649U,	// LDtocCPT
    11345U,	// LDtocJTI
    11355U,	// LDtocL
    117459874U,	// LFD
    167796204U,	// LFDU
    184575269U,	// LFDUX
    570450707U,	// LFDX
    570450625U,	// LFIWAX
    570451441U,	// LFIWZX
    117463875U,	// LFS
    167796310U,	// LFSU
    184575346U,	// LFSUX
    570451078U,	// LFSX
    117458872U,	// LHA
    117458872U,	// LHA8
    570450976U,	// LHARX
    2181063712U,	// LHARXL
    167796192U,	// LHAU
    167796192U,	// LHAU8
    184575225U,	// LHAUX
    184575225U,	// LHAUX8
    570450608U,	// LHAX
    570450608U,	// LHAX8
    570451005U,	// LHBRX
    570451005U,	// LHBRX8
    117466658U,	// LHZ
    117466658U,	// LHZ8
    25533U,	// LHZCIX
    167796390U,	// LHZU
    167796390U,	// LHZU8
    184575377U,	// LHZUX
    184575377U,	// LHZUX8
    570451433U,	// LHZX
    570451433U,	// LHZX8
    201346951U,	// LI
    201346951U,	// LI8
    201350076U,	// LIS
    201350076U,	// LIS8
    117465262U,	// LMW
    20648U,	// LSWI
    570450648U,	// LVEBX
    570450809U,	// LVEHX
    570451387U,	// LVEWX
    570446192U,	// LVSL
    570448362U,	// LVSR
    570451359U,	// LVX
    570446215U,	// LVXL
    117459103U,	// LWA
    570450983U,	// LWARX
    2181063719U,	// LWARXL
    184575232U,	// LWAUX
    570450642U,	// LWAX
    570450642U,	// LWAX_32
    117459103U,	// LWA_32
    570451020U,	// LWBRX
    570451020U,	// LWBRX8
    117466743U,	// LWZ
    117466743U,	// LWZ8
    25541U,	// LWZCIX
    167796396U,	// LWZU
    167796396U,	// LWZU8
    184575384U,	// LWZUX
    184575384U,	// LWZUX8
    570451458U,	// LWZX
    570451458U,	// LWZX8
    11721U,	// LWZtoc
    570450742U,	// LXSDX
    570450633U,	// LXSIWAX
    570451449U,	// LXSIWZX
    570450945U,	// LXSSPX
    570450574U,	// LXVD2X
    570451061U,	// LXVDSX
    570450591U,	// LXVW4X
    694548U,	// MBAR
    536890748U,	// MCRF
    536894280U,	// MCRFS
    218123431U,	// MFBHRBE
    547119U,	// MFCR
    547119U,	// MFCR8
    547319U,	// MFCTR
    547319U,	// MFCTR8
    536893722U,	// MFDCR
    547645U,	// MFFS
    541937U,	// MFFSo
    547174U,	// MFLR
    547174U,	// MFLR8
    547286U,	// MFMSR
    234900866U,	// MFOCRF
    234900866U,	// MFOCRF8
    536893890U,	// MFSPR
    536893890U,	// MFSPR8
    251681232U,	// MFSR
    536892244U,	// MFSRIN
    536889883U,	// MFTB
    6838722U,	// MFTB8
    7363010U,	// MFVRSAVE
    7363010U,	// MFVRSAVEv
    547133U,	// MFVSCR
    536890421U,	// MFVSRD
    536897148U,	// MFVSRWZ
    11708U,	// MSYNC
    536890770U,	// MTCRF
    536890770U,	// MTCRF8
    547326U,	// MTCTR
    547326U,	// MTCTR8
    547326U,	// MTCTR8loop
    547326U,	// MTCTRloop
    604166440U,	// MTDCR
    689719U,	// MTFSB0
    689727U,	// MTFSB1
    19865U,	// MTFSF
    20313U,	// MTFSFI
    17192U,	// MTFSFIo
    536890777U,	// MTFSFb
    17041U,	// MTFSFo
    547180U,	// MTLR
    547180U,	// MTLR8
    536893917U,	// MTMSR
    536890413U,	// MTMSRD
    216458U,	// MTOCRF
    216458U,	// MTOCRF8
    536893897U,	// MTSPR
    536893897U,	// MTSPR8
    236004U,	// MTSR
    536892252U,	// MTSRIN
    540892U,	// MTVRSAVE
    704732U,	// MTVRSAVEv
    547141U,	// MTVSCR
    536890429U,	// MTVSRD
    536889508U,	// MTVSRWA
    536897157U,	// MTVSRWZ
    19373U,	// MULHD
    24057U,	// MULHDU
    17716U,	// MULHDUo
    16846U,	// MULHDo
    24680U,	// MULHW
    24183U,	// MULHWU
    17760U,	// MULHWUo
    17797U,	// MULHWo
    19405U,	// MULLD
    16870U,	// MULLDo
    20363U,	// MULLI
    20363U,	// MULLI8
    24722U,	// MULLW
    17813U,	// MULLWo
    11526U,	// MoveGOTtoLR
    11514U,	// MovePCtoLR
    10909U,	// MovePCtoLR8
    19459U,	// NAND
    19459U,	// NAND8
    16884U,	// NAND8o
    16884U,	// NANDo
    536890826U,	// NEG
    536890826U,	// NEG8
    536887962U,	// NEG8o
    536887962U,	// NEGo
    11815U,	// NOP
    9944U,	// NOP_GT_PWR6
    9956U,	// NOP_GT_PWR7
    22915U,	// NOR
    22915U,	// NOR8
    17535U,	// NOR8o
    17535U,	// NORo
    22908U,	// OR
    22908U,	// OR8
    17536U,	// OR8o
    19210U,	// ORC
    19210U,	// ORC8
    16798U,	// ORC8o
    16798U,	// ORCo
    20517U,	// ORI
    20517U,	// ORI8
    23490U,	// ORIS
    23490U,	// ORIS8
    17536U,	// ORo
    536890464U,	// POPCNTD
    536896025U,	// POPCNTW
    11626U,	// PPC32GOT
    11636U,	// PPC32PICGOT
    20474U,	// QVALIGNI
    20474U,	// QVALIGNIb
    20474U,	// QVALIGNIs
    20522U,	// QVESPLATI
    20522U,	// QVESPLATIb
    20522U,	// QVESPLATIs
    536893957U,	// QVFABS
    536893957U,	// QVFABSs
    19272U,	// QVFADD
    23155U,	// QVFADDS
    23155U,	// QVFADDSs
    536890292U,	// QVFCFID
    536894149U,	// QVFCFIDS
    536894977U,	// QVFCFIDU
    536894500U,	// QVFCFIDUS
    536890292U,	// QVFCFIDb
    22725U,	// QVFCMPEQ
    22725U,	// QVFCMPEQb
    22725U,	// QVFCMPEQbs
    23915U,	// QVFCMPGT
    23915U,	// QVFCMPGTb
    23915U,	// QVFCMPGTbs
    23931U,	// QVFCMPLT
    23931U,	// QVFCMPLTb
    23931U,	// QVFCMPLTbs
    21307U,	// QVFCPSGN
    21307U,	// QVFCPSGNs
    536890301U,	// QVFCTID
    536894987U,	// QVFCTIDU
    536897111U,	// QVFCTIDUZ
    536897048U,	// QVFCTIDZ
    536890301U,	// QVFCTIDb
    536895608U,	// QVFCTIW
    536895103U,	// QVFCTIWU
    536897122U,	// QVFCTIWUZ
    536897133U,	// QVFCTIWZ
    20762U,	// QVFLOGICAL
    20762U,	// QVFLOGICALb
    20762U,	// QVFLOGICALs
    19280U,	// QVFMADD
    23164U,	// QVFMADDS
    23164U,	// QVFMADDSs
    536893810U,	// QVFMR
    536893810U,	// QVFMRb
    536893810U,	// QVFMRs
    19052U,	// QVFMSUB
    23134U,	// QVFMSUBS
    23134U,	// QVFMSUBSs
    20854U,	// QVFMUL
    23505U,	// QVFMULS
    23505U,	// QVFMULSs
    536893965U,	// QVFNABS
    536893965U,	// QVFNABSs
    536890823U,	// QVFNEG
    536890823U,	// QVFNEGs
    19289U,	// QVFNMADD
    23174U,	// QVFNMADDS
    23174U,	// QVFNMADDSs
    19061U,	// QVFNMSUB
    23144U,	// QVFNMSUBS
    23144U,	// QVFNMSUBSs
    21104U,	// QVFPERM
    21104U,	// QVFPERMs
    536890633U,	// QVFRE
    536894249U,	// QVFRES
    536894249U,	// QVFRESs
    536891955U,	// QVFRIM
    536891955U,	// QVFRIMs
    536892236U,	// QVFRIN
    536892236U,	// QVFRINs
    536893108U,	// QVFRIP
    536893108U,	// QVFRIPs
    536897097U,	// QVFRIZ
    536897097U,	// QVFRIZs
    536893509U,	// QVFRSP
    536893509U,	// QVFRSPs
    536890648U,	// QVFRSQRTE
    536894257U,	// QVFRSQRTES
    536894257U,	// QVFRSQRTESs
    20806U,	// QVFSEL
    20806U,	// QVFSELb
    20806U,	// QVFSELbb
    20806U,	// QVFSELbs
    19044U,	// QVFSUB
    23125U,	// QVFSUBS
    23125U,	// QVFSUBSs
    21296U,	// QVFTSTNAN
    21296U,	// QVFTSTNANb
    21296U,	// QVFTSTNANbs
    19326U,	// QVFXMADD
    23214U,	// QVFXMADDS
    20862U,	// QVFXMUL
    23514U,	// QVFXMULS
    19299U,	// QVFXXCPNMADD
    23185U,	// QVFXXCPNMADDS
    19336U,	// QVFXXMADD
    23225U,	// QVFXXMADDS
    19313U,	// QVFXXNPMADD
    23200U,	// QVFXXNPMADDS
    268455660U,	// QVGPCI
    570451214U,	// QVLFCDUX
    570444040U,	// QVLFCDUXA
    570450669U,	// QVLFCDX
    570443960U,	// QVLFCDXA
    570451291U,	// QVLFCSUX
    570444084U,	// QVLFCSUXA
    570451042U,	// QVLFCSX
    570444000U,	// QVLFCSXA
    570451042U,	// QVLFCSXs
    184575267U,	// QVLFDUX
    570444063U,	// QVLFDUXA
    570450705U,	// QVLFDX
    570443981U,	// QVLFDXA
    570450705U,	// QVLFDXb
    570450623U,	// QVLFIWAX
    570443949U,	// QVLFIWAXA
    570451439U,	// QVLFIWZX
    570444139U,	// QVLFIWZXA
    184575344U,	// QVLFSUX
    570444107U,	// QVLFSUXA
    570451076U,	// QVLFSX
    570444021U,	// QVLFSXA
    570451076U,	// QVLFSXb
    570451076U,	// QVLFSXs
    570450722U,	// QVLPCLDX
    570451093U,	// QVLPCLSX
    7890069U,	// QVLPCLSXint
    570450732U,	// QVLPCRDX
    570451113U,	// QVLPCRSX
    570451224U,	// QVSTFCDUX
    570444051U,	// QVSTFCDUXA
    570446052U,	// QVSTFCDUXI
    570443852U,	// QVSTFCDUXIA
    570450678U,	// QVSTFCDX
    570443970U,	// QVSTFCDXA
    570446010U,	// QVSTFCDXI
    570443806U,	// QVSTFCDXIA
    570451301U,	// QVSTFCSUX
    570444095U,	// QVSTFCSUXA
    570446075U,	// QVSTFCSUXI
    570443877U,	// QVSTFCSUXIA
    570451051U,	// QVSTFCSX
    570444010U,	// QVSTFCSXA
    570446031U,	// QVSTFCSXI
    570443829U,	// QVSTFCSXIA
    570451051U,	// QVSTFCSXs
    184739116U,	// QVSTFDUX
    570444073U,	// QVSTFDUXA
    570446064U,	// QVSTFDUXI
    570443865U,	// QVSTFDUXIA
    570450713U,	// QVSTFDX
    570443990U,	// QVSTFDXA
    570446021U,	// QVSTFDXI
    570443818U,	// QVSTFDXIA
    570450713U,	// QVSTFDXb
    570451402U,	// QVSTFIWX
    570444128U,	// QVSTFIWXA
    184739193U,	// QVSTFSUX
    570444117U,	// QVSTFSUXA
    570446087U,	// QVSTFSUXI
    570443890U,	// QVSTFSUXIA
    184739193U,	// QVSTFSUXs
    570451084U,	// QVSTFSX
    570444030U,	// QVSTFSXA
    570446042U,	// QVSTFSXI
    570443841U,	// QVSTFSXIA
    570451084U,	// QVSTFSXs
    11434U,	// RESTORE_CR
    11566U,	// RESTORE_CRBIT
    11315U,	// RESTORE_VRSAVE
    11746U,	// RFCI
    11757U,	// RFDI
    248202U,	// RFEBB
    11762U,	// RFI
    11729U,	// RFID
    11751U,	// RFMCI
    20783U,	// RLDCL
    17292U,	// RLDCLo
    22817U,	// RLDCR
    17512U,	// RLDCRo
    19152U,	// RLDIC
    20790U,	// RLDICL
    20790U,	// RLDICL_32_64
    17300U,	// RLDICLo
    22837U,	// RLDICR
    17520U,	// RLDICRo
    16790U,	// RLDICo
    2785038226U,	// RLDIMI
    2785035057U,	// RLDIMIo
    3321909146U,	// RLWIMI
    3321909146U,	// RLWIMI8
    3321905978U,	// RLWIMI8o
    20378U,	// RLWIMIbm
    3321905978U,	// RLWIMIo
    17210U,	// RLWIMIobm
    21051U,	// RLWINM
    21051U,	// RLWINM8
    17341U,	// RLWINM8o
    21051U,	// RLWINMbm
    17341U,	// RLWINMo
    17341U,	// RLWINMobm
    21059U,	// RLWNM
    21059U,	// RLWNM8
    17350U,	// RLWNM8o
    21059U,	// RLWNMbm
    17350U,	// RLWNMo
    17350U,	// RLWNMobm
    20284U,	// ROTRDI
    17174U,	// ROTRDIo
    20632U,	// ROTRWI
    17274U,	// ROTRWIo
    11060U,	// ReadTB
    543517U,	// SC
    10488U,	// SELECT_CC_F4
    10720U,	// SELECT_CC_F8
    10513U,	// SELECT_CC_I4
    10765U,	// SELECT_CC_I8
    11078U,	// SELECT_CC_QBRC
    11107U,	// SELECT_CC_QFRC
    11196U,	// SELECT_CC_QSRC
    11167U,	// SELECT_CC_VRRC
    11136U,	// SELECT_CC_VSFRC
    11256U,	// SELECT_CC_VSRC
    11225U,	// SELECT_CC_VSSRC
    10502U,	// SELECT_F4
    10734U,	// SELECT_F8
    10527U,	// SELECT_I4
    10898U,	// SELECT_I8
    11094U,	// SELECT_QBRC
    11123U,	// SELECT_QFRC
    11212U,	// SELECT_QSRC
    11183U,	// SELECT_VRRC
    11153U,	// SELECT_VSFRC
    11272U,	// SELECT_VSRC
    11242U,	// SELECT_VSSRC
    11674U,	// SLBIA
    543973U,	// SLBIE
    536890557U,	// SLBMFEE
    536890640U,	// SLBMTE
    19426U,	// SLD
    20237U,	// SLDI
    17133U,	// SLDIo
    16878U,	// SLDo
    24745U,	// SLW
    24745U,	// SLW8
    17821U,	// SLW8o
    20579U,	// SLWI
    17231U,	// SLWIo
    17821U,	// SLWo
    11446U,	// SPILL_CR
    11581U,	// SPILL_CRBIT
    11331U,	// SPILL_VRSAVE
    19259U,	// SRAD
    20212U,	// SRADI
    17121U,	// SRADIo
    16815U,	// SRADo
    24599U,	// SRAW
    20543U,	// SRAWI
    17219U,	// SRAWIo
    17790U,	// SRAWo
    19504U,	// SRD
    20278U,	// SRDI
    17167U,	// SRDIo
    16898U,	// SRDo
    24993U,	// SRW
    24993U,	// SRW8
    17827U,	// SRW8o
    20626U,	// SRWI
    17267U,	// SRWIo
    17827U,	// SRWo
    117459507U,	// STB
    117459507U,	// STB8
    25486U,	// STBCIX
    570443234U,	// STBCX
    167960038U,	// STBU
    167960038U,	// STBU8
    184739079U,	// STBUX
    184739079U,	// STBUX8
    570450663U,	// STBX
    570450663U,	// STBX8
    117460073U,	// STD
    570450997U,	// STDBRX
    25501U,	// STDCIX
    570443242U,	// STDCX
    167960090U,	// STDU
    184739132U,	// STDUX
    570450757U,	// STDX
    117459879U,	// STFD
    167960050U,	// STFDU
    184739118U,	// STFDUX
    570450715U,	// STFDX
    570451404U,	// STFIWX
    117463887U,	// STFS
    167960156U,	// STFSU
    184739195U,	// STFSUX
    570451086U,	// STFSX
    117460610U,	// STH
    117460610U,	// STH8
    570451012U,	// STHBRX
    25509U,	// STHCIX
    570443250U,	// STHCX
    167960119U,	// STHU
    167960119U,	// STHU8
    184739146U,	// STHUX
    184739146U,	// STHUX8
    570450824U,	// STHX
    570450824U,	// STHX8
    117465267U,	// STMW
    20654U,	// STSWI
    570450655U,	// STVEBX
    570450816U,	// STVEHX
    570451394U,	// STVEWX
    570451364U,	// STVX
    570446221U,	// STVXL
    117465634U,	// STW
    117465634U,	// STW8
    570451027U,	// STWBRX
    25517U,	// STWCIX
    570443258U,	// STWCX
    167960209U,	// STWU
    167960209U,	// STWU8
    184739203U,	// STWUX
    184739203U,	// STWUX8
    570451421U,	// STWX
    570451421U,	// STWX8
    570450749U,	// STXSDX
    570451412U,	// STXSIWX
    570450953U,	// STXSSPX
    570450582U,	// STXVD2X
    570450599U,	// STXVW4X
    19791U,	// SUBF
    19791U,	// SUBF8
    17034U,	// SUBF8o
    19131U,	// SUBFC
    19131U,	// SUBFC8
    16766U,	// SUBFC8o
    16766U,	// SUBFCo
    19661U,	// SUBFE
    19661U,	// SUBFE8
    16968U,	// SUBFE8o
    16968U,	// SUBFEo
    19159U,	// SUBFIC
    19159U,	// SUBFIC8
    536890618U,	// SUBFME
    536890618U,	// SUBFME8
    536887896U,	// SUBFME8o
    536887896U,	// SUBFMEo
    536890689U,	// SUBFZE
    536890689U,	// SUBFZE8
    536887937U,	// SUBFZE8o
    536887937U,	// SUBFZEo
    17034U,	// SUBFo
    20184U,	// SUBI
    19138U,	// SUBIC
    16774U,	// SUBICo
    23470U,	// SUBIS
    543489U,	// SYNC
    705827U,	// TABORT
    8651123U,	// TABORTDC
    9175753U,	// TABORTDCI
    8651172U,	// TABORTWC
    9175765U,	// TABORTWCI
    575879U,	// TAILB
    575879U,	// TAILB8
    591705U,	// TAILBA
    591705U,	// TAILBA8
    11836U,	// TAILBCTR
    11836U,	// TAILBCTR8
    279511U,	// TBEGIN
    545042U,	// TCHECK
    11539U,	// TCHECK_RET
    537986768U,	// TCRETURNai
    537986675U,	// TCRETURNai8
    537971489U,	// TCRETURNdi
    537970305U,	// TCRETURNdi8
    537942279U,	// TCRETURNri
    537937551U,	// TCRETURNri8
    167013U,	// TD
    167756U,	// TDI
    279035U,	// TEND
    11680U,	// TLBIA
    9620716U,	// TLBIE
    545086U,	// TLBIEL
    536896182U,	// TLBIVAX
    543686U,	// TLBLD
    544644U,	// TLBLI
    11734U,	// TLBRE
    19714U,	// TLBRE2
    536896603U,	// TLBSX
    25691U,	// TLBSX2
    17922U,	// TLBSX2D
    11694U,	// TLBSYNC
    11740U,	// TLBWE
    19747U,	// TLBWE2
    11810U,	// TRAP
    9934U,	// TRECHKPT
    705451U,	// TRECLAIM
    279691U,	// TSR
    172555U,	// TW
    168117U,	// TWI
    536888989U,	// UPDATE_VRSAVE
    11423U,	// UpdateGBR
    22762U,	// VADDCUQ
    25136U,	// VADDCUW
    22781U,	// VADDECUQ
    21094U,	// VADDEUQM
    22071U,	// VADDFP
    23088U,	// VADDSBS
    23423U,	// VADDSHS
    23687U,	// VADDSWS
    20923U,	// VADDUBM
    23116U,	// VADDUBS
    20951U,	// VADDUDM
    20990U,	// VADDUHM
    23451U,	// VADDUHS
    21075U,	// VADDUQM
    21156U,	// VADDUWM
    23714U,	// VADDUWS
    19489U,	// VAND
    19124U,	// VANDC
    18891U,	// VAVGSB
    20000U,	// VAVGSH
    25007U,	// VAVGSW
    19009U,	// VAVGUB
    20112U,	// VAVGUH
    25154U,	// VAVGUW
    22744U,	// VBPERMQ
    3858785405U,	// VCFSX
    25725U,	// VCFSX_0
    3858785603U,	// VCFUX
    25923U,	// VCFUX_0
    22871U,	// VCIPHER
    23962U,	// VCIPHERLAST
    536890001U,	// VCLZB
    536890520U,	// VCLZD
    536891077U,	// VCLZH
    536896125U,	// VCLZW
    22035U,	// VCMPBFP
    17419U,	// VCMPBFPo
    22134U,	// VCMPEQFP
    17440U,	// VCMPEQFPo
    19034U,	// VCMPEQUB
    16695U,	// VCMPEQUBo
    19574U,	// VCMPEQUD
    16915U,	// VCMPEQUDo
    20137U,	// VCMPEQUH
    17075U,	// VCMPEQUHo
    25179U,	// VCMPEQUW
    17852U,	// VCMPEQUWo
    22088U,	// VCMPGEFP
    17429U,	// VCMPGEFPo
    22144U,	// VCMPGTFP
    17451U,	// VCMPGTFPo
    18944U,	// VCMPGTSB
    16676U,	// VCMPGTSBo
    19533U,	// VCMPGTSD
    16904U,	// VCMPGTSDo
    20053U,	// VCMPGTSH
    17056U,	// VCMPGTSHo
    25070U,	// VCMPGTSW
    17833U,	// VCMPGTSWo
    19071U,	// VCMPGTUB
    16730U,	// VCMPGTUBo
    19584U,	// VCMPGTUD
    16926U,	// VCMPGTUDo
    20147U,	// VCMPGTUH
    17086U,	// VCMPGTUHo
    25189U,	// VCMPGTUW
    17863U,	// VCMPGTUWo
    3858783484U,	// VCTSXS
    23804U,	// VCTSXS_0
    3858783492U,	// VCTUXS
    23812U,	// VCTUXS_0
    24264U,	// VEQV
    536893017U,	// VEXPTEFP
    536890177U,	// VGBBD
    536892991U,	// VLOGEFP
    22062U,	// VMADDFP
    22154U,	// VMAXFP
    18963U,	// VMAXSB
    19543U,	// VMAXSD
    20072U,	// VMAXSH
    25087U,	// VMAXSW
    19081U,	// VMAXUB
    19594U,	// VMAXUD
    20157U,	// VMAXUH
    25199U,	// VMAXUW
    23400U,	// VMHADDSHS
    23411U,	// VMHRADDSHS
    22126U,	// VMINFP
    18927U,	// VMINSB
    19525U,	// VMINSD
    20036U,	// VMINSH
    25053U,	// VMINSW
    19017U,	// VMINUB
    19566U,	// VMINUD
    20120U,	// VMINUH
    25162U,	// VMINUW
    20979U,	// VMLADDUHM
    24636U,	// VMRGEW
    18833U,	// VMRGHB
    19948U,	// VMRGHH
    24663U,	// VMRGHW
    18841U,	// VMRGLB
    19956U,	// VMRGLH
    24705U,	// VMRGLW
    24978U,	// VMRGOW
    20904U,	// VMSUMMBM
    20960U,	// VMSUMSHM
    23432U,	// VMSUMSHS
    20932U,	// VMSUMUBM
    20999U,	// VMSUMUHM
    23460U,	// VMSUMUHS
    18882U,	// VMULESB
    19991U,	// VMULESH
    24998U,	// VMULESW
    19000U,	// VMULEUB
    20103U,	// VMULEUH
    25145U,	// VMULEUW
    18935U,	// VMULOSB
    20044U,	// VMULOSH
    25061U,	// VMULOSW
    19025U,	// VMULOUB
    20128U,	// VMULOUH
    25170U,	// VMULOUW
    21165U,	// VMULUWM
    19474U,	// VNAND
    22861U,	// VNCIPHER
    23948U,	// VNCIPHERLAST
    22044U,	// VNMSUBFP
    22928U,	// VNOR
    22941U,	// VOR
    19223U,	// VORC
    21113U,	// VPERM
    22954U,	// VPERMXOR
    25585U,	// VPKPX
    23533U,	// VPKSDSS
    23599U,	// VPKSDUS
    23542U,	// VPKSHSS
    23617U,	// VPKSHUS
    23551U,	// VPKSWSS
    23635U,	// VPKSWUS
    21120U,	// VPKUDUM
    23608U,	// VPKUDUS
    21129U,	// VPKUHUM
    23626U,	// VPKUHUS
    21138U,	// VPKUWUM
    23644U,	// VPKUWUS
    18861U,	// VPMSUMB
    19439U,	// VPMSUMD
    19976U,	// VPMSUMH
    24761U,	// VPMSUMW
    536889897U,	// VPOPCNTB
    536890463U,	// VPOPCNTD
    536891000U,	// VPOPCNTH
    536896024U,	// VPOPCNTW
    536893010U,	// VREFP
    536891921U,	// VRFIM
    536892229U,	// VRFIN
    536893074U,	// VRFIP
    536897063U,	// VRFIZ
    18849U,	// VRLB
    19419U,	// VRLD
    19964U,	// VRLH
    24737U,	// VRLW
    536893027U,	// VRSQRTEFP
    536896461U,	// VSBOX
    20820U,	// VSEL
    19246U,	// VSHASIGMAD
    24586U,	// VSHASIGMAW
    20849U,	// VSL
    18855U,	// VSLB
    19425U,	// VSLD
    20484U,	// VSLDOI
    19970U,	// VSLH
    21403U,	// VSLO
    24744U,	// VSLW
    3858778657U,	// VSPLTB
    3858779760U,	// VSPLTH
    285231580U,	// VSPLTISB
    285232689U,	// VSPLTISH
    285237696U,	// VSPLTISW
    3858784775U,	// VSPLTW
    23019U,	// VSR
    18819U,	// VSRAB
    19258U,	// VSRAD
    19926U,	// VSRAH
    24598U,	// VSRAW
    18876U,	// VSRB
    19511U,	// VSRD
    19985U,	// VSRH
    21409U,	// VSRO
    24992U,	// VSRW
    22753U,	// VSUBCUQ
    25127U,	// VSUBCUW
    22771U,	// VSUBECUQ
    21084U,	// VSUBEUQM
    22054U,	// VSUBFP
    23079U,	// VSUBSBS
    23391U,	// VSUBSHS
    23678U,	// VSUBSWS
    20914U,	// VSUBUBM
    23107U,	// VSUBUBS
    20942U,	// VSUBUDM
    20970U,	// VSUBUHM
    23442U,	// VSUBUHS
    21066U,	// VSUBUQM
    21147U,	// VSUBUWM
    23705U,	// VSUBUWS
    23668U,	// VSUM2SWS
    23069U,	// VSUM4SBS
    23381U,	// VSUM4SHS
    23097U,	// VSUM4UBS
    23696U,	// VSUMSWS
    536896488U,	// VUPKHPX
    536889811U,	// VUPKHSB
    536890920U,	// VUPKHSH
    536895927U,	// VUPKHSW
    536896504U,	// VUPKLPX
    536889830U,	// VUPKLSB
    536890939U,	// VUPKLSH
    536895946U,	// VUPKLSW
    22972U,	// VXOR
    67131836U,	// V_SET0
    67131836U,	// V_SET0B
    67131836U,	// V_SET0H
    9986496U,	// V_SETALLONES
    9986496U,	// V_SETALLONESB
    9986496U,	// V_SETALLONESH
    548213U,	// WAIT
    543942U,	// WRTEE
    544593U,	// WRTEEI
    22949U,	// XOR
    22949U,	// XOR8
    17541U,	// XOR8o
    20516U,	// XORI
    20516U,	// XORI8
    23489U,	// XORIS
    23489U,	// XORIS8
    17541U,	// XORo
    536892788U,	// XSABSDP
    21534U,	// XSADDDP
    22314U,	// XSADDSP
    21815U,	// XSCMPODP
    21947U,	// XSCMPUDP
    21775U,	// XSCPSGNDP
    536893478U,	// XSCVDPSP
    536892271U,	// XSCVDPSPN
    536894177U,	// XSCVDPSXDS
    536894644U,	// XSCVDPSXWS
    536894213U,	// XSCVDPUXDS
    536894680U,	// XSCVDPUXWS
    536892737U,	// XSCVSPDP
    536892260U,	// XSCVSPDPN
    536892464U,	// XSCVSXDDP
    536893244U,	// XSCVSXDSP
    536892486U,	// XSCVUXDDP
    536893266U,	// XSCVUXDSP
    21957U,	// XSDIVDP
    22666U,	// XSDIVSP
    637555702U,	// XSMADDADP
    637556482U,	// XSMADDASP
    637555961U,	// XSMADDMDP
    637556732U,	// XSMADDMSP
    22017U,	// XSMAXDP
    21797U,	// XSMINDP
    637555656U,	// XSMSUBADP
    637556436U,	// XSMSUBASP
    637555915U,	// XSMSUBMDP
    637556686U,	// XSMSUBMSP
    21665U,	// XSMULDP
    22436U,	// XSMULSP
    536892768U,	// XSNABSDP
    536892559U,	// XSNEGDP
    637555678U,	// XSNMADDADP
    637556458U,	// XSNMADDASP
    637555937U,	// XSNMADDMDP
    637556708U,	// XSNMADDMSP
    637555632U,	// XSNMSUBADP
    637556412U,	// XSNMSUBASP
    637555891U,	// XSNMSUBMDP
    637556662U,	// XSNMSUBMSP
    536891404U,	// XSRDPI
    536890079U,	// XSRDPIC
    536891928U,	// XSRDPIM
    536893081U,	// XSRDPIP
    536897070U,	// XSRDPIZ
    536892519U,	// XSREDP
    536893299U,	// XSRESP
    536892535U,	// XSRSQRTEDP
    536893315U,	// XSRSQRTESP
    536892817U,	// XSSQRTDP
    536893547U,	// XSSQRTSP
    21516U,	// XSSUBDP
    22296U,	// XSSUBSP
    21966U,	// XSTDIVDP
    536892827U,	// XSTSQRTDP
    536892797U,	// XVABSDP
    536893527U,	// XVABSSP
    21543U,	// XVADDDP
    22323U,	// XVADDSP
    21845U,	// XVCMPEQDP
    17395U,	// XVCMPEQDPo
    22586U,	// XVCMPEQSP
    17481U,	// XVCMPEQSPo
    21596U,	// XVCMPGEDP
    17383U,	// XVCMPGEDPo
    22376U,	// XVCMPGESP
    17469U,	// XVCMPGESPo
    21894U,	// XVCMPGTDP
    17407U,	// XVCMPGTDPo
    22624U,	// XVCMPGTSP
    17500U,	// XVCMPGTSPo
    21786U,	// XVCPSGNDP
    22546U,	// XVCPSGNSP
    536893488U,	// XVCVDPSP
    536894189U,	// XVCVDPSXDS
    536894656U,	// XVCVDPSXWS
    536894225U,	// XVCVDPUXDS
    536894692U,	// XVCVDPUXWS
    536892747U,	// XVCVSPDP
    536894201U,	// XVCVSPSXDS
    536894668U,	// XVCVSPSXWS
    536894237U,	// XVCVSPUXDS
    536894704U,	// XVCVSPUXWS
    536892475U,	// XVCVSXDDP
    536893255U,	// XVCVSXDSP
    536892907U,	// XVCVSXWDP
    536893606U,	// XVCVSXWSP
    536892497U,	// XVCVUXDDP
    536893277U,	// XVCVUXDSP
    536892918U,	// XVCVUXWDP
    536893617U,	// XVCVUXWSP
    21986U,	// XVDIVDP
    22685U,	// XVDIVSP
    637555713U,	// XVMADDADP
    637556493U,	// XVMADDASP
    637555972U,	// XVMADDMDP
    637556743U,	// XVMADDMSP
    22026U,	// XVMAXDP
    22716U,	// XVMAXSP
    21806U,	// XVMINDP
    22557U,	// XVMINSP
    637555667U,	// XVMSUBADP
    637556447U,	// XVMSUBASP
    637555926U,	// XVMSUBMDP
    637556697U,	// XVMSUBMSP
    21674U,	// XVMULDP
    22445U,	// XVMULSP
    536892778U,	// XVNABSDP
    536893517U,	// XVNABSSP
    536892568U,	// XVNEGDP
    536893339U,	// XVNEGSP
    637555690U,	// XVNMADDADP
    637556470U,	// XVNMADDASP
    637555949U,	// XVNMADDMDP
    637556720U,	// XVNMADDMSP
    637555644U,	// XVNMSUBADP
    637556424U,	// XVNMSUBASP
    637555903U,	// XVNMSUBMDP
    637556674U,	// XVNMSUBMSP
    536891412U,	// XVRDPI
    536890088U,	// XVRDPIC
    536891937U,	// XVRDPIM
    536893090U,	// XVRDPIP
    536897079U,	// XVRDPIZ
    536892527U,	// XVREDP
    536893307U,	// XVRESP
    536891420U,	// XVRSPI
    536890097U,	// XVRSPIC
    536891946U,	// XVRSPIM
    536893099U,	// XVRSPIP
    536897088U,	// XVRSPIZ
    536892547U,	// XVRSQRTEDP
    536893327U,	// XVRSQRTESP
    536892849U,	// XVSQRTDP
    536893568U,	// XVSQRTSP
    21525U,	// XVSUBDP
    22305U,	// XVSUBSP
    21976U,	// XVTDIVDP
    22675U,	// XVTDIVSP
    536892838U,	// XVTSQRTDP
    536893557U,	// XVTSQRTSP
    19448U,	// XXLAND
    19106U,	// XXLANDC
    24248U,	// XXLEQV
    19456U,	// XXLNAND
    22912U,	// XXLNOR
    22905U,	// XXLOR
    19207U,	// XXLORC
    22905U,	// XXLORf
    22946U,	// XXLXOR
    24671U,	// XXMRGHW
    24713U,	// XXMRGLW
    20251U,	// XXPERMDI
    20826U,	// XXSEL
    20550U,	// XXSLDWI
    25103U,	// XXSPLTW
    166552U,	// gBC
    165725U,	// gBCA
    170480U,	// gBCCTR
    168296U,	// gBCCTRL
    168234U,	// gBCL
    166019U,	// gBCLA
    170336U,	// gBCLR
    168289U,	// gBCLRL
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// ADD4
    0U,	// ADD4TLS
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    2U,	// ADDI
    2U,	// ADDI8
    2U,	// ADDIC
    2U,	// ADDIC8
    2U,	// ADDICo
    2U,	// ADDIS
    2U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    4U,	// ANDISo
    4U,	// ANDISo8
    4U,	// ANDIo
    4U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_TLS
    0U,	// BPERMD
    0U,	// BRINC
    0U,	// CLRBHRB
    38U,	// CLRLSLDI
    38U,	// CLRLSLDIo
    104U,	// CLRLSLWI
    104U,	// CLRLSLWIo
    6U,	// CLRRDI
    6U,	// CLRRDIo
    8U,	// CLRRWI
    8U,	// CLRRWIo
    0U,	// CMPB
    0U,	// CMPB8
    0U,	// CMPD
    2U,	// CMPDI
    0U,	// CMPLD
    4U,	// CMPLDI
    0U,	// CMPLW
    4U,	// CMPLWI
    0U,	// CMPW
    2U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    10U,	// CRSET
    10U,	// CRUNSET
    0U,	// CRXOR
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTST
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DCCCI
    0U,	// DIVD
    0U,	// DIVDE
    0U,	// DIVDEU
    0U,	// DIVDEUo
    0U,	// DIVDEo
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWE
    0U,	// DIVWEU
    0U,	// DIVWEUo
    0U,	// DIVWEo
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    0U,	// EVABS
    12U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    0U,	// EVADDW
    0U,	// EVAND
    0U,	// EVANDC
    0U,	// EVCMPEQ
    0U,	// EVCMPGTS
    0U,	// EVCMPGTU
    0U,	// EVCMPLTS
    0U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    0U,	// EVDIVWS
    0U,	// EVDIVWU
    0U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    0U,	// EVMERGEHI
    0U,	// EVMERGEHILO
    0U,	// EVMERGELO
    0U,	// EVMERGELOHI
    0U,	// EVMHEGSMFAA
    0U,	// EVMHEGSMFAN
    0U,	// EVMHEGSMIAA
    0U,	// EVMHEGSMIAN
    0U,	// EVMHEGUMIAA
    0U,	// EVMHEGUMIAN
    0U,	// EVMHESMF
    0U,	// EVMHESMFA
    0U,	// EVMHESMFAAW
    0U,	// EVMHESMFANW
    0U,	// EVMHESMI
    0U,	// EVMHESMIA
    0U,	// EVMHESMIAAW
    0U,	// EVMHESMIANW
    0U,	// EVMHESSF
    0U,	// EVMHESSFA
    0U,	// EVMHESSFAAW
    0U,	// EVMHESSFANW
    0U,	// EVMHESSIAAW
    0U,	// EVMHESSIANW
    0U,	// EVMHEUMI
    0U,	// EVMHEUMIA
    0U,	// EVMHEUMIAAW
    0U,	// EVMHEUMIANW
    0U,	// EVMHEUSIAAW
    0U,	// EVMHEUSIANW
    0U,	// EVMHOGSMFAA
    0U,	// EVMHOGSMFAN
    0U,	// EVMHOGSMIAA
    0U,	// EVMHOGSMIAN
    0U,	// EVMHOGUMIAA
    0U,	// EVMHOGUMIAN
    0U,	// EVMHOSMF
    0U,	// EVMHOSMFA
    0U,	// EVMHOSMFAAW
    0U,	// EVMHOSMFANW
    0U,	// EVMHOSMI
    0U,	// EVMHOSMIA
    0U,	// EVMHOSMIAAW
    0U,	// EVMHOSMIANW
    0U,	// EVMHOSSF
    0U,	// EVMHOSSFA
    0U,	// EVMHOSSFAAW
    0U,	// EVMHOSSFANW
    0U,	// EVMHOSSIAAW
    0U,	// EVMHOSSIANW
    0U,	// EVMHOUMI
    0U,	// EVMHOUMIA
    0U,	// EVMHOUMIAAW
    0U,	// EVMHOUMIANW
    0U,	// EVMHOUSIAAW
    0U,	// EVMHOUSIANW
    0U,	// EVMRA
    0U,	// EVMWHSMF
    0U,	// EVMWHSMFA
    0U,	// EVMWHSMI
    0U,	// EVMWHSMIA
    0U,	// EVMWHSSF
    0U,	// EVMWHSSFA
    0U,	// EVMWHUMI
    0U,	// EVMWHUMIA
    0U,	// EVMWLSMIAAW
    0U,	// EVMWLSMIANW
    0U,	// EVMWLSSIAAW
    0U,	// EVMWLSSIANW
    0U,	// EVMWLUMI
    0U,	// EVMWLUMIA
    0U,	// EVMWLUMIAAW
    0U,	// EVMWLUMIANW
    0U,	// EVMWLUSIAAW
    0U,	// EVMWLUSIANW
    0U,	// EVMWSMF
    0U,	// EVMWSMFA
    0U,	// EVMWSMFAA
    0U,	// EVMWSMFAN
    0U,	// EVMWSMI
    0U,	// EVMWSMIA
    0U,	// EVMWSMIAA
    0U,	// EVMWSMIAN
    0U,	// EVMWSSF
    0U,	// EVMWSSFA
    0U,	// EVMWSSFAA
    0U,	// EVMWSSFAN
    0U,	// EVMWUMI
    0U,	// EVMWUMIA
    0U,	// EVMWUMIAA
    0U,	// EVMWUMIAN
    0U,	// EVNAND
    0U,	// EVNEG
    0U,	// EVNOR
    0U,	// EVOR
    0U,	// EVORC
    0U,	// EVRLW
    8U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSLW
    8U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    8U,	// EVSRWIS
    8U,	// EVSRWIU
    0U,	// EVSRWS
    0U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    0U,	// EVSUBFW
    0U,	// EVSUBIFW
    0U,	// EVXOR
    38U,	// EXTLDI
    38U,	// EXTLDIo
    104U,	// EXTLWI
    104U,	// EXTLWIo
    38U,	// EXTRDI
    38U,	// EXTRDIo
    104U,	// EXTRWI
    104U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGNDo
    0U,	// FCPSGNS
    0U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    160U,	// FMADD
    160U,	// FMADDS
    160U,	// FMADDSo
    160U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    160U,	// FMSUB
    160U,	// FMSUBS
    160U,	// FMSUBSo
    160U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    160U,	// FNMADD
    160U,	// FNMADDS
    160U,	// FNMADDSo
    160U,	// FNMADDo
    160U,	// FNMSUB
    160U,	// FNMSUBS
    160U,	// FNMSUBSo
    160U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    160U,	// FSELD
    160U,	// FSELDo
    160U,	// FSELS
    160U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// ICBI
    0U,	// ICBT
    0U,	// ICCCI
    104U,	// INSLWI
    104U,	// INSLWIo
    38U,	// INSRDI
    38U,	// INSRDIo
    104U,	// INSRWI
    104U,	// INSRWIo
    160U,	// ISEL
    160U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    0U,	// LDBRX
    0U,	// LDCIX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    8U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZtoc
    0U,	// LXSDX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSPX
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVW4X
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRWZ
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    160U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFIo
    0U,	// MTFSFb
    160U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    0U,	// MTVSRWA
    0U,	// MTVSRWZ
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    2U,	// MULLI
    2U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    4U,	// ORI
    4U,	// ORI8
    4U,	// ORIS
    4U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    224U,	// QVALIGNI
    224U,	// QVALIGNIb
    224U,	// QVALIGNIs
    14U,	// QVESPLATI
    14U,	// QVESPLATIb
    14U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    0U,	// QVFADD
    0U,	// QVFADDS
    0U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    0U,	// QVFCMPEQ
    0U,	// QVFCMPEQb
    0U,	// QVFCMPEQbs
    0U,	// QVFCMPGT
    0U,	// QVFCMPGTb
    0U,	// QVFCMPGTbs
    0U,	// QVFCMPLT
    0U,	// QVFCMPLTb
    0U,	// QVFCMPLTbs
    0U,	// QVFCPSGN
    0U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    288U,	// QVFLOGICAL
    288U,	// QVFLOGICALb
    288U,	// QVFLOGICALs
    16U,	// QVFMADD
    16U,	// QVFMADDS
    16U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    16U,	// QVFMSUB
    16U,	// QVFMSUBS
    16U,	// QVFMSUBSs
    0U,	// QVFMUL
    0U,	// QVFMULS
    0U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    16U,	// QVFNMADD
    16U,	// QVFNMADDS
    16U,	// QVFNMADDSs
    16U,	// QVFNMSUB
    16U,	// QVFNMSUBS
    16U,	// QVFNMSUBSs
    160U,	// QVFPERM
    160U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    16U,	// QVFSEL
    16U,	// QVFSELb
    16U,	// QVFSELbb
    16U,	// QVFSELbs
    0U,	// QVFSUB
    0U,	// QVFSUBS
    0U,	// QVFSUBSs
    0U,	// QVFTSTNAN
    0U,	// QVFTSTNANb
    0U,	// QVFTSTNANbs
    16U,	// QVFXMADD
    16U,	// QVFXMADDS
    0U,	// QVFXMUL
    0U,	// QVFXMULS
    16U,	// QVFXXCPNMADD
    16U,	// QVFXXCPNMADDS
    16U,	// QVFXXMADD
    16U,	// QVFXXMADDS
    16U,	// QVFXXNPMADD
    16U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    32U,	// RLDCL
    32U,	// RLDCLo
    32U,	// RLDCR
    32U,	// RLDCRo
    38U,	// RLDIC
    38U,	// RLDICL
    38U,	// RLDICL_32_64
    38U,	// RLDICLo
    38U,	// RLDICR
    38U,	// RLDICRo
    38U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    168U,	// RLWIMIbm
    0U,	// RLWIMIo
    168U,	// RLWIMIobm
    616U,	// RLWINM
    616U,	// RLWINM8
    616U,	// RLWINM8o
    168U,	// RLWINMbm
    616U,	// RLWINMo
    168U,	// RLWINMobm
    608U,	// RLWNM
    608U,	// RLWNM8
    608U,	// RLWNM8o
    168U,	// RLWNMbm
    608U,	// RLWNMo
    168U,	// RLWNMobm
    6U,	// ROTRDI
    6U,	// ROTRDIo
    8U,	// ROTRWI
    8U,	// ROTRWIo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBMFEE
    0U,	// SLBMTE
    0U,	// SLD
    6U,	// SLDI
    6U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLW8
    0U,	// SLW8o
    8U,	// SLWI
    8U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    6U,	// SRADI
    6U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    8U,	// SRAWI
    8U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    6U,	// SRDI
    6U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRW8
    0U,	// SRW8o
    8U,	// SRWI
    8U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBCIX
    0U,	// STBCX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    0U,	// STDBRX
    0U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHCIX
    0U,	// STHCX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    8U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWBRX
    0U,	// STWCIX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STXSDX
    0U,	// STXSIWX
    0U,	// STXSSPX
    0U,	// STXVD2X
    0U,	// STXVW4X
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    2U,	// SUBFIC
    2U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    2U,	// SUBI
    2U,	// SUBIC
    2U,	// SUBICo
    2U,	// SUBIS
    0U,	// SYNC
    0U,	// TABORT
    0U,	// TABORTDC
    0U,	// TABORTDCI
    0U,	// TABORTWC
    0U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    2U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    0U,	// TLBRE2
    0U,	// TLBSX
    0U,	// TLBSX2
    0U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    0U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    0U,	// TW
    2U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    0U,	// VADDCUQ
    0U,	// VADDCUW
    160U,	// VADDECUQ
    160U,	// VADDEUQM
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUDM
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUQM
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VBPERMQ
    0U,	// VCFSX
    1U,	// VCFSX_0
    0U,	// VCFUX
    1U,	// VCFUX_0
    0U,	// VCIPHER
    0U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZW
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUD
    0U,	// VCMPEQUDo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSD
    0U,	// VCMPGTSDo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUD
    0U,	// VCMPGTUDo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCTSXS
    1U,	// VCTSXS_0
    0U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VEQV
    0U,	// VEXPTEFP
    0U,	// VGBBD
    0U,	// VLOGEFP
    160U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSD
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUD
    0U,	// VMAXUH
    0U,	// VMAXUW
    160U,	// VMHADDSHS
    160U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSD
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUD
    0U,	// VMINUH
    0U,	// VMINUW
    160U,	// VMLADDUHM
    0U,	// VMRGEW
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    0U,	// VMRGOW
    160U,	// VMSUMMBM
    160U,	// VMSUMSHM
    160U,	// VMSUMSHS
    160U,	// VMSUMUBM
    160U,	// VMSUMUHM
    160U,	// VMSUMUHS
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULESW
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULEUW
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOSW
    0U,	// VMULOUB
    0U,	// VMULOUH
    0U,	// VMULOUW
    0U,	// VMULUWM
    0U,	// VNAND
    0U,	// VNCIPHER
    0U,	// VNCIPHERLAST
    160U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    0U,	// VORC
    160U,	// VPERM
    160U,	// VPERMXOR
    0U,	// VPKPX
    0U,	// VPKSDSS
    0U,	// VPKSDUS
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUDUM
    0U,	// VPKUDUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VPMSUMB
    0U,	// VPMSUMD
    0U,	// VPMSUMH
    0U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLD
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    160U,	// VSEL
    18U,	// VSHASIGMAD
    18U,	// VSHASIGMAW
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLD
    96U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTH
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAD
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRD
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRW
    0U,	// VSUBCUQ
    0U,	// VSUBCUW
    160U,	// VSUBECUQ
    160U,	// VSUBEUQM
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUDM
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUQM
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    0U,	// VXOR
    10U,	// V_SET0
    10U,	// V_SET0B
    10U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    4U,	// XORI
    4U,	// XORI8
    4U,	// XORIS
    4U,	// XORIS8
    0U,	// XORo
    0U,	// XSABSDP
    0U,	// XSADDDP
    0U,	// XSADDSP
    0U,	// XSCMPODP
    0U,	// XSCMPUDP
    0U,	// XSCPSGNDP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXWS
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    0U,	// XSDIVDP
    0U,	// XSDIVSP
    1U,	// XSMADDADP
    1U,	// XSMADDASP
    1U,	// XSMADDMDP
    1U,	// XSMADDMSP
    0U,	// XSMAXDP
    0U,	// XSMINDP
    1U,	// XSMSUBADP
    1U,	// XSMSUBASP
    1U,	// XSMSUBMDP
    1U,	// XSMSUBMSP
    0U,	// XSMULDP
    0U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNEGDP
    1U,	// XSNMADDADP
    1U,	// XSNMADDASP
    1U,	// XSNMADDMDP
    1U,	// XSNMADDMSP
    1U,	// XSNMSUBADP
    1U,	// XSNMSUBASP
    1U,	// XSNMSUBMDP
    1U,	// XSNMSUBMSP
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTSP
    0U,	// XSSUBDP
    0U,	// XSSUBSP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDPo
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSPo
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDPo
    0U,	// XVCMPGESP
    0U,	// XVCMPGESPo
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDPo
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSPo
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVSPDP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    1U,	// XVMADDADP
    1U,	// XVMADDASP
    1U,	// XVMADDMDP
    1U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    1U,	// XVMSUBADP
    1U,	// XVMSUBASP
    1U,	// XVMSUBMDP
    1U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    1U,	// XVNMADDADP
    1U,	// XVNMADDASP
    1U,	// XVNMADDMDP
    1U,	// XVNMADDMSP
    1U,	// XVNMSUBADP
    1U,	// XVNMSUBASP
    1U,	// XVNMSUBMDP
    1U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLEQV
    0U,	// XXLNAND
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORC
    0U,	// XXLORf
    0U,	// XXLXOR
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    224U,	// XXPERMDI
    160U,	// XXSEL
    224U,	// XXSLDWI
    14U,	// XXSPLTW
    20U,	// gBC
    22U,	// gBCA
    0U,	// gBCCTR
    0U,	// gBCCTRL
    20U,	// gBCL
    22U,	// gBCLA
    0U,	// gBCLR
    0U,	// gBCLRL
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 14) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADDISdtprelHA, ADDISd...
    return;
    break;
  case 1:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O);
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O);
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O);
    break;
  case 5:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc");
    break;
  case 6:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O);
    return;
    break;
  case 7:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O);
    break;
  case 8:
    // DCBA, DCBF, DCBI, DCBST, DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, DCBTSTT, ...
    printMemRegReg(MI, 0, O);
    break;
  case 9:
    // DCBT, DCBTST
    printMemRegReg(MI, 1, O);
    O << ", ";
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 10:
    // DSS, MBAR, MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTR...
    printU5ImmOperand(MI, 0, O);
    break;
  case 11:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O);
    break;
  case 12:
    // ICBT
    printU4ImmOperand(MI, 0, O);
    O << ", ";
    printMemRegReg(MI, 1, O);
    return;
    break;
  case 13:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MTSR
    printU4ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    return;
    break;
  case 15:
    // RFEBB
    printU1ImmOperand(MI, 0, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTDCI, TABORTWC, TABORTWCI
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 17:
    // TBEGIN, TEND, TSR
    printU1ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 19) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ADJCALLSTACKDOWN, B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, ...
    O << ' ';
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    O << 'a';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    O << 'l';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    O << "la";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    O << "lr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0";
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop";
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268";
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256";
    return;
    break;
  case 15:
    // QVLPCLSXint
    O << ", 0, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTWC
    printOperand(MI, 3, O);
    return;
    break;
  case 17:
    // TABORTDCI, TABORTWCI
    printU5ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // TLBIE
    O << ',';
    printOperand(MI, 0, O);
    return;
    break;
  case 19:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1";
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBARX, LBARXL, LBZX, LBZX8, ...
    printMemRegReg(MI, 1, O);
    break;
  case 3:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O);
    return;
    break;
  case 4:
    // CRSET, CRUNSET, MTDCR, V_SET0, V_SET0B, V_SET0H
    printOperand(MI, 0, O);
    break;
  case 5:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, O);
    break;
  case 6:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 7:
    // EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVLWHE, ...
    printMemRegImm(MI, 1, O);
    return;
    break;
  case 8:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // LA
    printS16ImmOperand(MI, 2, O);
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 10:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O);
    return;
    break;
  case 11:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O);
    return;
    break;
  case 12:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 13:
    // MFBHRBE
    printU10ImmOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O);
    return;
    break;
  case 15:
    // MFSR
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 16:
    // QVGPCI
    printU12ImmOperand(MI, 1, O);
    return;
    break;
  case 17:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 29) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, CNTLZD...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' ';
    printOperand(MI, 3, O);
    O << ' ';
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 4:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1";
    return;
    break;
  case 5:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O);
    O << ", ";
    printU6ImmOperand(MI, 4, O);
    return;
    break;
  case 6:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O);
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    O << ", ";
    printU5ImmOperand(MI, 5, O);
    return;
    break;
  case 7:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0";
    return;
    break;
  case 9:
    // XSMADDADP, XSMADDASP, XSMADDMDP, XSMADDMSP, XSMSUBADP, XSMSUBASP, XSMS...
    printOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 33) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O);
    break;
  case 4:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EVRLWI, EVSLWI, EVSRWIS, EVSRWIU...
    printU5ImmOperand(MI, 2, O);
    break;
  case 5:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // EVADDIW
    printOperand(MI, 1, O);
    return;
    break;
  case 7:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  case 8:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // VSHASIGMAD, VSHASIGMAW
    printU1ImmOperand(MI, 2, O);
    O << ", ";
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 10:
    // gBC, gBCL
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 11:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    O << ", ";
  } else {
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    return;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O);
    break;
  case 2:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O);
    return;
    break;
  case 3:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XXPERMDI, XXSLDWI
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 4:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 41) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 310 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'q', '1', '0', 0,
  /* 61 */ 'r', '1', '0', 0,
  /* 65 */ 'v', 's', '1', '0', 0,
  /* 70 */ 'v', '1', '0', 0,
  /* 74 */ 'f', '2', '0', 0,
  /* 78 */ 'q', '2', '0', 0,
  /* 82 */ 'r', '2', '0', 0,
  /* 86 */ 'v', 's', '2', '0', 0,
  /* 91 */ 'v', '2', '0', 0,
  /* 95 */ 'f', '3', '0', 0,
  /* 99 */ 'q', '3', '0', 0,
  /* 103 */ 'r', '3', '0', 0,
  /* 107 */ 'v', 's', '3', '0', 0,
  /* 112 */ 'v', '3', '0', 0,
  /* 116 */ 'v', 's', '4', '0', 0,
  /* 121 */ 'v', 's', '5', '0', 0,
  /* 126 */ 'v', 's', '6', '0', 0,
  /* 131 */ 'f', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'c', 'r', '0', 0,
  /* 141 */ 'v', 's', '0', 0,
  /* 145 */ 'v', '0', 0,
  /* 148 */ 'f', '1', '1', 0,
  /* 152 */ 'q', '1', '1', 0,
  /* 156 */ 'r', '1', '1', 0,
  /* 160 */ 'v', 's', '1', '1', 0,
  /* 165 */ 'v', '1', '1', 0,
  /* 169 */ 'f', '2', '1', 0,
  /* 173 */ 'q', '2', '1', 0,
  /* 177 */ 'r', '2', '1', 0,
  /* 181 */ 'v', 's', '2', '1', 0,
  /* 186 */ 'v', '2', '1', 0,
  /* 190 */ 'f', '3', '1', 0,
  /* 194 */ 'q', '3', '1', 0,
  /* 198 */ 'r', '3', '1', 0,
  /* 202 */ 'v', 's', '3', '1', 0,
  /* 207 */ 'v', '3', '1', 0,
  /* 211 */ 'v', 's', '4', '1', 0,
  /* 216 */ 'v', 's', '5', '1', 0,
  /* 221 */ 'v', 's', '6', '1', 0,
  /* 226 */ 'f', '1', 0,
  /* 229 */ 'q', '1', 0,
  /* 232 */ 'c', 'r', '1', 0,
  /* 236 */ 'v', 's', '1', 0,
  /* 240 */ 'v', '1', 0,
  /* 243 */ 'f', '1', '2', 0,
  /* 247 */ 'q', '1', '2', 0,
  /* 251 */ 'r', '1', '2', 0,
  /* 255 */ 'v', 's', '1', '2', 0,
  /* 260 */ 'v', '1', '2', 0,
  /* 264 */ 'f', '2', '2', 0,
  /* 268 */ 'q', '2', '2', 0,
  /* 272 */ 'r', '2', '2', 0,
  /* 276 */ 'v', 's', '2', '2', 0,
  /* 281 */ 'v', '2', '2', 0,
  /* 285 */ 'v', 's', '3', '2', 0,
  /* 290 */ 'v', 's', '4', '2', 0,
  /* 295 */ 'v', 's', '5', '2', 0,
  /* 300 */ 'v', 's', '6', '2', 0,
  /* 305 */ 'f', '2', 0,
  /* 308 */ 'q', '2', 0,
  /* 311 */ 'c', 'r', '2', 0,
  /* 315 */ 'v', 's', '2', 0,
  /* 319 */ 'v', '2', 0,
  /* 322 */ 'f', '1', '3', 0,
  /* 326 */ 'q', '1', '3', 0,
  /* 330 */ 'r', '1', '3', 0,
  /* 334 */ 'v', 's', '1', '3', 0,
  /* 339 */ 'v', '1', '3', 0,
  /* 343 */ 'f', '2', '3', 0,
  /* 347 */ 'q', '2', '3', 0,
  /* 351 */ 'r', '2', '3', 0,
  /* 355 */ 'v', 's', '2', '3', 0,
  /* 360 */ 'v', '2', '3', 0,
  /* 364 */ 'v', 's', '3', '3', 0,
  /* 369 */ 'v', 's', '4', '3', 0,
  /* 374 */ 'v', 's', '5', '3', 0,
  /* 379 */ 'v', 's', '6', '3', 0,
  /* 384 */ 'f', '3', 0,
  /* 387 */ 'q', '3', 0,
  /* 390 */ 'c', 'r', '3', 0,
  /* 394 */ 'v', 's', '3', 0,
  /* 398 */ 'v', '3', 0,
  /* 401 */ 'f', '1', '4', 0,
  /* 405 */ 'q', '1', '4', 0,
  /* 409 */ 'r', '1', '4', 0,
  /* 413 */ 'v', 's', '1', '4', 0,
  /* 418 */ 'v', '1', '4', 0,
  /* 422 */ 'f', '2', '4', 0,
  /* 426 */ 'q', '2', '4', 0,
  /* 430 */ 'r', '2', '4', 0,
  /* 434 */ 'v', 's', '2', '4', 0,
  /* 439 */ 'v', '2', '4', 0,
  /* 443 */ 'v', 's', '3', '4', 0,
  /* 448 */ 'v', 's', '4', '4', 0,
  /* 453 */ 'v', 's', '5', '4', 0,
  /* 458 */ 'f', '4', 0,
  /* 461 */ 'q', '4', 0,
  /* 464 */ 'c', 'r', '4', 0,
  /* 468 */ 'v', 's', '4', 0,
  /* 472 */ 'v', '4', 0,
  /* 475 */ 'f', '1', '5', 0,
  /* 479 */ 'q', '1', '5', 0,
  /* 483 */ 'r', '1', '5', 0,
  /* 487 */ 'v', 's', '1', '5', 0,
  /* 492 */ 'v', '1', '5', 0,
  /* 496 */ 'f', '2', '5', 0,
  /* 500 */ 'q', '2', '5', 0,
  /* 504 */ 'r', '2', '5', 0,
  /* 508 */ 'v', 's', '2', '5', 0,
  /* 513 */ 'v', '2', '5', 0,
  /* 517 */ 'v', 's', '3', '5', 0,
  /* 522 */ 'v', 's', '4', '5', 0,
  /* 527 */ 'v', 's', '5', '5', 0,
  /* 532 */ 'f', '5', 0,
  /* 535 */ 'q', '5', 0,
  /* 538 */ 'c', 'r', '5', 0,
  /* 542 */ 'v', 's', '5', 0,
  /* 546 */ 'v', '5', 0,
  /* 549 */ 'f', '1', '6', 0,
  /* 553 */ 'q', '1', '6', 0,
  /* 557 */ 'r', '1', '6', 0,
  /* 561 */ 'v', 's', '1', '6', 0,
  /* 566 */ 'v', '1', '6', 0,
  /* 570 */ 'f', '2', '6', 0,
  /* 574 */ 'q', '2', '6', 0,
  /* 578 */ 'r', '2', '6', 0,
  /* 582 */ 'v', 's', '2', '6', 0,
  /* 587 */ 'v', '2', '6', 0,
  /* 591 */ 'v', 's', '3', '6', 0,
  /* 596 */ 'v', 's', '4', '6', 0,
  /* 601 */ 'v', 's', '5', '6', 0,
  /* 606 */ 'f', '6', 0,
  /* 609 */ 'q', '6', 0,
  /* 612 */ 'c', 'r', '6', 0,
  /* 616 */ 'v', 's', '6', 0,
  /* 620 */ 'v', '6', 0,
  /* 623 */ 'f', '1', '7', 0,
  /* 627 */ 'q', '1', '7', 0,
  /* 631 */ 'r', '1', '7', 0,
  /* 635 */ 'v', 's', '1', '7', 0,
  /* 640 */ 'v', '1', '7', 0,
  /* 644 */ 'f', '2', '7', 0,
  /* 648 */ 'q', '2', '7', 0,
  /* 652 */ 'r', '2', '7', 0,
  /* 656 */ 'v', 's', '2', '7', 0,
  /* 661 */ 'v', '2', '7', 0,
  /* 665 */ 'v', 's', '3', '7', 0,
  /* 670 */ 'v', 's', '4', '7', 0,
  /* 675 */ 'v', 's', '5', '7', 0,
  /* 680 */ 'f', '7', 0,
  /* 683 */ 'q', '7', 0,
  /* 686 */ 'c', 'r', '7', 0,
  /* 690 */ 'v', 's', '7', 0,
  /* 694 */ 'v', '7', 0,
  /* 697 */ 'f', '1', '8', 0,
  /* 701 */ 'q', '1', '8', 0,
  /* 705 */ 'r', '1', '8', 0,
  /* 709 */ 'v', 's', '1', '8', 0,
  /* 714 */ 'v', '1', '8', 0,
  /* 718 */ 'f', '2', '8', 0,
  /* 722 */ 'q', '2', '8', 0,
  /* 726 */ 'r', '2', '8', 0,
  /* 730 */ 'v', 's', '2', '8', 0,
  /* 735 */ 'v', '2', '8', 0,
  /* 739 */ 'v', 's', '3', '8', 0,
  /* 744 */ 'v', 's', '4', '8', 0,
  /* 749 */ 'v', 's', '5', '8', 0,
  /* 754 */ 'f', '8', 0,
  /* 757 */ 'q', '8', 0,
  /* 760 */ 'r', '8', 0,
  /* 763 */ 'v', 's', '8', 0,
  /* 767 */ 'v', '8', 0,
  /* 770 */ 'f', '1', '9', 0,
  /* 774 */ 'q', '1', '9', 0,
  /* 778 */ 'r', '1', '9', 0,
  /* 782 */ 'v', 's', '1', '9', 0,
  /* 787 */ 'v', '1', '9', 0,
  /* 791 */ 'f', '2', '9', 0,
  /* 795 */ 'q', '2', '9', 0,
  /* 799 */ 'r', '2', '9', 0,
  /* 803 */ 'v', 's', '2', '9', 0,
  /* 808 */ 'v', '2', '9', 0,
  /* 812 */ 'v', 's', '3', '9', 0,
  /* 817 */ 'v', 's', '4', '9', 0,
  /* 822 */ 'v', 's', '5', '9', 0,
  /* 827 */ 'f', '9', 0,
  /* 830 */ 'q', '9', 0,
  /* 833 */ 'r', '9', 0,
  /* 836 */ 'v', 's', '9', 0,
  /* 840 */ 'v', '9', 0,
  /* 843 */ 'c', 'a', 0,
  /* 846 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 853 */ 'l', 'r', 0,
  /* 856 */ 'c', 't', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    36, 843, 856, 18, 853, 0, 846, 55, 36, 137, 232, 311, 390, 464, 
    538, 612, 686, 856, 131, 226, 305, 384, 458, 532, 606, 680, 754, 827, 
    53, 148, 243, 322, 401, 475, 549, 623, 697, 770, 74, 169, 264, 343, 
    422, 496, 570, 644, 718, 791, 95, 190, 18, 853, 134, 229, 308, 387, 
    461, 535, 609, 683, 757, 830, 57, 152, 247, 326, 405, 479, 553, 627, 
    701, 774, 78, 173, 268, 347, 426, 500, 574, 648, 722, 795, 99, 194, 
    138, 233, 312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 251, 330, 
    409, 483, 557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 578, 652, 
    726, 799, 103, 198, 145, 240, 319, 398, 472, 546, 620, 694, 767, 840, 
    70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 91, 186, 281, 360, 
    439, 513, 587, 661, 735, 808, 112, 207, 285, 364, 443, 517, 591, 665, 
    739, 812, 116, 211, 290, 369, 448, 522, 596, 670, 744, 817, 121, 216, 
    295, 374, 453, 527, 601, 675, 749, 822, 126, 221, 300, 379, 285, 364, 
    443, 517, 591, 665, 739, 812, 116, 211, 290, 369, 448, 522, 596, 670, 
    744, 817, 121, 216, 295, 374, 453, 527, 601, 675, 749, 822, 126, 221, 
    300, 379, 141, 236, 315, 394, 468, 542, 616, 690, 763, 836, 65, 160, 
    255, 334, 413, 487, 561, 635, 709, 782, 86, 181, 276, 355, 434, 508, 
    582, 656, 730, 803, 107, 202, 138, 233, 312, 391, 465, 539, 613, 687, 
    760, 833, 61, 156, 251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 
    272, 351, 430, 504, 578, 652, 726, 799, 103, 198, 55, 245, 551, 54, 
    402, 698, 265, 571, 96, 150, 477, 772, 323, 624, 170, 497, 792, 55, 
    403, 699, 244, 550, 75, 423, 719, 324, 625, 149, 476, 771, 344, 645, 
    191, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CNTLZW:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlzw $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CNTLZWo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlzw. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MBAR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return false;
  case PPC::MFDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return false;
  case PPC::MTFSF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFIo:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 17 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 18 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 19 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 990 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 991 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 28 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 29 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 48 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 284 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 285 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 989 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 988 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 536 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 538 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 540 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 542 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 537 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 539 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 541 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 543 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 528 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 530 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 532 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 534 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 529 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 531 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 533 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 535 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1018 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1019 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 981 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 980 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 512 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 986 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::QVFLOGICALb:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TLBRE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TLBWE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
