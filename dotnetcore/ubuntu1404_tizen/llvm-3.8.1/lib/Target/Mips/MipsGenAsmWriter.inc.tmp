/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'v', 'm', 'm', '0', 9, 0,
  /* 28 */ 'm', 't', 'm', '0', 9, 0,
  /* 34 */ 'm', 't', 'p', '0', 9, 0,
  /* 40 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 47 */ 'l', 'd', 'c', '1', 9, 0,
  /* 53 */ 's', 'd', 'c', '1', 9, 0,
  /* 59 */ 'c', 'f', 'c', '1', 9, 0,
  /* 65 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 72 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 79 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 86 */ 'c', 't', 'c', '1', 9, 0,
  /* 92 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 99 */ 'l', 'w', 'c', '1', 9, 0,
  /* 105 */ 's', 'w', 'c', '1', 9, 0,
  /* 111 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 118 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 125 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 132 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 139 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 146 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 153 */ 'm', 't', 'm', '1', 9, 0,
  /* 159 */ 'm', 't', 'p', '1', 9, 0,
  /* 165 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 172 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 181 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 190 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 198 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 208 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 216 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 224 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 231 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 238 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 247 */ 'l', 'd', 'c', '2', 9, 0,
  /* 253 */ 's', 'd', 'c', '2', 9, 0,
  /* 259 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 266 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 273 */ 'l', 'w', 'c', '2', 9, 0,
  /* 279 */ 's', 'w', 'c', '2', 9, 0,
  /* 285 */ 'm', 't', 'm', '2', 9, 0,
  /* 291 */ 'm', 't', 'p', '2', 9, 0,
  /* 297 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 306 */ 'l', 'd', 'c', '3', 9, 0,
  /* 312 */ 's', 'd', 'c', '3', 9, 0,
  /* 318 */ 'l', 'w', 'c', '3', 9, 0,
  /* 324 */ 's', 'w', 'c', '3', 9, 0,
  /* 330 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 339 */ 's', 'b', '1', '6', 9, 0,
  /* 345 */ 'b', 'c', '1', '6', 9, 0,
  /* 351 */ 'j', 'r', 'c', '1', '6', 9, 0,
  /* 358 */ 'b', 'n', 'e', 'z', 'c', '1', '6', 9, 0,
  /* 367 */ 'b', 'e', 'q', 'z', 'c', '1', '6', 9, 0,
  /* 376 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 383 */ 'm', 'o', 'v', 'e', '1', '6', 9, 0,
  /* 391 */ 's', 'h', '1', '6', 9, 0,
  /* 397 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 405 */ 'l', 'i', '1', '6', 9, 0,
  /* 411 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 420 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 427 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 434 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 441 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 448 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 457 */ 'j', 'r', '1', '6', 9, 0,
  /* 463 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 470 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 479 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 486 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 493 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 501 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 509 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 516 */ 'l', 'w', '1', '6', 9, 0,
  /* 522 */ 's', 'w', '1', '6', 9, 0,
  /* 528 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 536 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 544 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 560 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 577 */ 'd', 'l', 'a', 9, 0,
  /* 582 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 598 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 615 */ 'd', 's', 'r', 'a', 9, 0,
  /* 621 */ 'd', 'l', 's', 'a', 9, 0,
  /* 627 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 635 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 643 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 652 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 661 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 671 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 680 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 687 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 695 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 703 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 710 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 719 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 728 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 737 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 745 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 753 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 761 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 769 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 777 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 786 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 795 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 803 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 811 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 821 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 829 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 838 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 847 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 856 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 864 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 872 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 882 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 892 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 901 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 910 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 919 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 927 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 936 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 944 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 951 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 958 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 967 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 975 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 982 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 990 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 998 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 1006 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 1015 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 1023 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 1033 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 1042 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1051 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1060 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1070 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1080 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1090 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1100 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1109 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1119 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1129 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1139 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1148 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1157 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1169 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1178 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1187 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1197 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1206 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1214 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1222 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1232 */ 's', 't', '.', 'b', 9, 0,
  /* 1238 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1248 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1257 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1266 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1275 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1285 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1295 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1305 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1315 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1324 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1334 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1344 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1354 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1366 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1375 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1384 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1393 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1402 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1412 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1421 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1430 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1439 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1448 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1456 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1462 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1469 */ 's', 'e', 'b', 9, 0,
  /* 1474 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1481 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1490 */ 'l', 'b', 9, 0,
  /* 1494 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1503 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1517 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1530 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1542 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1552 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1562 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1571 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1580 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1589 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1598 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1612 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1625 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1637 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1648 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1660 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1672 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1684 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1695 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1706 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1717 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1731 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1744 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1756 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1765 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1774 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1784 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1794 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1804 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1814 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1826 */ 's', 'b', 9, 0,
  /* 1830 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1838 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1844 */ 'b', 'c', 9, 0,
  /* 1848 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1854 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1860 */ 'j', 'i', 'c', 9, 0,
  /* 1865 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1871 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1878 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1887 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1896 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1905 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1914 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1923 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1932 */ 's', 'y', 'n', 'c', 9, 0,
  /* 1938 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 1944 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 1951 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 1959 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 1968 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 1975 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 1981 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 1987 */ 'j', 'r', 'c', 9, 0,
  /* 1992 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 1999 */ 'b', 'l', 't', 'c', 9, 0,
  /* 2005 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 2012 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 2019 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 2025 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 2031 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 2038 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 2045 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2052 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2059 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2066 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2073 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2080 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2089 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2098 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2107 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2117 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2127 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2137 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2145 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2152 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2160 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2168 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2177 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2186 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2194 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2202 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2210 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2219 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2228 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2235 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2244 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2253 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2262 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2270 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2280 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2288 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2298 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2307 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2318 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2326 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2335 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2346 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2355 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2367 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2376 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2384 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2392 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2401 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2410 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2419 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2426 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2436 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2444 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2455 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2463 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2472 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2481 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2489 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2497 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2505 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2513 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2521 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2529 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2538 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2546 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2554 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2564 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2572 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2581 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2590 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2599 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2609 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2619 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2628 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2637 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2646 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2657 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2668 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2678 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2689 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2698 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2705 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2714 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2722 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2729 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2739 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2747 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2754 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2763 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2771 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2779 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2787 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2795 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2805 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2813 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2824 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2832 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2840 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2848 */ 'r', 'e', 'c', 'i', 'p', '.', 'd', 9, 0,
  /* 2857 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2865 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2875 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2883 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2892 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2903 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2911 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2920 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2931 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2940 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2952 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2961 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 2969 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 2977 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 2985 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 2993 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 3001 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 3011 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 3019 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 3028 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 3036 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 3045 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3055 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3065 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3076 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3088 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3098 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3109 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3118 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3127 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3136 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3146 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3156 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3166 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3176 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3185 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3195 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3205 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3215 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3225 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3234 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3243 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3254 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3265 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3277 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3286 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3295 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3305 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3312 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3322 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3331 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3339 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3348 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3356 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3366 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3374 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3383 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3394 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3402 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3411 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3422 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3431 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3443 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3452 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3460 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3469 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3479 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3488 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3498 */ 's', 't', '.', 'd', 9, 0,
  /* 3504 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3512 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3522 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3532 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3543 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3555 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3565 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3576 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3585 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3594 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3603 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3613 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3623 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3633 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3643 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3652 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3662 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3672 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3682 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3692 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3704 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3713 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3722 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3733 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3744 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3753 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3762 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3771 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3780 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3789 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3798 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3806 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3814 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3821 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3832 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3843 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3853 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3864 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3873 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3881 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3887 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 3897 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 3904 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 3914 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 3922 */ 's', 'c', 'd', 9, 0,
  /* 3927 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 3933 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 3939 */ 'd', 's', 'h', 'd', 9, 0,
  /* 3945 */ 'l', 'l', 'd', 9, 0,
  /* 3950 */ 'a', 'n', 'd', 9, 0,
  /* 3955 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 3964 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 3972 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 3978 */ 's', 'd', 9, 0,
  /* 3982 */ 'l', 'b', 'e', 9, 0,
  /* 3987 */ 's', 'b', 'e', 9, 0,
  /* 3992 */ 's', 'c', 'e', 9, 0,
  /* 3997 */ 'c', 'a', 'c', 'h', 'e', 'e', 9, 0,
  /* 4005 */ 'p', 'r', 'e', 'f', 'e', 9, 0,
  /* 4012 */ 'b', 'g', 'e', 9, 0,
  /* 4017 */ 't', 'g', 'e', 9, 0,
  /* 4022 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 4029 */ 'l', 'h', 'e', 9, 0,
  /* 4034 */ 's', 'h', 'e', 9, 0,
  /* 4039 */ 'b', 'l', 'e', 9, 0,
  /* 4044 */ 'l', 'l', 'e', 9, 0,
  /* 4049 */ 'l', 'w', 'l', 'e', 9, 0,
  /* 4055 */ 's', 'w', 'l', 'e', 9, 0,
  /* 4061 */ 'b', 'n', 'e', 9, 0,
  /* 4066 */ 's', 'n', 'e', 9, 0,
  /* 4071 */ 't', 'n', 'e', 9, 0,
  /* 4076 */ 'l', 'w', 'r', 'e', 9, 0,
  /* 4082 */ 's', 'w', 'r', 'e', 9, 0,
  /* 4088 */ 'l', 'b', 'u', 'e', 9, 0,
  /* 4094 */ 'l', 'h', 'u', 'e', 9, 0,
  /* 4100 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 4106 */ 'l', 'w', 'e', 9, 0,
  /* 4111 */ 's', 'w', 'e', 9, 0,
  /* 4116 */ 'b', 'c', '1', 'f', 9, 0,
  /* 4122 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 4128 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 4134 */ 'n', 'e', 'g', 9, 0,
  /* 4139 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4148 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4157 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4167 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4176 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4183 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4191 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4199 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4206 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4215 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4224 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4233 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4241 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4249 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4257 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4265 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4274 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4282 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4290 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4300 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4308 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4317 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4326 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4335 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4345 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4355 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4364 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4373 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4382 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4390 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4397 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4404 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4413 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4421 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4430 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4440 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4450 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4459 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4470 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4481 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4491 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4498 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4505 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4513 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4521 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4529 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4538 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4546 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4556 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4566 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4577 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4587 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4598 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4607 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4616 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4625 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4635 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4645 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4655 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4665 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4674 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4684 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4694 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4704 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4714 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4724 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4733 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4742 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4754 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4763 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4774 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4783 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4793 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4802 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4810 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4818 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4828 */ 's', 't', '.', 'h', 9, 0,
  /* 4834 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4844 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4854 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4865 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4875 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4886 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4895 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4904 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4913 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4923 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4933 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4943 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4953 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 4962 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 4972 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 4982 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4992 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5002 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5014 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5023 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5032 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 5041 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 5050 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 5060 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 5069 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 5078 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 5087 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 5096 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 5104 */ 'b', 'z', '.', 'h', 9, 0,
  /* 5110 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 5117 */ 'd', 's', 'b', 'h', 9, 0,
  /* 5123 */ 'w', 's', 'b', 'h', 9, 0,
  /* 5129 */ 's', 'e', 'h', 9, 0,
  /* 5134 */ 'u', 'l', 'h', 9, 0,
  /* 5139 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5148 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5162 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5175 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5192 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5203 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5213 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5223 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5232 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5241 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5250 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5259 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5270 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5278 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5287 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5296 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5307 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5318 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5330 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5342 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5354 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5365 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5375 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5386 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5397 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5408 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5419 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5430 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5441 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5453 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5465 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5476 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5485 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5494 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5504 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5514 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5524 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5534 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5544 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5559 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5574 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5586 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5599 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5614 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5627 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5641 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5655 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5665 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5676 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5687 */ 's', 'h', 9, 0,
  /* 5691 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5697 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5704 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5711 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5717 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5723 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5729 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5735 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5741 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5747 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5753 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5767 */ 'd', 'l', 'i', 9, 0,
  /* 5772 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5778 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5784 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5790 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5796 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5802 */ 's', 'l', 't', 'i', 9, 0,
  /* 5808 */ 't', 'l', 't', 'i', 9, 0,
  /* 5814 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5820 */ 'l', 'u', 'i', 9, 0,
  /* 5825 */ 'j', 9, 0,
  /* 5828 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5835 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5844 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5853 */ 'b', 'a', 'l', 9, 0,
  /* 5858 */ 'j', 'a', 'l', 9, 0,
  /* 5863 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5871 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 5879 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5891 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5903 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5919 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5934 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5950 */ 'l', 'd', 'l', 9, 0,
  /* 5955 */ 's', 'd', 'l', 9, 0,
  /* 5960 */ 'b', 'g', 'e', 'l', 9, 0,
  /* 5966 */ 'b', 'l', 'e', 'l', 9, 0,
  /* 5972 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 5978 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 5985 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5999 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6013 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6026 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6041 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 6050 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 6059 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 6068 */ 'd', 's', 'l', 'l', 9, 0,
  /* 6074 */ 'd', 'r', 'o', 'l', 9, 0,
  /* 6080 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 6086 */ 'd', 's', 'r', 'l', 9, 0,
  /* 6092 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 6099 */ 'b', 'g', 't', 'l', 9, 0,
  /* 6105 */ 'b', 'l', 't', 'l', 9, 0,
  /* 6111 */ 'b', 'g', 'e', 'u', 'l', 9, 0,
  /* 6118 */ 'b', 'l', 'e', 'u', 'l', 9, 0,
  /* 6125 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 6131 */ 'b', 'g', 't', 'u', 'l', 9, 0,
  /* 6138 */ 'b', 'l', 't', 'u', 'l', 9, 0,
  /* 6145 */ 'l', 'w', 'l', 9, 0,
  /* 6150 */ 's', 'w', 'l', 9, 0,
  /* 6155 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 6162 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 6169 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 6176 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 6183 */ 'd', 'e', 'x', 't', 'm', 9, 0,
  /* 6190 */ 'l', 'w', 'm', 9, 0,
  /* 6195 */ 's', 'w', 'm', 9, 0,
  /* 6200 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6208 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6216 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6222 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6228 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6234 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6241 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6247 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6257 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6264 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6272 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6279 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6287 */ 'c', 'm', 'p', 9, 0,
  /* 6292 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6298 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6309 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6325 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6342 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6349 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6356 */ 'j', 'r', 'c', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6368 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6379 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6385 */ 'l', 'w', 'p', 9, 0,
  /* 6390 */ 's', 'w', 'p', 9, 0,
  /* 6395 */ 'b', 'e', 'q', 9, 0,
  /* 6400 */ 's', 'e', 'q', 9, 0,
  /* 6405 */ 't', 'e', 'q', 9, 0,
  /* 6410 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6422 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6434 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6450 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6465 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6481 */ 'l', 'd', 'r', 9, 0,
  /* 6486 */ 's', 'd', 'r', 9, 0,
  /* 6491 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6505 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6519 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6532 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6547 */ 'j', 'r', 9, 0,
  /* 6551 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6557 */ 'n', 'o', 'r', 9, 0,
  /* 6562 */ 'd', 'r', 'o', 'r', 9, 0,
  /* 6568 */ 'x', 'o', 'r', 9, 0,
  /* 6573 */ 'r', 'd', 'p', 'g', 'p', 'r', 9, 0,
  /* 6581 */ 'w', 'r', 'p', 'g', 'p', 'r', 9, 0,
  /* 6589 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6596 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6603 */ 'l', 'w', 'r', 9, 0,
  /* 6608 */ 's', 'w', 'r', 9, 0,
  /* 6613 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6621 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6629 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6638 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6647 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6656 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6665 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6673 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6683 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6693 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6702 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6713 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6722 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6733 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6745 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6752 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6762 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6773 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6782 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6791 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6799 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6807 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6814 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6825 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6836 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6846 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6857 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 6866 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 6873 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 6882 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 6889 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 6896 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6904 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6914 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 6925 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 6933 */ 'r', 'e', 'c', 'i', 'p', '.', 's', 9, 0,
  /* 6942 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6950 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6960 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6969 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6980 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6989 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7000 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7012 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 7019 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 7028 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 7037 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 7045 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 7055 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 7064 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 7075 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7084 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7095 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7107 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 7115 */ 'r', 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 7124 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 7132 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 7139 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7146 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 7157 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 7168 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 7178 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 7189 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 7198 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 7205 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 7215 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 7225 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 7233 */ 'j', 'a', 'l', 's', 9, 0,
  /* 7239 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 7248 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7257 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7264 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7270 */ 'b', 'c', '1', 't', 9, 0,
  /* 7276 */ 'b', 'g', 't', 9, 0,
  /* 7281 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7287 */ 'b', 'l', 't', 9, 0,
  /* 7292 */ 's', 'l', 't', 9, 0,
  /* 7297 */ 't', 'l', 't', 9, 0,
  /* 7302 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7309 */ 'n', 'o', 't', 9, 0,
  /* 7314 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7320 */ 'd', 'e', 'x', 't', 9, 0,
  /* 7326 */ 'l', 'b', 'u', 9, 0,
  /* 7331 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7338 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7345 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7352 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7359 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7366 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7373 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7379 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7385 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7391 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7397 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7404 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7412 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7419 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7426 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7433 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7441 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7448 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7455 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7461 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7467 */ 's', 'l', 't', 'u', 9, 0,
  /* 7473 */ 't', 'l', 't', 'u', 9, 0,
  /* 7479 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7487 */ 'd', 'e', 'x', 't', 'u', 9, 0,
  /* 7494 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7501 */ 'l', 'w', 'u', 9, 0,
  /* 7506 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7513 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7521 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7529 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7536 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7543 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7549 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7556 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7563 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7571 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7578 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7586 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7592 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7599 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7606 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7614 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7623 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7630 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7638 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7644 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7653 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7662 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7671 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7681 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7691 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7701 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7708 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7716 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7725 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7733 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7741 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7750 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7758 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7767 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7774 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7783 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7792 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7800 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7808 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7817 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7826 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7834 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 7842 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7851 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7860 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 7869 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 7877 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 7885 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 7893 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 7901 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7917 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7930 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7948 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7964 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 7973 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 7982 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 7990 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 7998 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 8007 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 8015 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 8023 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 8033 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 8041 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 8050 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8059 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8068 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 8078 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 8088 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 8097 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 8106 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 8115 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8128 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8141 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 8149 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 8156 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 8166 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 8174 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 8181 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 8190 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 8198 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 8206 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 8214 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 8222 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 8230 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 8239 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 8247 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 8257 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8267 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8276 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8287 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8298 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8308 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8316 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8324 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8333 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8342 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8349 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8359 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8370 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8381 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8391 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8402 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8413 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8421 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8429 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8437 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8445 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8453 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8463 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8471 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8480 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8488 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8496 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8505 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8515 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8525 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8536 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8548 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8558 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8569 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8578 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8587 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8596 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8606 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8616 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8626 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8636 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8646 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8655 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8665 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8675 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8685 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8695 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8705 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8715 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8725 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8735 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8744 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8753 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8764 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8775 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8787 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8796 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8807 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8816 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8826 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8837 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8848 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8860 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 8870 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 8879 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 8887 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 8895 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 8903 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8912 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8921 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 8929 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 8938 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 8948 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8957 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8967 */ 's', 't', '.', 'w', 9, 0,
  /* 8973 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8983 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8993 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9004 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 9016 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9026 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9037 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9046 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9055 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9064 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9074 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9084 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9094 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9104 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 9113 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 9123 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 9133 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9143 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9153 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9165 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9174 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9183 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9194 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9205 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 9214 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 9223 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 9233 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 9242 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 9251 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 9260 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9269 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9277 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9285 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9294 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9302 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9308 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9315 */ 'u', 'l', 'w', 9, 0,
  /* 9320 */ 's', 'w', 9, 0,
  /* 9324 */ 'p', 'r', 'e', 'f', 'x', 9, 0,
  /* 9331 */ 'l', 'h', 'x', 9, 0,
  /* 9336 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9342 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9348 */ 'l', 'w', 'x', 9, 0,
  /* 9353 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9359 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9365 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9371 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9379 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9386 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9392 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9398 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9406 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9413 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9419 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9425 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9431 */ 's', 'e', 'b', 9, 32, 0,
  /* 9437 */ 'j', 'r', 'c', 9, 32, 0,
  /* 9443 */ 's', 'e', 'h', 9, 32, 0,
  /* 9449 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9463 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9476 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9488 */ 'c', 'i', 'n', 's', '3', '2', 32, 0,
  /* 9496 */ 'e', 'x', 't', 's', '3', '2', 32, 0,
  /* 9504 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9510 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9518 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9525 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9532 */ 'c', 'i', 'n', 's', 32, 0,
  /* 9538 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9544 */ 'e', 'x', 't', 's', 32, 0,
  /* 9550 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9556 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9563 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9570 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9578 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9586 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9594 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9602 */ 'c', '.', 0,
  /* 9605 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9613 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9626 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9633 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9643 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9658 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9667 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9675 */ 'e', 'h', 'b', 0,
  /* 9679 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 9686 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9692 */ 't', 'l', 'b', 'i', 'n', 'v', 'f', 0,
  /* 9700 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9706 */ 'f', 'o', 'o', 0,
  /* 9710 */ 't', 'l', 'b', 'p', 0,
  /* 9715 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9721 */ 't', 'l', 'b', 'r', 0,
  /* 9726 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9732 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 9738 */ 'w', 'a', 'i', 't', 0,
  /* 9743 */ 't', 'l', 'b', 'i', 'n', 'v', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9634U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9627U,	// BUNDLE
    9644U,	// LIFETIME_START
    9614U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    21793U,	// ABSQ_S_PH
    21793U,	// ABSQ_S_PH_MM
    18069U,	// ABSQ_S_QB
    18069U,	// ABSQ_S_QB_MMR2
    25080U,	// ABSQ_S_W
    25080U,	// ABSQ_S_W_MM
    19690U,	// ABS_D_MMR6
    23397U,	// ABS_S_MMR6
    134238041U,	// ADD
    18344U,	// ADDIUPC
    18344U,	// ADDIUPC_MM
    18344U,	// ADDIUPC_MMR6
    22683U,	// ADDIUR1SP_MM
    134234410U,	// ADDIUR2_MM
    8683851U,	// ADDIUS5_MM
    547032U,	// ADDIUSP_MM
    134241518U,	// ADDIU_MMR6
    134239326U,	// ADDQH_PH
    134239326U,	// ADDQH_PH_MMR2
    134239443U,	// ADDQH_R_PH
    134239443U,	// ADDQH_R_PH_MMR2
    134242483U,	// ADDQH_R_W
    134242483U,	// ADDQH_R_W_MMR2
    134242086U,	// ADDQH_W
    134242086U,	// ADDQH_W_MMR2
    134239400U,	// ADDQ_PH
    134239400U,	// ADDQ_PH_MM
    134239499U,	// ADDQ_S_PH
    134239499U,	// ADDQ_S_PH_MM
    134242788U,	// ADDQ_S_W
    134242788U,	// ADDQ_S_W_MM
    134236105U,	// ADDSC
    134236105U,	// ADDSC_MM
    134234774U,	// ADDS_A_B
    134236230U,	// ADDS_A_D
    134238270U,	// ADDS_A_H
    134241794U,	// ADDS_A_W
    134235242U,	// ADDS_S_B
    134237328U,	// ADDS_S_D
    134238827U,	// ADDS_S_H
    134242838U,	// ADDS_S_W
    134235457U,	// ADDS_U_B
    134237795U,	// ADDS_U_D
    134239105U,	// ADDS_U_H
    134243256U,	// ADDS_U_W
    134234614U,	// ADDU16_MM
    134234614U,	// ADDU16_MMR6
    134235665U,	// ADDUH_QB
    134235665U,	// ADDUH_QB_MMR2
    134235773U,	// ADDUH_R_QB
    134235773U,	// ADDUH_R_QB_MMR2
    134241459U,	// ADDU_MMR6
    134239598U,	// ADDU_PH
    134239598U,	// ADDU_PH_MMR2
    134235878U,	// ADDU_QB
    134235878U,	// ADDU_QB_MM
    134239543U,	// ADDU_S_PH
    134239543U,	// ADDU_S_PH_MMR2
    134235819U,	// ADDU_S_QB
    134235819U,	// ADDU_S_QB_MM
    134235023U,	// ADDVI_B
    134236750U,	// ADDVI_D
    134238486U,	// ADDVI_H
    134242219U,	// ADDVI_W
    134235535U,	// ADDV_B
    134237885U,	// ADDV_D
    134239183U,	// ADDV_H
    134243356U,	// ADDV_W
    134236144U,	// ADDWC
    134236144U,	// ADDWC_MM
    134234756U,	// ADD_A_B
    134236211U,	// ADD_A_D
    134238252U,	// ADD_A_H
    134241775U,	// ADD_A_W
    134238041U,	// ADD_MM
    134238041U,	// ADD_MMR6
    134239818U,	// ADDi
    134239818U,	// ADDi_MM
    134241518U,	// ADDiu
    134241518U,	// ADDiu_MM
    134241459U,	// ADDu
    134241459U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    134240314U,	// ALIGN
    134240314U,	// ALIGN_MMR6
    18336U,	// ALUIPC
    18336U,	// ALUIPC_MMR6
    134238063U,	// AND
    9224569U,	// AND16_MM
    9224569U,	// AND16_MMR6
    134238063U,	// AND64
    134234510U,	// ANDI16_MM
    134234510U,	// ANDI16_MMR6
    134234882U,	// ANDI_B
    134239824U,	// ANDI_MMR6
    134238063U,	// AND_MM
    134238063U,	// AND_MMR6
    134241619U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    134239824U,	// ANDi
    134239824U,	// ANDi64
    134239824U,	// ANDi_MM
    134238077U,	// APPEND
    134235136U,	// ASUB_S_B
    134237158U,	// ASUB_S_D
    134238659U,	// ASUB_S_H
    134242618U,	// ASUB_S_W
    134235351U,	// ASUB_U_B
    134237625U,	// ASUB_U_D
    134238947U,	// ASUB_U_H
    134243086U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    134239928U,	// AUI
    18329U,	// AUIPC
    18329U,	// AUIPC_MMR6
    134239928U,	// AUI_MMR6
    134235222U,	// AVER_S_B
    134237308U,	// AVER_S_D
    134238797U,	// AVER_S_H
    134242818U,	// AVER_S_W
    134235437U,	// AVER_U_B
    134237775U,	// AVER_U_D
    134239085U,	// AVER_U_H
    134243236U,	// AVER_U_W
    134235164U,	// AVE_S_B
    134237240U,	// AVE_S_D
    134238729U,	// AVE_S_H
    134242700U,	// AVE_S_W
    134235379U,	// AVE_U_B
    134237707U,	// AVE_U_D
    134239017U,	// AVE_U_H
    134243168U,	// AVE_U_W
    23790U,	// AddiuRxImmX16
    1072366U,	// AddiuRxPcImmX16
    285236462U,	// AddiuRxRxImm16
    16801006U,	// AddiuRxRxImmX16
    25189614U,	// AddiuRxRyOffMemX16
    1336581U,	// AddiuSpImm16
    550149U,	// AddiuSpImmX16
    134241459U,	// AdduRxRyRz16
    16797551U,	// AndRxRxRy16
    0U,	// B
    541013U,	// B16_MM
    134241458U,	// BADDu
    546526U,	// BAL
    542538U,	// BALC
    542538U,	// BALC_MMR6
    134240313U,	// BALIGN
    0U,	// BAL_BR
    167788585U,	// BBIT0
    167788717U,	// BBIT032
    167788710U,	// BBIT1
    167788726U,	// BBIT132
    542517U,	// BC
    541018U,	// BC16_MMR6
    25971U,	// BC1EQZ
    20501U,	// BC1F
    22363U,	// BC1FL
    20501U,	// BC1F_MM
    25955U,	// BC1NEZ
    23655U,	// BC1T
    22477U,	// BC1TL
    23655U,	// BC1T_MM
    25979U,	// BC2EQZ
    25963U,	// BC2NEZ
    134234951U,	// BCLRI_B
    134236694U,	// BCLRI_D
    134238430U,	// BCLRI_H
    134242163U,	// BCLRI_W
    134235103U,	// BCLR_B
    134237082U,	// BCLR_D
    134238626U,	// BCLR_H
    134242534U,	// BCLR_W
    542517U,	// BC_MMR6
    134240508U,	// BEQ
    134240508U,	// BEQ64
    134236094U,	// BEQC
    134240193U,	// BEQL
    16921U,	// BEQZ16_MM
    18290U,	// BEQZALC
    18290U,	// BEQZALC_MMR6
    18444U,	// BEQZC
    16752U,	// BEQZC16_MMR6
    18444U,	// BEQZC_MM
    134240508U,	// BEQ_MM
    134238125U,	// BGE
    134235961U,	// BGEC
    134238125U,	// BGEImmMacro
    134240073U,	// BGEL
    134240073U,	// BGELImmMacro
    134241486U,	// BGEU
    134236118U,	// BGEUC
    134241486U,	// BGEUImmMacro
    134240224U,	// BGEUL
    134240224U,	// BGEULImmMacro
    25738U,	// BGEZ
    25738U,	// BGEZ64
    22248U,	// BGEZAL
    18263U,	// BGEZALC
    18263U,	// BGEZALC_MMR6
    22435U,	// BGEZALL
    23624U,	// BGEZALS_MM
    22248U,	// BGEZAL_MM
    18423U,	// BGEZC
    22540U,	// BGEZL
    25738U,	// BGEZ_MM
    134241389U,	// BGT
    134241389U,	// BGTImmMacro
    134240212U,	// BGTL
    134240212U,	// BGTLImmMacro
    134241568U,	// BGTU
    134241568U,	// BGTUImmMacro
    134240244U,	// BGTUL
    134240244U,	// BGTULImmMacro
    25798U,	// BGTZ
    25798U,	// BGTZ64
    18299U,	// BGTZALC
    18299U,	// BGTZALC_MMR6
    18451U,	// BGTZC
    22554U,	// BGTZL
    25798U,	// BGTZ_MM
    151012140U,	// BINSLI_B
    151013883U,	// BINSLI_D
    151015619U,	// BINSLI_H
    151019352U,	// BINSLI_W
    151012287U,	// BINSL_B
    151014083U,	// BINSL_D
    151015733U,	// BINSL_H
    151019510U,	// BINSL_W
    151012201U,	// BINSRI_B
    151013928U,	// BINSRI_D
    151015664U,	// BINSRI_H
    151019397U,	// BINSRI_W
    151012335U,	// BINSR_B
    151014348U,	// BINSR_D
    151015858U,	// BINSR_H
    151019800U,	// BINSR_W
    23963U,	// BITREV
    22633U,	// BITSWAP
    22633U,	// BITSWAP_MMR6
    134238152U,	// BLE
    134238152U,	// BLEImmMacro
    134240079U,	// BLEL
    134240079U,	// BLELImmMacro
    134241498U,	// BLEU
    134241498U,	// BLEUImmMacro
    134240231U,	// BLEUL
    134240231U,	// BLEULImmMacro
    25744U,	// BLEZ
    25744U,	// BLEZ64
    18272U,	// BLEZALC
    18272U,	// BLEZALC_MMR6
    18430U,	// BLEZC
    22547U,	// BLEZL
    25744U,	// BLEZ_MM
    134241400U,	// BLT
    134236112U,	// BLTC
    134241400U,	// BLTImmMacro
    134240218U,	// BLTL
    134240218U,	// BLTLImmMacro
    134241574U,	// BLTU
    134236125U,	// BLTUC
    134241574U,	// BLTUImmMacro
    134240251U,	// BLTUL
    134240251U,	// BLTULImmMacro
    25804U,	// BLTZ
    25804U,	// BLTZ64
    22256U,	// BLTZAL
    18308U,	// BLTZALC
    18308U,	// BLTZALC_MMR6
    22444U,	// BLTZALL
    23633U,	// BLTZALS_MM
    22256U,	// BLTZAL_MM
    18458U,	// BLTZC
    22561U,	// BLTZL
    25804U,	// BLTZ_MM
    151012256U,	// BMNZI_B
    151018892U,	// BMNZ_V
    151012248U,	// BMZI_B
    151018878U,	// BMZ_V
    134238174U,	// BNE
    134238174U,	// BNE64
    134235967U,	// BNEC
    134234890U,	// BNEGI_B
    134236642U,	// BNEGI_D
    134238378U,	// BNEGI_H
    134242111U,	// BNEGI_W
    134234858U,	// BNEG_B
    134236618U,	// BNEG_D
    134238354U,	// BNEG_H
    134242006U,	// BNEG_W
    134240085U,	// BNEL
    16913U,	// BNEZ16_MM
    18281U,	// BNEZALC
    18281U,	// BNEZALC_MMR6
    18437U,	// BNEZC
    16743U,	// BNEZC16_MMR6
    18437U,	// BNEZC_MM
    134238174U,	// BNE_MM
    134236132U,	// BNVC
    17847U,	// BNZ_B
    20282U,	// BNZ_D
    21495U,	// BNZ_H
    23941U,	// BNZ_V
    25693U,	// BNZ_W
    134236138U,	// BOVC
    540871U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    33625797U,	// BREAK
    590236U,	// BREAK16_MM
    590236U,	// BREAK16_MMR6
    33625797U,	// BREAK_MM
    33625797U,	// BREAK_MMR6
    151012115U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    151018850U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    134235005U,	// BSETI_B
    134236732U,	// BSETI_D
    134238468U,	// BSETI_H
    134242201U,	// BSETI_W
    134235319U,	// BSET_B
    134237444U,	// BSET_D
    134238915U,	// BSET_H
    134242992U,	// BSET_W
    17841U,	// BZ_B
    20266U,	// BZ_D
    21489U,	// BZ_H
    23928U,	// BZ_V
    25687U,	// BZ_W
    541322U,	// B_MMR6_Pseudo
    541322U,	// B_MM_Pseudo
    134240508U,	// BeqImm
    402678961U,	// BeqzRxImm16
    25777U,	// BeqzRxImmX16
    1327754U,	// Bimm16
    541322U,	// BimmX16
    134238174U,	// BneImm
    402678934U,	// BnezRxImm16
    25750U,	// BnezRxImmX16
    9606U,	// Break16
    1598655U,	// Bteqz16
    536893584U,	// BteqzT8CmpX16
    536893069U,	// BteqzT8CmpiX16
    536894589U,	// BteqzT8SltX16
    536893099U,	// BteqzT8SltiX16
    536894716U,	// BteqzT8SltiuX16
    536894764U,	// BteqzT8SltuX16
    550079U,	// BteqzX16
    1598628U,	// Btnez16
    671111312U,	// BtnezT8CmpX16
    671110797U,	// BtnezT8CmpiX16
    671112317U,	// BtnezT8SltX16
    671110827U,	// BtnezT8SltiX16
    671112444U,	// BtnezT8SltiuX16
    671112492U,	// BtnezT8SltuX16
    550052U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    1920951U,	// CACHE
    1920926U,	// CACHEE
    1920926U,	// CACHEE_MM
    1920926U,	// CACHEE_MMR6
    1920951U,	// CACHE_MM
    1920951U,	// CACHE_MMR6
    1920951U,	// CACHE_R6
    19053U,	// CEIL_L_D64
    19053U,	// CEIL_L_D_MMR6
    23221U,	// CEIL_L_S
    23221U,	// CEIL_L_S_MMR6
    20228U,	// CEIL_W_D32
    20228U,	// CEIL_W_D64
    20228U,	// CEIL_W_D_MMR6
    20228U,	// CEIL_W_MM
    23553U,	// CEIL_W_S
    23553U,	// CEIL_W_S_MM
    23553U,	// CEIL_W_S_MMR6
    134234934U,	// CEQI_B
    134236677U,	// CEQI_D
    134238413U,	// CEQI_H
    134242146U,	// CEQI_W
    134235088U,	// CEQ_B
    134236989U,	// CEQ_D
    134238604U,	// CEQ_H
    134242422U,	// CEQ_W
    16444U,	// CFC1
    16444U,	// CFC1_MM
    17012U,	// CFCMSA
    134243645U,	// CINS
    134243601U,	// CINS32
    19698U,	// CLASS_D
    19698U,	// CLASS_D_MMR6
    23404U,	// CLASS_S
    23404U,	// CLASS_S_MMR6
    134235173U,	// CLEI_S_B
    134237249U,	// CLEI_S_D
    134238738U,	// CLEI_S_H
    134242709U,	// CLEI_S_W
    134235388U,	// CLEI_U_B
    134237716U,	// CLEI_U_D
    134239026U,	// CLEI_U_H
    134243177U,	// CLEI_U_W
    134235155U,	// CLE_S_B
    134237231U,	// CLE_S_D
    134238720U,	// CLE_S_H
    134242691U,	// CLE_S_W
    134235370U,	// CLE_U_B
    134237698U,	// CLE_U_D
    134239008U,	// CLE_U_H
    134243159U,	// CLE_U_W
    22608U,	// CLO
    22608U,	// CLO_MM
    22608U,	// CLO_MMR6
    22608U,	// CLO_R6
    134235193U,	// CLTI_S_B
    134237269U,	// CLTI_S_D
    134238758U,	// CLTI_S_H
    134242729U,	// CLTI_S_W
    134235408U,	// CLTI_U_B
    134237736U,	// CLTI_U_D
    134239046U,	// CLTI_U_H
    134243197U,	// CLTI_U_W
    134235261U,	// CLT_S_B
    134237347U,	// CLT_S_D
    134238846U,	// CLT_S_H
    134242857U,	// CLT_S_W
    134235488U,	// CLT_U_B
    134237826U,	// CLT_U_D
    134239136U,	// CLT_U_H
    134243287U,	// CLT_U_W
    25772U,	// CLZ
    25772U,	// CLZ_MM
    25772U,	// CLZ_MMR6
    25772U,	// CLZ_R6
    134235711U,	// CMPGDU_EQ_QB
    134235616U,	// CMPGDU_LE_QB
    134235830U,	// CMPGDU_LT_QB
    134235725U,	// CMPGU_EQ_QB
    134235630U,	// CMPGU_LE_QB
    134235844U,	// CMPGU_LT_QB
    18010U,	// CMPU_EQ_QB
    17915U,	// CMPU_LE_QB
    18129U,	// CMPU_LT_QB
    134236539U,	// CMP_AF_D_MMR6
    134240865U,	// CMP_AF_S_MMR6
    134236978U,	// CMP_EQ_D
    134236978U,	// CMP_EQ_D_MMR6
    21681U,	// CMP_EQ_PH
    134241063U,	// CMP_EQ_S
    134241063U,	// CMP_EQ_S_MMR6
    134236539U,	// CMP_F_D
    134240865U,	// CMP_F_S
    134236383U,	// CMP_LE_D
    134236383U,	// CMP_LE_D_MMR6
    21577U,	// CMP_LE_PH
    134240786U,	// CMP_LE_S
    134240786U,	// CMP_LE_S_MMR6
    134237469U,	// CMP_LT_D
    134237469U,	// CMP_LT_D_MMR6
    21850U,	// CMP_LT_PH
    134241158U,	// CMP_LT_S
    134241158U,	// CMP_LT_S_MMR6
    134236557U,	// CMP_SAF_D
    134236557U,	// CMP_SAF_D_MMR6
    134240875U,	// CMP_SAF_S
    134240875U,	// CMP_SAF_S_MMR6
    134237005U,	// CMP_SEQ_D
    134237005U,	// CMP_SEQ_D_MMR6
    134241082U,	// CMP_SEQ_S
    134241082U,	// CMP_SEQ_S_MMR6
    134236420U,	// CMP_SLE_D
    134236420U,	// CMP_SLE_D_MMR6
    134240815U,	// CMP_SLE_S
    134240815U,	// CMP_SLE_S_MMR6
    134237496U,	// CMP_SLT_D
    134237496U,	// CMP_SLT_D_MMR6
    134241177U,	// CMP_SLT_S
    134241177U,	// CMP_SLT_S_MMR6
    134237053U,	// CMP_SUEQ_D
    134237053U,	// CMP_SUEQ_D_MMR6
    134241113U,	// CMP_SUEQ_S
    134241113U,	// CMP_SUEQ_S_MMR6
    134236468U,	// CMP_SULE_D
    134236468U,	// CMP_SULE_D_MMR6
    134240846U,	// CMP_SULE_S
    134240846U,	// CMP_SULE_S_MMR6
    134237544U,	// CMP_SULT_D
    134237544U,	// CMP_SULT_D_MMR6
    134241208U,	// CMP_SULT_S
    134241208U,	// CMP_SULT_S_MMR6
    134236926U,	// CMP_SUN_D
    134236926U,	// CMP_SUN_D_MMR6
    134241027U,	// CMP_SUN_S
    134241027U,	// CMP_SUN_S_MMR6
    134237033U,	// CMP_UEQ_D
    134237033U,	// CMP_UEQ_D_MMR6
    134241102U,	// CMP_UEQ_S
    134241102U,	// CMP_UEQ_S_MMR6
    134236448U,	// CMP_ULE_D
    134236448U,	// CMP_ULE_D_MMR6
    134240835U,	// CMP_ULE_S
    134240835U,	// CMP_ULE_S_MMR6
    134237524U,	// CMP_ULT_D
    134237524U,	// CMP_ULT_D_MMR6
    134241197U,	// CMP_ULT_S
    134241197U,	// CMP_ULT_S_MMR6
    134236908U,	// CMP_UN_D
    134236908U,	// CMP_UN_D_MMR6
    134241017U,	// CMP_UN_S
    134241017U,	// CMP_UN_S_MMR6
    9707U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    805323940U,	// COPY_S_B
    805326048U,	// COPY_S_D
    805327536U,	// COPY_S_H
    805331569U,	// COPY_S_W
    805324155U,	// COPY_U_B
    805327803U,	// COPY_U_H
    805331976U,	// COPY_U_W
    10518615U,	// CTC1
    10518615U,	// CTC1_MM
    17020U,	// CTCMSA
    23023U,	// CVT_D32_S
    24126U,	// CVT_D32_W
    24126U,	// CVT_D32_W_MM
    22220U,	// CVT_D64_L
    23023U,	// CVT_D64_S
    24126U,	// CVT_D64_W
    22220U,	// CVT_D_L_MMR6
    23023U,	// CVT_D_S_MM
    23023U,	// CVT_D_S_MMR6
    24126U,	// CVT_D_W_MMR6
    19074U,	// CVT_L_D64
    19074U,	// CVT_L_D64_MM
    19074U,	// CVT_L_D_MMR6
    23242U,	// CVT_L_S
    23242U,	// CVT_L_S_MM
    23242U,	// CVT_L_S_MMR6
    19421U,	// CVT_S_D32
    19421U,	// CVT_S_D32_MM
    19421U,	// CVT_S_D64
    19421U,	// CVT_S_D_MMR6
    22229U,	// CVT_S_L
    22229U,	// CVT_S_L_MMR6
    24881U,	// CVT_S_W
    24881U,	// CVT_S_W_MM
    24881U,	// CVT_S_W_MMR6
    20249U,	// CVT_W_D32
    20249U,	// CVT_W_D64
    20249U,	// CVT_W_D_MMR6
    20249U,	// CVT_W_MM
    23574U,	// CVT_W_S
    23574U,	// CVT_W_S_MM
    23574U,	// CVT_W_S_MMR6
    19242U,	// C_EQ_D32
    19242U,	// C_EQ_D64
    23327U,	// C_EQ_S
    18804U,	// C_F_D32
    18804U,	// C_F_D64
    23130U,	// C_F_S
    18647U,	// C_LE_D32
    18647U,	// C_LE_D64
    23050U,	// C_LE_S
    19733U,	// C_LT_D32
    19733U,	// C_LT_D64
    23422U,	// C_LT_S
    18638U,	// C_NGE_D32
    18638U,	// C_NGE_D64
    23041U,	// C_NGE_S
    18673U,	// C_NGLE_D32
    18673U,	// C_NGLE_D64
    23068U,	// C_NGLE_S
    19090U,	// C_NGL_D32
    19090U,	// C_NGL_D64
    23258U,	// C_NGL_S
    19724U,	// C_NGT_D32
    19724U,	// C_NGT_D64
    23413U,	// C_NGT_S
    18683U,	// C_OLE_D32
    18683U,	// C_OLE_D64
    23078U,	// C_OLE_S
    19759U,	// C_OLT_D32
    19759U,	// C_OLT_D64
    23440U,	// C_OLT_S
    19268U,	// C_SEQ_D32
    19268U,	// C_SEQ_D64
    23345U,	// C_SEQ_S
    18874U,	// C_SF_D32
    18874U,	// C_SF_D64
    23176U,	// C_SF_S
    19296U,	// C_UEQ_D32
    19296U,	// C_UEQ_D64
    23365U,	// C_UEQ_S
    18711U,	// C_ULE_D32
    18711U,	// C_ULE_D64
    23098U,	// C_ULE_S
    19787U,	// C_ULT_D32
    19787U,	// C_ULT_D64
    23460U,	// C_ULT_S
    19172U,	// C_UN_D32
    19172U,	// C_UN_D64
    23281U,	// C_UN_S
    22672U,	// CmpRxRy16
    939546253U,	// CmpiRxImm16
    22157U,	// CmpiRxImmX16
    550183U,	// Constant32
    134238040U,	// DADD
    134239817U,	// DADDi
    134241517U,	// DADDiu
    134241465U,	// DADDu
    8689256U,	// DAHI
    8689256U,	// DAHI_MM64R6
    134240321U,	// DALIGN
    134240321U,	// DALIGN_MM64R6
    8689317U,	// DATI
    8689317U,	// DATI_MM64R6
    134239927U,	// DAUI
    134239927U,	// DAUI_MM64R6
    22632U,	// DBITSWAP
    22607U,	// DCLO
    22607U,	// DCLO_R6
    25771U,	// DCLZ
    25771U,	// DCLZ_R6
    134241699U,	// DDIV
    134241607U,	// DDIVU
    134241607U,	// DDIVU_MM64R6
    134241699U,	// DDIV_MM64R6
    9733U,	// DERET
    9733U,	// DERET_MM
    9733U,	// DERET_MMR6
    134243663U,	// DEXT
    134243638U,	// DEXTM
    134240296U,	// DEXTM_MM64R6
    134243676U,	// DEXTU
    134241600U,	// DEXTU_MM64R6
    134241433U,	// DEXT_MM64R6
    546380U,	// DI
    134243651U,	// DINS
    134243631U,	// DINSM
    134243669U,	// DINSU
    134241700U,	// DIV
    134241608U,	// DIVU
    134241608U,	// DIVU_MMR6
    134241700U,	// DIV_MMR6
    134235282U,	// DIV_S_B
    134237390U,	// DIV_S_D
    134238867U,	// DIV_S_H
    134242900U,	// DIV_S_W
    134235497U,	// DIV_U_B
    134237857U,	// DIV_U_D
    134239145U,	// DIV_U_H
    134243318U,	// DIV_U_W
    546380U,	// DI_MM
    546380U,	// DI_MMR6
    134234734U,	// DLSA
    134234734U,	// DLSA_R6
    134234121U,	// DMFC0
    16450U,	// DMFC1
    134234372U,	// DMFC2
    33571076U,	// DMFC2_OCTEON
    134238085U,	// DMOD
    134241479U,	// DMODU
    134241479U,	// DMODU_MM64R6
    134238085U,	// DMOD_MM64R6
    1117814800U,	// DMTC0
    10518621U,	// DMTC1
    1117815051U,	// DMTC2
    33571083U,	// DMTC2_OCTEON
    134239804U,	// DMUH
    134241510U,	// DMUHU
    134240238U,	// DMUL
    23687U,	// DMULT
    23864U,	// DMULTu
    134241554U,	// DMULU
    134240238U,	// DMUL_R6
    134237298U,	// DOTP_S_D
    134238787U,	// DOTP_S_H
    134242768U,	// DOTP_S_W
    134237765U,	// DOTP_U_D
    134239075U,	// DOTP_U_H
    134243226U,	// DOTP_U_W
    151014427U,	// DPADD_S_D
    151015916U,	// DPADD_S_H
    151019887U,	// DPADD_S_W
    151014894U,	// DPADD_U_D
    151016204U,	// DPADD_U_H
    151020355U,	// DPADD_U_W
    134239657U,	// DPAQX_SA_W_PH
    134239657U,	// DPAQX_SA_W_PH_MMR2
    134239740U,	// DPAQX_S_W_PH
    134239740U,	// DPAQX_S_W_PH_MMR2
    134242228U,	// DPAQ_SA_L_W
    134242228U,	// DPAQ_SA_L_W_MM
    134239699U,	// DPAQ_S_W_PH
    134239699U,	// DPAQ_S_W_PH_MM
    134239992U,	// DPAU_H_QBL
    134239992U,	// DPAU_H_QBL_MM
    134240523U,	// DPAU_H_QBR
    134240523U,	// DPAU_H_QBR_MM
    134239778U,	// DPAX_W_PH
    134239778U,	// DPAX_W_PH_MMR2
    134239647U,	// DPA_W_PH
    134239647U,	// DPA_W_PH_MMR2
    22677U,	// DPOP
    134239672U,	// DPSQX_SA_W_PH
    134239672U,	// DPSQX_SA_W_PH_MMR2
    134239754U,	// DPSQX_S_W_PH
    134239754U,	// DPSQX_S_W_PH_MMR2
    134242241U,	// DPSQ_SA_L_W
    134242241U,	// DPSQ_SA_L_W_MM
    134239727U,	// DPSQ_S_W_PH
    134239727U,	// DPSQ_S_W_PH_MM
    151014394U,	// DPSUB_S_D
    151015895U,	// DPSUB_S_H
    151019854U,	// DPSUB_S_W
    151014861U,	// DPSUB_U_D
    151016183U,	// DPSUB_U_H
    151020322U,	// DPSUB_U_W
    134240004U,	// DPSU_H_QBL
    134240004U,	// DPSU_H_QBL_MM
    134240535U,	// DPSU_H_QBR
    134240535U,	// DPSU_H_QBR_MM
    134239789U,	// DPSX_W_PH
    134239789U,	// DPSX_W_PH_MMR2
    134239768U,	// DPS_W_PH
    134239768U,	// DPS_W_PH_MMR2
    134240187U,	// DROL
    134240187U,	// DROLImm
    134240675U,	// DROR
    134240675U,	// DRORImm
    134240702U,	// DROTR
    134234351U,	// DROTR32
    134241743U,	// DROTRV
    21502U,	// DSBH
    25848U,	// DSDIV
    23971U,	// DSDivMacro
    20324U,	// DSHD
    134240181U,	// DSLL
    134234321U,	// DSLL32
    1207982005U,	// DSLL64_32
    134241705U,	// DSLLV
    134234728U,	// DSRA
    134234303U,	// DSRA32
    134241684U,	// DSRAV
    134240199U,	// DSRL
    134234329U,	// DSRL32
    134241712U,	// DSRLV
    134235945U,	// DSUB
    134241444U,	// DSUBu
    25834U,	// DUDIV
    23879U,	// DUDivMacro
    25849U,	// DivRxRy16
    25835U,	// DivuRxRy16
    9676U,	// EHB
    9676U,	// EHB_MM
    9676U,	// EHB_MMR6
    546392U,	// EI
    546392U,	// EI_MM
    546392U,	// EI_MMR6
    9734U,	// ERET
    9680U,	// ERETNC
    9680U,	// ERETNC_MMR6
    9734U,	// ERET_MM
    9734U,	// ERET_MMR6
    0U,	// ERet
    134243664U,	// EXT
    134240492U,	// EXTP
    134240377U,	// EXTPDP
    134241727U,	// EXTPDPV
    134241727U,	// EXTPDPV_MM
    134240377U,	// EXTPDP_MM
    134241736U,	// EXTPV
    134241736U,	// EXTPV_MM
    134240492U,	// EXTP_MM
    134242961U,	// EXTRV_RS_W
    134242961U,	// EXTRV_RS_W_MM
    134242515U,	// EXTRV_R_W
    134242515U,	// EXTRV_R_W_MM
    134238876U,	// EXTRV_S_H
    134238876U,	// EXTRV_S_H_MM
    134243398U,	// EXTRV_W
    134243398U,	// EXTRV_W_MM
    134242950U,	// EXTR_RS_W
    134242950U,	// EXTR_RS_W_MM
    134242494U,	// EXTR_R_W
    134242494U,	// EXTR_R_W_MM
    134238807U,	// EXTR_S_H
    134238807U,	// EXTR_S_H_MM
    134242593U,	// EXTR_W
    134242593U,	// EXTR_W_MM
    134243657U,	// EXTS
    134243609U,	// EXTS32
    134243664U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19690U,	// FABS_D32
    19690U,	// FABS_D64
    19690U,	// FABS_MM
    23397U,	// FABS_S
    23397U,	// FABS_S_MM
    0U,	// FABS_W
    134236315U,	// FADD_D
    134236316U,	// FADD_D32
    134236316U,	// FADD_D64
    151013532U,	// FADD_D_MMR6
    134236316U,	// FADD_MM
    134240762U,	// FADD_S
    134240762U,	// FADD_S_MM
    151017978U,	// FADD_S_MMR6
    134241863U,	// FADD_W
    134236549U,	// FCAF_D
    134241982U,	// FCAF_W
    134236988U,	// FCEQ_D
    134242421U,	// FCEQ_W
    19697U,	// FCLASS_D
    25245U,	// FCLASS_W
    134236393U,	// FCLE_D
    134241905U,	// FCLE_W
    134237479U,	// FCLT_D
    134243000U,	// FCLT_W
    2467203U,	// FCMP_D32
    2467203U,	// FCMP_D32_MM
    2467203U,	// FCMP_D64
    2729347U,	// FCMP_S32
    2729347U,	// FCMP_S32_MM
    134236489U,	// FCNE_D
    134241939U,	// FCNE_W
    134237098U,	// FCOR_D
    134242550U,	// FCOR_W
    134237044U,	// FCUEQ_D
    134242437U,	// FCUEQ_W
    134236459U,	// FCULE_D
    134241921U,	// FCULE_W
    134237535U,	// FCULT_D
    134243016U,	// FCULT_W
    134236505U,	// FCUNE_D
    134241955U,	// FCUNE_W
    134236918U,	// FCUN_D
    134242327U,	// FCUN_W
    134237911U,	// FDIV_D
    134237912U,	// FDIV_D32
    134237912U,	// FDIV_D64
    151015128U,	// FDIV_D_MMR6
    134237912U,	// FDIV_MM
    134241245U,	// FDIV_S
    134241245U,	// FDIV_S_MM
    151018461U,	// FDIV_S_MMR6
    134243382U,	// FDIV_W
    134238534U,	// FEXDO_H
    134242343U,	// FEXDO_W
    134236202U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    134241766U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19114U,	// FEXUPL_D
    24541U,	// FEXUPL_W
    19386U,	// FEXUPR_D
    24838U,	// FEXUPR_W
    19628U,	// FFINT_S_D
    25138U,	// FFINT_S_W
    20107U,	// FFINT_U_D
    25568U,	// FFINT_U_W
    19124U,	// FFQL_D
    24551U,	// FFQL_W
    19396U,	// FFQR_D
    24848U,	// FFQR_W
    17321U,	// FILL_B
    19099U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20767U,	// FILL_H
    24526U,	// FILL_W
    18465U,	// FLOG2_D
    24029U,	// FLOG2_W
    19063U,	// FLOOR_L_D64
    19063U,	// FLOOR_L_D_MMR6
    23231U,	// FLOOR_L_S
    23231U,	// FLOOR_L_S_MMR6
    20238U,	// FLOOR_W_D32
    20238U,	// FLOOR_W_D64
    20238U,	// FLOOR_W_D_MMR6
    20238U,	// FLOOR_W_MM
    23563U,	// FLOOR_W_S
    23563U,	// FLOOR_W_S_MM
    23563U,	// FLOOR_W_S_MMR6
    151013539U,	// FMADD_D
    151019087U,	// FMADD_W
    134236240U,	// FMAX_A_D
    134241804U,	// FMAX_A_W
    134237986U,	// FMAX_D
    134243407U,	// FMAX_W
    134236220U,	// FMIN_A_D
    134241784U,	// FMIN_A_W
    134236892U,	// FMIN_D
    134242319U,	// FMIN_W
    20199U,	// FMOV_D32
    20199U,	// FMOV_D32_MM
    20199U,	// FMOV_D64
    20199U,	// FMOV_D_MMR6
    23524U,	// FMOV_S
    23524U,	// FMOV_S_MM
    23524U,	// FMOV_S_MMR6
    151013497U,	// FMSUB_D
    151019045U,	// FMSUB_W
    134236876U,	// FMUL_D
    134236877U,	// FMUL_D32
    134236877U,	// FMUL_D64
    151014093U,	// FMUL_D_MMR6
    134236877U,	// FMUL_MM
    134240995U,	// FMUL_S
    134240995U,	// FMUL_S_MM
    151018211U,	// FMUL_S_MMR6
    134242303U,	// FMUL_W
    18891U,	// FNEG_D32
    18891U,	// FNEG_D64
    18891U,	// FNEG_D_MMR6
    18891U,	// FNEG_MM
    23192U,	// FNEG_S
    23192U,	// FNEG_S_MM
    23192U,	// FNEG_S_MMR6
    19225U,	// FRCP_D
    24624U,	// FRCP_W
    19845U,	// FRINT_D
    25314U,	// FRINT_W
    19873U,	// FRSQRT_D
    25342U,	// FRSQRT_W
    134236568U,	// FSAF_D
    134241990U,	// FSAF_W
    134237016U,	// FSEQ_D
    134242429U,	// FSEQ_W
    134236431U,	// FSLE_D
    134241913U,	// FSLE_W
    134237507U,	// FSLT_D
    134243008U,	// FSLT_W
    134236497U,	// FSNE_D
    134241947U,	// FSNE_W
    134237106U,	// FSOR_D
    134242558U,	// FSOR_W
    19864U,	// FSQRT_D
    19865U,	// FSQRT_D32
    19865U,	// FSQRT_D64
    19865U,	// FSQRT_MM
    23501U,	// FSQRT_S
    23501U,	// FSQRT_S_MM
    25333U,	// FSQRT_W
    134236273U,	// FSUB_D
    134236274U,	// FSUB_D32
    134236274U,	// FSUB_D64
    151013490U,	// FSUB_D_MMR6
    134236274U,	// FSUB_MM
    134240744U,	// FSUB_S
    134240744U,	// FSUB_S_MM
    151017960U,	// FSUB_S_MMR6
    134241821U,	// FSUB_W
    134237065U,	// FSUEQ_D
    134242446U,	// FSUEQ_W
    134236480U,	// FSULE_D
    134241930U,	// FSULE_W
    134237556U,	// FSULT_D
    134243025U,	// FSULT_W
    134236514U,	// FSUNE_D
    134241964U,	// FSUNE_W
    134236937U,	// FSUN_D
    134242335U,	// FSUN_W
    19639U,	// FTINT_S_D
    25149U,	// FTINT_S_W
    20118U,	// FTINT_U_D
    25579U,	// FTINT_U_W
    134238611U,	// FTQ_H
    134242455U,	// FTQ_W
    19461U,	// FTRUNC_S_D
    24921U,	// FTRUNC_S_W
    19928U,	// FTRUNC_U_D
    25389U,	// FTRUNC_U_W
    1358976644U,	// GotPrologue16
    134237201U,	// HADD_S_D
    134238690U,	// HADD_S_H
    134242661U,	// HADD_S_W
    134237668U,	// HADD_U_D
    134238978U,	// HADD_U_H
    134243129U,	// HADD_U_W
    134237168U,	// HSUB_S_D
    134238669U,	// HSUB_S_H
    134242628U,	// HSUB_S_W
    134237635U,	// HSUB_U_D
    134238957U,	// HSUB_U_H
    134243096U,	// HSUB_U_W
    134235552U,	// ILVEV_B
    134237902U,	// ILVEV_D
    134239200U,	// ILVEV_H
    134243373U,	// ILVEV_W
    134235080U,	// ILVL_B
    134236884U,	// ILVL_D
    134238526U,	// ILVL_H
    134242311U,	// ILVL_W
    134234832U,	// ILVOD_B
    134236357U,	// ILVOD_D
    134238328U,	// ILVOD_H
    134241896U,	// ILVOD_W
    134235128U,	// ILVR_B
    134237141U,	// ILVR_D
    134238651U,	// ILVR_H
    134242601U,	// ILVR_W
    134243646U,	// INS
    53232839U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    53235086U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    53236435U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    53240555U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    16801239U,	// INSV
    61620953U,	// INSVE_B
    61622635U,	// INSVE_D
    61624449U,	// INSVE_H
    61628085U,	// INSVE_W
    16801239U,	// INSV_MM
    134243646U,	// INS_MM
    546498U,	// J
    546531U,	// JAL
    22936U,	// JALR
    547224U,	// JALR16_MM
    22936U,	// JALR64
    0U,	// JALR64Pseudo
    547224U,	// JALRC16_MMR6
    0U,	// JALRPseudo
    541143U,	// JALRS16_MM
    23642U,	// JALRS_MM
    17866U,	// JALR_HB
    22936U,	// JALR_MM
    547906U,	// JALS_MM
    550009U,	// JALX
    550009U,	// JALX_MM
    546531U,	// JAL_MM
    18256U,	// JIALC
    18256U,	// JIALC_MMR6
    18245U,	// JIC
    18245U,	// JIC_MMR6
    547220U,	// JR
    541130U,	// JR16_MM
    547220U,	// JR64
    547041U,	// JRADDIUSP
    542660U,	// JRC16_MM
    541024U,	// JRC16_MMR6
    547029U,	// JRCADDIUSP_MMR6
    542147U,	// JR_HB
    542147U,	// JR_HB_R6
    547220U,	// JR_MM
    546498U,	// J_MM
    3167971U,	// Jal16
    3430115U,	// JalB16
    546531U,	// JalOneReg
    22243U,	// JalTwoReg
    9668U,	// JrRa16
    9659U,	// JrcRa16
    550110U,	// JrcRx16
    540673U,	// JumpLinkReg16
    67126739U,	// LB
    67126739U,	// LB64
    67129231U,	// LBE
    67129231U,	// LBE_MM
    67129231U,	// LBE_MMR6
    67125735U,	// LBU16_MM
    67129337U,	// LBUE_MMR6
    1493197951U,	// LBUX
    1493197951U,	// LBUX_MM
    67132575U,	// LBU_MMR6
    67126739U,	// LB_MM
    67126739U,	// LB_MMR6
    67132575U,	// LBu
    67132575U,	// LBu64
    67129337U,	// LBuE
    67129337U,	// LBuE_MM
    67132575U,	// LBu_MM
    67129195U,	// LD
    67125296U,	// LDC1
    67125296U,	// LDC164
    67125296U,	// LDC1_MM
    67125496U,	// LDC2
    67125496U,	// LDC2_R6
    67125555U,	// LDC3
    17147U,	// LDI_B
    18907U,	// LDI_D
    20643U,	// LDI_H
    24376U,	// LDI_W
    67131199U,	// LDL
    18323U,	// LDPC
    67131730U,	// LDR
    1493188720U,	// LDXC1
    1493188720U,	// LDXC164
    67125953U,	// LD_B
    67127478U,	// LD_D
    67129449U,	// LD_H
    67133017U,	// LD_W
    25189614U,	// LEA_ADDiu
    25189613U,	// LEA_ADDiu64
    25189614U,	// LEA_ADDiu_MM
    67130384U,	// LH
    67130384U,	// LH64
    67129278U,	// LHE
    67129278U,	// LHE_MM
    67125758U,	// LHU16_MM
    1493197940U,	// LHX
    1493197940U,	// LHX_MM
    67130384U,	// LH_MM
    67132641U,	// LHu
    67132641U,	// LHu64
    67129343U,	// LHuE
    67129343U,	// LHuE_MM
    67132641U,	// LHu_MM
    16790U,	// LI16_MM
    16790U,	// LI16_MMR6
    67131295U,	// LL
    67129194U,	// LLD
    67129194U,	// LLD_R6
    67129293U,	// LLE
    67129293U,	// LLE_MM
    67129293U,	// LLE_MMR6
    67131295U,	// LL_MM
    67131295U,	// LL_R6
    67125255U,	// LOAD_ACC128
    67125255U,	// LOAD_ACC64
    67125255U,	// LOAD_ACC64DSP
    67131558U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    134234735U,	// LSA
    1653391983U,	// LSA_MMR6
    134234735U,	// LSA_R6
    33576637U,	// LUI_MMR6
    1493188734U,	// LUXC1
    1493188734U,	// LUXC164
    1493188734U,	// LUXC1_MM
    33576637U,	// LUi
    33576637U,	// LUi64
    33576637U,	// LUi_MM
    67134565U,	// LW
    67125765U,	// LW16_MM
    67134565U,	// LW64
    67125348U,	// LWC1
    67125348U,	// LWC1_MM
    67125522U,	// LWC2
    67125522U,	// LWC2_R6
    67125567U,	// LWC3
    67129355U,	// LWE
    67129355U,	// LWE_MM
    67129355U,	// LWE_MMR6
    67134565U,	// LWGP_MM
    67131394U,	// LWL
    67131394U,	// LWL64
    67129298U,	// LWLE
    67129298U,	// LWLE_MM
    67131394U,	// LWL_MM
    3785139U,	// LWM16_MM
    3785139U,	// LWM16_MMR6
    3784929U,	// LWM32_MM
    3790895U,	// LWM_MM
    18360U,	// LWPC
    18360U,	// LWPC_MMR6
    137458U,	// LWP_MM
    67131852U,	// LWR
    67131852U,	// LWR64
    67129325U,	// LWRE
    67129325U,	// LWRE_MM
    67131852U,	// LWR_MM
    67134565U,	// LWSP_MM
    18353U,	// LWUPC
    67132750U,	// LWU_MM
    1493197957U,	// LWX
    1493188748U,	// LWXC1
    1493188748U,	// LWXC1_MM
    1493195873U,	// LWXS_MM
    1493197957U,	// LWX_MM
    67134565U,	// LW_MM
    67134565U,	// LW_MMR6
    67132750U,	// LWu
    67126739U,	// LbRxRyOffMemX16
    67132575U,	// LbuRxRyOffMemX16
    67130384U,	// LhRxRyOffMemX16
    67132641U,	// LhuRxRyOffMemX16
    939546244U,	// LiRxImm16
    22138U,	// LiRxImmAlignX16
    22148U,	// LiRxImmX16
    16941U,	// LoadAddrImm32
    16962U,	// LoadAddrImm64
    67125805U,	// LoadAddrReg32
    67125826U,	// LoadAddrReg64
    22148U,	// LoadImm32
    22152U,	// LoadImm64
    3957861U,	// LwConstant32
    268461157U,	// LwRxPcTcp16
    25701U,	// LwRxPcTcpX16
    67134565U,	// LwRxRyOffMemX16
    1761633381U,	// LwRxSpImmX16
    20318U,	// MADD
    151013801U,	// MADDF_D
    151013801U,	// MADDF_D_MMR6
    151018111U,	// MADDF_S
    151018111U,	// MADDF_S_MMR6
    151015799U,	// MADDR_Q_H
    151019616U,	// MADDR_Q_W
    23744U,	// MADDU
    134241472U,	// MADDU_DSP
    134241472U,	// MADDU_DSP_MM
    23744U,	// MADDU_MM
    151012750U,	// MADDV_B
    151015100U,	// MADDV_D
    151016398U,	// MADDV_H
    151020571U,	// MADDV_W
    134236324U,	// MADD_D32
    134236324U,	// MADD_D32_MM
    134236324U,	// MADD_D64
    134238046U,	// MADD_DSP
    134238046U,	// MADD_DSP_MM
    20318U,	// MADD_MM
    151015769U,	// MADD_Q_H
    151019586U,	// MADD_Q_W
    134240761U,	// MADD_S
    134240761U,	// MADD_S_MM
    134240098U,	// MAQ_SA_W_PHL
    134240098U,	// MAQ_SA_W_PHL_MM
    134240604U,	// MAQ_SA_W_PHR
    134240604U,	// MAQ_SA_W_PHR_MM
    134240126U,	// MAQ_S_W_PHL
    134240126U,	// MAQ_S_W_PHL_MM
    134240632U,	// MAQ_S_W_PHR
    134240632U,	// MAQ_S_W_PHR_MM
    134236265U,	// MAXA_D
    134236265U,	// MAXA_D_MMR6
    134240734U,	// MAXA_S
    134240734U,	// MAXA_S_MMR6
    134235203U,	// MAXI_S_B
    134237279U,	// MAXI_S_D
    134238768U,	// MAXI_S_H
    134242739U,	// MAXI_S_W
    134235418U,	// MAXI_U_B
    134237746U,	// MAXI_U_D
    134239056U,	// MAXI_U_H
    134243207U,	// MAXI_U_W
    134234784U,	// MAX_A_B
    134236241U,	// MAX_A_D
    134238280U,	// MAX_A_H
    134241805U,	// MAX_A_W
    134237987U,	// MAX_D
    134237987U,	// MAX_D_MMR6
    134241311U,	// MAX_S
    134235291U,	// MAX_S_B
    134237399U,	// MAX_S_D
    134238887U,	// MAX_S_H
    134241311U,	// MAX_S_MMR6
    134242920U,	// MAX_S_W
    134235506U,	// MAX_U_B
    134237866U,	// MAX_U_D
    134239154U,	// MAX_U_H
    134243327U,	// MAX_U_W
    134234122U,	// MFC0
    16451U,	// MFC1
    16451U,	// MFC1_MM
    134234373U,	// MFC2
    16457U,	// MFHC1_D32
    16457U,	// MFHC1_D64
    16457U,	// MFHC1_MM
    546414U,	// MFHI
    546414U,	// MFHI16_MM
    546414U,	// MFHI64
    22126U,	// MFHI_DSP
    22126U,	// MFHI_DSP_MM
    546414U,	// MFHI_MM
    546901U,	// MFLO
    546901U,	// MFLO16_MM
    546901U,	// MFLO64
    22613U,	// MFLO_DSP
    22613U,	// MFLO_DSP_MM
    546901U,	// MFLO_MM
    134236250U,	// MINA_D
    134236250U,	// MINA_D_MMR6
    134240726U,	// MINA_S
    134240726U,	// MINA_S_MMR6
    134235183U,	// MINI_S_B
    134237259U,	// MINI_S_D
    134238748U,	// MINI_S_H
    134242719U,	// MINI_S_W
    134235398U,	// MINI_U_B
    134237726U,	// MINI_U_D
    134239036U,	// MINI_U_H
    134243187U,	// MINI_U_W
    134234765U,	// MIN_A_B
    134236221U,	// MIN_A_D
    134238261U,	// MIN_A_H
    134241785U,	// MIN_A_W
    134236893U,	// MIN_D
    134236893U,	// MIN_D_MMR6
    134241002U,	// MIN_S
    134235213U,	// MIN_S_B
    134237289U,	// MIN_S_D
    134238778U,	// MIN_S_H
    134241002U,	// MIN_S_MMR6
    134242759U,	// MIN_S_W
    134235428U,	// MIN_U_B
    134237756U,	// MIN_U_D
    134239066U,	// MIN_U_H
    134243217U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    134238086U,	// MOD
    134235943U,	// MODSUB
    134241480U,	// MODU
    134241480U,	// MODU_MMR6
    134238086U,	// MOD_MMR6
    134235146U,	// MOD_S_B
    134237222U,	// MOD_S_D
    134238711U,	// MOD_S_H
    134242682U,	// MOD_S_W
    134235361U,	// MOD_U_B
    134237689U,	// MOD_U_D
    134238999U,	// MOD_U_H
    134243150U,	// MOD_U_W
    20485U,	// MOVE16_MM
    16768U,	// MOVE16_MMR6
    1921374337U,	// MOVEP_MM
    23898U,	// MOVE_V
    134236610U,	// MOVF_D32
    134236610U,	// MOVF_D32_MM
    134236610U,	// MOVF_D64
    134238241U,	// MOVF_I
    134238241U,	// MOVF_I64
    134238241U,	// MOVF_I_MM
    134240912U,	// MOVF_S
    134240912U,	// MOVF_S_MM
    134236945U,	// MOVN_I64_D64
    134240329U,	// MOVN_I64_I
    134240329U,	// MOVN_I64_I64
    134241038U,	// MOVN_I64_S
    134236945U,	// MOVN_I_D32
    134236945U,	// MOVN_I_D32_MM
    134236945U,	// MOVN_I_D64
    134240329U,	// MOVN_I_I
    134240329U,	// MOVN_I_I64
    134240329U,	// MOVN_I_MM
    134241038U,	// MOVN_I_S
    134241038U,	// MOVN_I_S_MM
    134237617U,	// MOVT_D32
    134237617U,	// MOVT_D32_MM
    134237617U,	// MOVT_D64
    134241427U,	// MOVT_I
    134241427U,	// MOVT_I64
    134241427U,	// MOVT_I_MM
    134241237U,	// MOVT_S
    134241237U,	// MOVT_S_MM
    134238027U,	// MOVZ_I64_D64
    134243538U,	// MOVZ_I64_I
    134243538U,	// MOVZ_I64_I64
    134241338U,	// MOVZ_I64_S
    134238027U,	// MOVZ_I_D32
    134238027U,	// MOVZ_I_D32_MM
    134238027U,	// MOVZ_I_D64
    134243538U,	// MOVZ_I_I
    134243538U,	// MOVZ_I_I64
    134243538U,	// MOVZ_I_MM
    134241338U,	// MOVZ_I_S
    134241338U,	// MOVZ_I_S_MM
    18223U,	// MSUB
    151013792U,	// MSUBF_D
    151013792U,	// MSUBF_D_MMR6
    151018102U,	// MSUBF_S
    151018102U,	// MSUBF_S_MMR6
    151015788U,	// MSUBR_Q_H
    151019605U,	// MSUBR_Q_W
    23723U,	// MSUBU
    134241451U,	// MSUBU_DSP
    134241451U,	// MSUBU_DSP_MM
    23723U,	// MSUBU_MM
    151012741U,	// MSUBV_B
    151015091U,	// MSUBV_D
    151016389U,	// MSUBV_H
    151020562U,	// MSUBV_W
    134236282U,	// MSUB_D32
    134236282U,	// MSUB_D32_MM
    134236282U,	// MSUB_D64
    134235951U,	// MSUB_DSP
    134235951U,	// MSUB_DSP_MM
    18223U,	// MSUB_MM
    151015759U,	// MSUB_Q_H
    151019576U,	// MSUB_Q_W
    134240743U,	// MSUB_S
    134240743U,	// MSUB_S_MM
    1117814801U,	// MTC0
    10518622U,	// MTC1
    10518622U,	// MTC1_MM
    1117815052U,	// MTC2
    10534992U,	// MTHC1_D32
    10534992U,	// MTHC1_D64
    10534992U,	// MTHC1_MM
    546420U,	// MTHI
    546420U,	// MTHI64
    10524276U,	// MTHI_DSP
    10524276U,	// MTHI_DSP_MM
    546420U,	// MTHI_MM
    10524808U,	// MTHLIP
    10524808U,	// MTHLIP_MM
    546914U,	// MTLO
    546914U,	// MTLO64
    10524770U,	// MTLO_DSP
    10524770U,	// MTLO_DSP_MM
    546914U,	// MTLO_MM
    540701U,	// MTM0
    540826U,	// MTM1
    540958U,	// MTM2
    540707U,	// MTP0
    540832U,	// MTP1
    540964U,	// MTP2
    134239805U,	// MUH
    134241511U,	// MUHU
    134241511U,	// MUHU_MMR6
    134239805U,	// MUH_MMR6
    134240239U,	// MUL
    134240139U,	// MULEQ_S_W_PHL
    134240139U,	// MULEQ_S_W_PHL_MM
    134240645U,	// MULEQ_S_W_PHR
    134240645U,	// MULEQ_S_W_PHR_MM
    134240016U,	// MULEU_S_PH_QBL
    134240016U,	// MULEU_S_PH_QBL_MM
    134240547U,	// MULEU_S_PH_QBR
    134240547U,	// MULEU_S_PH_QBR_MM
    134239566U,	// MULQ_RS_PH
    134239566U,	// MULQ_RS_PH_MM
    134242939U,	// MULQ_RS_W
    134242939U,	// MULQ_RS_W_MMR2
    134239510U,	// MULQ_S_PH
    134239510U,	// MULQ_S_PH_MMR2
    134242798U,	// MULQ_S_W
    134242798U,	// MULQ_S_W_MMR2
    134238594U,	// MULR_Q_H
    134242411U,	// MULR_Q_W
    134239712U,	// MULSAQ_S_W_PH
    134239687U,	// MULSA_W_PH
    23688U,	// MULT
    134241593U,	// MULTU_DSP
    134241593U,	// MULTU_DSP_MM
    134241416U,	// MULT_DSP
    134241416U,	// MULT_DSP_MM
    23688U,	// MULT_MM
    23865U,	// MULTu
    23865U,	// MULTu_MM
    134241548U,	// MULU
    134241548U,	// MULU_MMR6
    134235561U,	// MULV_B
    134237919U,	// MULV_D
    134239209U,	// MULV_H
    134243390U,	// MULV_W
    134240239U,	// MUL_MM
    134240239U,	// MUL_MMR6
    134239383U,	// MUL_PH
    134239383U,	// MUL_PH_MMR2
    134238563U,	// MUL_Q_H
    134242380U,	// MUL_Q_W
    134240239U,	// MUL_R6
    134239478U,	// MUL_S_PH
    134239478U,	// MUL_S_PH_MMR2
    546414U,	// Mfhi16
    546901U,	// Mflo16
    20485U,	// Move32R16
    20485U,	// MoveR3216
    23688U,	// MultRxRy16
    75799688U,	// MultRxRyRz16
    23865U,	// MultuRxRy16
    75799865U,	// MultuRxRyRz16
    17072U,	// NLOC_B
    18571U,	// NLOC_D
    20568U,	// NLOC_H
    24110U,	// NLOC_W
    17080U,	// NLZC_B
    18579U,	// NLZC_D
    20576U,	// NLZC_H
    24118U,	// NLZC_W
    134236332U,	// NMADD_D32
    134236332U,	// NMADD_D32_MM
    134236332U,	// NMADD_D64
    134240760U,	// NMADD_S
    134240760U,	// NMADD_S_MM
    134236290U,	// NMSUB_D32
    134236290U,	// NMSUB_D32_MM
    134236290U,	// NMSUB_D64
    134240742U,	// NMSUB_S
    134240742U,	// NMSUB_S_MM
    0U,	// NOP
    134240670U,	// NOR
    134240670U,	// NOR64
    134234969U,	// NORI_B
    134240670U,	// NORImm
    134240670U,	// NOR_MM
    134240670U,	// NOR_MMR6
    134241642U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16864U,	// NOT16_MM
    16864U,	// NOT16_MMR6
    20519U,	// NegRxRy16
    23694U,	// NotRxRy16
    134240671U,	// OR
    9224657U,	// OR16_MM
    9224657U,	// OR16_MMR6
    134240671U,	// OR64
    134234970U,	// ORI_B
    134239904U,	// ORI_MMR6
    134240671U,	// OR_MM
    134240671U,	// OR_MMR6
    134241643U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    134239904U,	// ORi
    134239904U,	// ORi64
    134239904U,	// ORi_MM
    16800159U,	// OrRxRxRy16
    134239372U,	// PACKRL_PH
    134239372U,	// PACKRL_PH_MM
    9687U,	// PAUSE
    9687U,	// PAUSE_MM
    9687U,	// PAUSE_MMR6
    134235543U,	// PCKEV_B
    134237893U,	// PCKEV_D
    134239191U,	// PCKEV_H
    134243364U,	// PCKEV_W
    134234823U,	// PCKOD_B
    134236348U,	// PCKOD_D
    134238319U,	// PCKOD_H
    134241887U,	// PCKOD_W
    17599U,	// PCNT_B
    19837U,	// PCNT_D
    21195U,	// PCNT_H
    25306U,	// PCNT_W
    134239336U,	// PICK_PH
    134239336U,	// PICK_PH_MM
    134235675U,	// PICK_QB
    134235675U,	// PICK_QB_MM
    22678U,	// POP
    22319U,	// PRECEQU_PH_QBL
    16945U,	// PRECEQU_PH_QBLA
    16945U,	// PRECEQU_PH_QBLA_MM
    22319U,	// PRECEQU_PH_QBL_MM
    22850U,	// PRECEQU_PH_QBR
    16983U,	// PRECEQU_PH_QBRA
    16983U,	// PRECEQU_PH_QBRA_MM
    22850U,	// PRECEQU_PH_QBR_MM
    22384U,	// PRECEQ_W_PHL
    22384U,	// PRECEQ_W_PHL_MM
    22890U,	// PRECEQ_W_PHR
    22890U,	// PRECEQ_W_PHR_MM
    22304U,	// PRECEU_PH_QBL
    16929U,	// PRECEU_PH_QBLA
    16929U,	// PRECEU_PH_QBLA_MM
    22304U,	// PRECEU_PH_QBL_MM
    22835U,	// PRECEU_PH_QBR
    16967U,	// PRECEU_PH_QBRA
    16967U,	// PRECEU_PH_QBRA_MM
    22835U,	// PRECEU_PH_QBR_MM
    134239288U,	// PRECRQU_S_QB_PH
    134239288U,	// PRECRQU_S_QB_PH_MM
    134242030U,	// PRECRQ_PH_W
    134242030U,	// PRECRQ_PH_W_MM
    134239261U,	// PRECRQ_QB_PH
    134239261U,	// PRECRQ_QB_PH_MM
    134242061U,	// PRECRQ_RS_PH_W
    134242061U,	// PRECRQ_RS_PH_W_MM
    134239275U,	// PRECR_QB_PH
    134239275U,	// PRECR_QB_PH_MMR2
    134242014U,	// PRECR_SRA_PH_W
    134242014U,	// PRECR_SRA_PH_W_MMR2
    134242043U,	// PRECR_SRA_R_PH_W
    134242043U,	// PRECR_SRA_R_PH_W_MMR2
    1921051U,	// PREF
    1920934U,	// PREFE
    1920934U,	// PREFE_MM
    1920934U,	// PREFE_MMR6
    84763757U,	// PREFX_MM
    1921051U,	// PREF_MM
    1921051U,	// PREF_MMR6
    1921051U,	// PREF_R6
    134238068U,	// PREPEND
    134238068U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    18199U,	// RADDU_W_QB
    18199U,	// RADDU_W_QB_MM
    33577159U,	// RDDSP
    33577159U,	// RDDSP_MM
    22981U,	// RDHWR
    22981U,	// RDHWR64
    22981U,	// RDHWR_MM
    134240709U,	// RDHWR_MMR6
    22958U,	// RDPGPR_MMR6
    19233U,	// RECIP_D_MMR6
    23318U,	// RECIP_S_MMR6
    21899U,	// REPLV_PH
    21899U,	// REPLV_PH_MM
    18179U,	// REPLV_QB
    18179U,	// REPLV_QB_MM
    33576058U,	// REPL_PH
    33576058U,	// REPL_PH_MM
    33572397U,	// REPL_QB
    33572397U,	// REPL_QB_MM
    19846U,	// RINT_D
    19846U,	// RINT_D_MMR6
    23492U,	// RINT_S
    23492U,	// RINT_S_MMR6
    134240188U,	// ROL
    134240188U,	// ROLImm
    134240676U,	// ROR
    134240676U,	// RORImm
    134240703U,	// ROTR
    134241744U,	// ROTRV
    134241744U,	// ROTRV_MM
    134240703U,	// ROTR_MM
    19042U,	// ROUND_L_D64
    19042U,	// ROUND_L_D_MMR6
    23210U,	// ROUND_L_S
    23210U,	// ROUND_L_S_MMR6
    20217U,	// ROUND_W_D32
    20217U,	// ROUND_W_D64
    20217U,	// ROUND_W_D_MMR6
    20217U,	// ROUND_W_MM
    23542U,	// ROUND_W_S
    23542U,	// ROUND_W_S_MM
    23542U,	// ROUND_W_S_MMR6
    19874U,	// RSQRT_D_MMR6
    23500U,	// RSQRT_S_MMR6
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    134235252U,	// SAT_S_B
    134237338U,	// SAT_S_D
    134238837U,	// SAT_S_H
    134242848U,	// SAT_S_W
    134235479U,	// SAT_U_B
    134237817U,	// SAT_U_D
    134239127U,	// SAT_U_H
    134243278U,	// SAT_U_W
    67127075U,	// SB
    67125588U,	// SB16_MM
    67125588U,	// SB16_MMR6
    67127075U,	// SB64
    67129236U,	// SBE
    67129236U,	// SBE_MM
    67129236U,	// SBE_MMR6
    67127075U,	// SB_MM
    67127075U,	// SB_MMR6
    4229068U,	// SC
    4230995U,	// SCD
    4230995U,	// SCD_R6
    4231065U,	// SCE
    4231065U,	// SCE_MM
    67129241U,	// SCE_MMR6
    4229068U,	// SC_MM
    4229068U,	// SC_R6
    67129227U,	// SD
    546930U,	// SDBBP
    590273U,	// SDBBP16_MM
    590273U,	// SDBBP16_MMR6
    546930U,	// SDBBP_MM
    546930U,	// SDBBP_MMR6
    546930U,	// SDBBP_R6
    67125302U,	// SDC1
    67125302U,	// SDC164
    67125302U,	// SDC1_MM
    67125502U,	// SDC2
    67125502U,	// SDC2_R6
    67125561U,	// SDC3
    25849U,	// SDIV
    25849U,	// SDIV_MM
    67131204U,	// SDL
    67131735U,	// SDR
    1493188727U,	// SDXC1
    1493188727U,	// SDXC164
    23972U,	// SDivMacro
    17854U,	// SEB
    17854U,	// SEB64
    17854U,	// SEB_MM
    17854U,	// SEB_MMR6
    21514U,	// SEH
    21514U,	// SEH64
    21514U,	// SEH_MM
    21514U,	// SEH_MMR6
    134238000U,	// SELENZ_D_MMR6
    134241318U,	// SELENZ_S_MMR6
    134243511U,	// SELEQZ
    134243511U,	// SELEQZ64
    134238017U,	// SELEQZ_D
    134238017U,	// SELEQZ_D_MMR6
    134243511U,	// SELEQZ_MMR6
    134241328U,	// SELEQZ_S
    134241328U,	// SELEQZ_S_MMR6
    134243484U,	// SELNEZ
    134243484U,	// SELNEZ64
    134238000U,	// SELNEZ_D
    134243484U,	// SELNEZ_MMR6
    134241318U,	// SELNEZ_S
    151014027U,	// SEL_D
    151014027U,	// SEL_D_MMR6
    151018195U,	// SEL_S
    151018195U,	// SEL_S_MMR6
    134240513U,	// SEQ
    134239891U,	// SEQi
    67130936U,	// SH
    67125640U,	// SH16_MM
    67125640U,	// SH16_MMR6
    67130936U,	// SH64
    67129283U,	// SHE
    67129283U,	// SHE_MM
    67129283U,	// SHE_MMR6
    134234851U,	// SHF_B
    134238347U,	// SHF_H
    134241999U,	// SHF_W
    22619U,	// SHILO
    23991U,	// SHILOV
    23991U,	// SHILOV_MM
    22619U,	// SHILO_MM
    134239617U,	// SHLLV_PH
    134239617U,	// SHLLV_PH_MM
    134235897U,	// SHLLV_QB
    134235897U,	// SHLLV_QB_MM
    134239554U,	// SHLLV_S_PH
    134239554U,	// SHLLV_S_PH_MM
    134242909U,	// SHLLV_S_W
    134242909U,	// SHLLV_S_W_MM
    134239345U,	// SHLL_PH
    134239345U,	// SHLL_PH_MM
    134235684U,	// SHLL_QB
    134235684U,	// SHLL_QB_MM
    134239467U,	// SHLL_S_PH
    134239467U,	// SHLL_S_PH_MM
    134242749U,	// SHLL_S_W
    134242749U,	// SHLL_S_W_MM
    134239607U,	// SHRAV_PH
    134239607U,	// SHRAV_PH_MM
    134235887U,	// SHRAV_QB
    134235887U,	// SHRAV_QB_MMR2
    134239455U,	// SHRAV_R_PH
    134239455U,	// SHRAV_R_PH_MM
    134235785U,	// SHRAV_R_QB
    134235785U,	// SHRAV_R_QB_MMR2
    134242504U,	// SHRAV_R_W
    134242504U,	// SHRAV_R_W_MM
    134239252U,	// SHRA_PH
    134239252U,	// SHRA_PH_MM
    134235607U,	// SHRA_QB
    134235607U,	// SHRA_QB_MMR2
    134239420U,	// SHRA_R_PH
    134239420U,	// SHRA_R_PH_MM
    134235750U,	// SHRA_R_QB
    134235750U,	// SHRA_R_QB_MMR2
    134242462U,	// SHRA_R_W
    134242462U,	// SHRA_R_W_MM
    134239637U,	// SHRLV_PH
    134239637U,	// SHRLV_PH_MMR2
    134235917U,	// SHRLV_QB
    134235917U,	// SHRLV_QB_MM
    134239363U,	// SHRL_PH
    134239363U,	// SHRL_PH_MMR2
    134235702U,	// SHRL_QB
    134235702U,	// SHRL_QB_MM
    67130936U,	// SH_MM
    67130936U,	// SH_MMR6
    822100730U,	// SLDI_B
    822102490U,	// SLDI_D
    822104226U,	// SLDI_H
    822107959U,	// SLDI_W
    822100672U,	// SLD_B
    822102197U,	// SLD_D
    822104168U,	// SLD_H
    822107736U,	// SLD_W
    134240182U,	// SLL
    134234533U,	// SLL16_MM
    134234533U,	// SLL16_MMR6
    2013288374U,	// SLL64_32
    2013288374U,	// SLL64_64
    134234908U,	// SLLI_B
    134236651U,	// SLLI_D
    134238387U,	// SLLI_H
    134242120U,	// SLLI_W
    134241706U,	// SLLV
    134241706U,	// SLLV_MM
    134235057U,	// SLL_B
    134236835U,	// SLL_D
    134238503U,	// SLL_H
    134240182U,	// SLL_MM
    134240182U,	// SLL_MMR6
    134242262U,	// SLL_W
    134241405U,	// SLT
    134241405U,	// SLT64
    134241405U,	// SLT_MM
    134239915U,	// SLTi
    134239915U,	// SLTi64
    134239915U,	// SLTi_MM
    134241532U,	// SLTiu
    134241532U,	// SLTiu64
    134241532U,	// SLTiu_MM
    134241580U,	// SLTu
    134241580U,	// SLTu64
    134241580U,	// SLTu_MM
    134238179U,	// SNE
    134239836U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    805323635U,	// SPLATI_B
    805325362U,	// SPLATI_D
    805327098U,	// SPLATI_H
    805330831U,	// SPLATI_W
    805323950U,	// SPLAT_B
    805326075U,	// SPLAT_D
    805327546U,	// SPLAT_H
    805331623U,	// SPLAT_W
    19865U,	// SQRT_D_MMR6
    23501U,	// SQRT_S_MMR6
    134234729U,	// SRA
    134234866U,	// SRAI_B
    134236626U,	// SRAI_D
    134238362U,	// SRAI_H
    134242095U,	// SRAI_W
    134234942U,	// SRARI_B
    134236685U,	// SRARI_D
    134238421U,	// SRARI_H
    134242154U,	// SRARI_W
    134235095U,	// SRAR_B
    134237074U,	// SRAR_D
    134238618U,	// SRAR_H
    134242526U,	// SRAR_W
    134241685U,	// SRAV
    134241685U,	// SRAV_MM
    134234793U,	// SRA_B
    134236258U,	// SRA_D
    134238289U,	// SRA_H
    134234729U,	// SRA_MM
    134241814U,	// SRA_W
    134240200U,	// SRL
    134234540U,	// SRL16_MM
    134234540U,	// SRL16_MMR6
    134234916U,	// SRLI_B
    134236659U,	// SRLI_D
    134238395U,	// SRLI_H
    134242128U,	// SRLI_W
    134234960U,	// SRLRI_B
    134236703U,	// SRLRI_D
    134238439U,	// SRLRI_H
    134242172U,	// SRLRI_W
    134235111U,	// SRLR_B
    134237090U,	// SRLR_D
    134238634U,	// SRLR_H
    134242542U,	// SRLR_W
    134241713U,	// SRLV
    134241713U,	// SRLV_MM
    134235064U,	// SRL_B
    134236860U,	// SRL_D
    134238510U,	// SRL_H
    134240200U,	// SRL_MM
    134242287U,	// SRL_W
    9716U,	// SSNOP
    9716U,	// SSNOP_MM
    9716U,	// SSNOP_MMR6
    67125255U,	// STORE_ACC128
    67125255U,	// STORE_ACC64
    67125255U,	// STORE_ACC64DSP
    67131574U,	// STORE_CCOND_DSP
    67126481U,	// ST_B
    67128747U,	// ST_D
    67130077U,	// ST_H
    67134216U,	// ST_W
    134235946U,	// SUB
    134239316U,	// SUBQH_PH
    134239316U,	// SUBQH_PH_MMR2
    134239431U,	// SUBQH_R_PH
    134239431U,	// SUBQH_R_PH_MMR2
    134242472U,	// SUBQH_R_W
    134242472U,	// SUBQH_R_W_MMR2
    134242077U,	// SUBQH_W
    134242077U,	// SUBQH_W_MMR2
    134239391U,	// SUBQ_PH
    134239391U,	// SUBQ_PH_MM
    134239488U,	// SUBQ_S_PH
    134239488U,	// SUBQ_S_PH_MM
    134242778U,	// SUBQ_S_W
    134242778U,	// SUBQ_S_W_MM
    134235467U,	// SUBSUS_U_B
    134237805U,	// SUBSUS_U_D
    134239115U,	// SUBSUS_U_H
    134243266U,	// SUBSUS_U_W
    134235270U,	// SUBSUU_S_B
    134237378U,	// SUBSUU_S_D
    134238855U,	// SUBSUU_S_H
    134242888U,	// SUBSUU_S_W
    134235232U,	// SUBS_S_B
    134237318U,	// SUBS_S_D
    134238817U,	// SUBS_S_H
    134242828U,	// SUBS_S_W
    134235447U,	// SUBS_U_B
    134237785U,	// SUBS_U_D
    134239095U,	// SUBS_U_H
    134243246U,	// SUBS_U_W
    134234606U,	// SUBU16_MM
    134234606U,	// SUBU16_MMR6
    134235655U,	// SUBUH_QB
    134235655U,	// SUBUH_QB_MMR2
    134235761U,	// SUBUH_R_QB
    134235761U,	// SUBUH_R_QB_MMR2
    134241445U,	// SUBU_MMR6
    134239589U,	// SUBU_PH
    134239589U,	// SUBU_PH_MMR2
    134235869U,	// SUBU_QB
    134235869U,	// SUBU_QB_MM
    134239532U,	// SUBU_S_PH
    134239532U,	// SUBU_S_PH_MMR2
    134235808U,	// SUBU_S_QB
    134235808U,	// SUBU_S_QB_MM
    134235014U,	// SUBVI_B
    134236741U,	// SUBVI_D
    134238477U,	// SUBVI_H
    134242210U,	// SUBVI_W
    134235526U,	// SUBV_B
    134237876U,	// SUBV_D
    134239174U,	// SUBV_H
    134243347U,	// SUBV_W
    134235946U,	// SUB_MM
    134235946U,	// SUB_MMR6
    134241445U,	// SUBu
    134241445U,	// SUBu_MM
    1493188741U,	// SUXC1
    1493188741U,	// SUXC164
    1493188741U,	// SUXC1_MM
    67134569U,	// SW
    67125771U,	// SW16_MM
    67125771U,	// SW16_MMR6
    67134569U,	// SW64
    67125354U,	// SWC1
    67125354U,	// SWC1_MM
    67125528U,	// SWC2
    67125528U,	// SWC2_R6
    67125573U,	// SWC3
    67129360U,	// SWE
    67129360U,	// SWE_MM
    67129360U,	// SWE_MMR6
    67131399U,	// SWL
    67131399U,	// SWL64
    67129304U,	// SWLE
    67129304U,	// SWLE_MM
    67131399U,	// SWL_MM
    3785146U,	// SWM16_MM
    3785146U,	// SWM16_MMR6
    3784936U,	// SWM32_MM
    3790900U,	// SWM_MM
    137463U,	// SWP_MM
    67131857U,	// SWR
    67131857U,	// SWR64
    67129331U,	// SWRE
    67129331U,	// SWRE_MM
    67131857U,	// SWR_MM
    67134569U,	// SWSP_MM
    67134569U,	// SWSP_MMR6
    1493188755U,	// SWXC1
    1493188755U,	// SWXC1_MM
    67134569U,	// SW_MM
    67134569U,	// SW_MMR6
    550177U,	// SYNC
    153154U,	// SYNCI
    153154U,	// SYNCI_MMR6
    550177U,	// SYNC_MM
    542605U,	// SYNC_MMR6
    546714U,	// SYSCALL
    546714U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    67127075U,	// SbRxRyOffMemX16
    550104U,	// SebRx16
    550116U,	// SehRx16
    4629681U,	// SelBeqZ
    4629654U,	// SelBneZ
    2239928464U,	// SelTBteqZCmp
    2239927949U,	// SelTBteqZCmpi
    2239929469U,	// SelTBteqZSlt
    2239927979U,	// SelTBteqZSlti
    2239929596U,	// SelTBteqZSltiu
    2239929644U,	// SelTBteqZSltu
    2374146192U,	// SelTBtneZCmp
    2374145677U,	// SelTBtneZCmpi
    2374147197U,	// SelTBtneZSlt
    2374145707U,	// SelTBtneZSlti
    2374147324U,	// SelTBtneZSltiu
    2374147372U,	// SelTBtneZSltu
    67130936U,	// ShRxRyOffMemX16
    134240182U,	// SllX16
    16801194U,	// SllvRxRy16
    100965501U,	// SltCCRxRy16
    23677U,	// SltRxRy16
    100964011U,	// SltiCCRxImmX16
    939546283U,	// SltiRxImm16
    22187U,	// SltiRxImmX16
    100965628U,	// SltiuCCRxImmX16
    939547900U,	// SltiuRxImm16
    23804U,	// SltiuRxImmX16
    100965676U,	// SltuCCRxRy16
    23852U,	// SltuRxRy16
    100965676U,	// SltuRxRyRz16
    134234729U,	// SraX16
    16801173U,	// SravRxRy16
    134240200U,	// SrlX16
    16801201U,	// SrlvRxRy16
    134241445U,	// SubuRxRyRz16
    67134569U,	// SwRxRyOffMemX16
    1761633385U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    134240518U,	// TEQ
    33576601U,	// TEQI
    33576601U,	// TEQI_MM
    134240518U,	// TEQ_MM
    134238130U,	// TGE
    33576534U,	// TGEI
    33578229U,	// TGEIU
    33578229U,	// TGEIU_MM
    33576534U,	// TGEI_MM
    134241492U,	// TGEU
    134241492U,	// TGEU_MM
    134238130U,	// TGE_MM
    9744U,	// TLBINV
    9693U,	// TLBINVF
    9711U,	// TLBP
    9711U,	// TLBP_MM
    9722U,	// TLBR
    9722U,	// TLBR_MM
    9701U,	// TLBWI
    9701U,	// TLBWI_MM
    9727U,	// TLBWR
    9727U,	// TLBWR_MM
    134241410U,	// TLT
    33576625U,	// TLTI
    33578243U,	// TLTIU_MM
    33576625U,	// TLTI_MM
    134241586U,	// TLTU
    134241586U,	// TLTU_MM
    134241410U,	// TLT_MM
    134238184U,	// TNE
    33576546U,	// TNEI
    33576546U,	// TNEI_MM
    134238184U,	// TNE_MM
    0U,	// TRAP
    19031U,	// TRUNC_L_D64
    19031U,	// TRUNC_L_D_MMR6
    23199U,	// TRUNC_L_S
    23199U,	// TRUNC_L_S_MMR6
    20206U,	// TRUNC_W_D32
    20206U,	// TRUNC_W_D64
    20206U,	// TRUNC_W_D_MMR6
    20206U,	// TRUNC_W_MM
    23531U,	// TRUNC_W_S
    23531U,	// TRUNC_W_S_MM
    23531U,	// TRUNC_W_S_MMR6
    33578243U,	// TTLTIU
    25835U,	// UDIV
    25835U,	// UDIV_MM
    23880U,	// UDivMacro
    67130383U,	// Ulh
    67132640U,	// Ulhu
    67134564U,	// Ulw
    134241546U,	// V3MULU
    134234135U,	// VMM0
    134241561U,	// VMULU
    151012066U,	// VSHF_B
    151013810U,	// VSHF_D
    151015562U,	// VSHF_H
    151019214U,	// VSHF_W
    9739U,	// WAIT
    597106U,	// WAIT_MM
    597106U,	// WAIT_MMR6
    33577166U,	// WRDSP
    33577166U,	// WRDSP_MM
    22966U,	// WRPGPR_MMR6
    21508U,	// WSBH
    21508U,	// WSBH_MM
    21508U,	// WSBH_MMR6
    134240681U,	// XOR
    9224656U,	// XOR16_MM
    9224656U,	// XOR16_MMR6
    134240681U,	// XOR64
    134234977U,	// XORI_B
    134239903U,	// XORI_MMR6
    134240681U,	// XOR_MM
    134240681U,	// XOR_MMR6
    134241649U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    134239903U,	// XORi
    134239903U,	// XORi64
    134239903U,	// XORi_MM
    16800169U,	// XorRxRxRy16
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_PH_MM
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_QB_MMR2
    0U,	// ABSQ_S_W
    0U,	// ABSQ_S_W_MM
    0U,	// ABS_D_MMR6
    0U,	// ABS_S_MMR6
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_PH_MMR2
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_PH_MMR2
    0U,	// ADDQH_R_W
    0U,	// ADDQH_R_W_MMR2
    0U,	// ADDQH_W
    0U,	// ADDQH_W_MMR2
    0U,	// ADDQ_PH
    0U,	// ADDQ_PH_MM
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_PH_MM
    0U,	// ADDQ_S_W
    0U,	// ADDQ_S_W_MM
    0U,	// ADDSC
    0U,	// ADDSC_MM
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDU16_MMR6
    0U,	// ADDUH_QB
    0U,	// ADDUH_QB_MMR2
    0U,	// ADDUH_R_QB
    0U,	// ADDUH_R_QB_MMR2
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_PH_MMR2
    0U,	// ADDU_QB
    0U,	// ADDU_QB_MM
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_PH_MMR2
    0U,	// ADDU_S_QB
    0U,	// ADDU_S_QB_MM
    1U,	// ADDVI_B
    1U,	// ADDVI_D
    1U,	// ADDVI_H
    1U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADDWC_MM
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    8U,	// ALIGN
    8U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND16_MMR6
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI16_MMR6
    1U,	// ANDI_B
    0U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    2U,	// ANDi
    2U,	// ANDi64
    2U,	// ANDi_MM
    2U,	// APPEND
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    0U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    2U,	// BALIGN
    0U,	// BAL_BR
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC16_MMR6
    0U,	// BC1EQZ
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2NEZ
    1U,	// BCLRI_B
    1U,	// BCLRI_D
    1U,	// BCLRI_H
    1U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC16_MMR6
    0U,	// BEQZC_MM
    0U,	// BEQ_MM
    0U,	// BGE
    0U,	// BGEC
    0U,	// BGEImmMacro
    0U,	// BGEL
    0U,	// BGELImmMacro
    0U,	// BGEU
    0U,	// BGEUC
    0U,	// BGEUImmMacro
    0U,	// BGEUL
    0U,	// BGEULImmMacro
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGT
    0U,	// BGTImmMacro
    0U,	// BGTL
    0U,	// BGTLImmMacro
    0U,	// BGTU
    0U,	// BGTUImmMacro
    0U,	// BGTUL
    0U,	// BGTULImmMacro
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZL
    0U,	// BGTZ_MM
    3U,	// BINSLI_B
    3U,	// BINSLI_D
    3U,	// BINSLI_H
    3U,	// BINSLI_W
    4U,	// BINSL_B
    4U,	// BINSL_D
    4U,	// BINSL_H
    4U,	// BINSL_W
    3U,	// BINSRI_B
    3U,	// BINSRI_D
    3U,	// BINSRI_H
    3U,	// BINSRI_W
    4U,	// BINSR_B
    4U,	// BINSR_D
    4U,	// BINSR_H
    4U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLE
    0U,	// BLEImmMacro
    0U,	// BLEL
    0U,	// BLELImmMacro
    0U,	// BLEU
    0U,	// BLEUImmMacro
    0U,	// BLEUL
    0U,	// BLEULImmMacro
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLT
    0U,	// BLTC
    0U,	// BLTImmMacro
    0U,	// BLTL
    0U,	// BLTLImmMacro
    0U,	// BLTU
    0U,	// BLTUC
    0U,	// BLTUImmMacro
    0U,	// BLTUL
    0U,	// BLTULImmMacro
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZL
    0U,	// BLTZ_MM
    3U,	// BMNZI_B
    4U,	// BMNZ_V
    3U,	// BMZI_B
    4U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    1U,	// BNEGI_B
    1U,	// BNEGI_D
    1U,	// BNEGI_H
    1U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC16_MMR6
    0U,	// BNEZC_MM
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK16_MMR6
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    3U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    4U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    1U,	// BSETI_B
    1U,	// BSETI_D
    1U,	// BSETI_H
    1U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// B_MMR6_Pseudo
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BneImm
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHEE
    0U,	// CACHEE_MM
    0U,	// CACHEE_MMR6
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_D_MMR6
    0U,	// CEIL_L_S
    0U,	// CEIL_L_S_MMR6
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_D_MMR6
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEIL_W_S_MMR6
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFCMSA
    10U,	// CINS
    10U,	// CINS32
    0U,	// CLASS_D
    0U,	// CLASS_D_MMR6
    0U,	// CLASS_S
    0U,	// CLASS_S_MMR6
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    1U,	// CLEI_U_B
    1U,	// CLEI_U_D
    1U,	// CLEI_U_H
    1U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    1U,	// CLTI_U_B
    1U,	// CLTI_U_D
    1U,	// CLTI_U_H
    1U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LT_QB
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LT_QB
    0U,	// CMP_AF_D_MMR6
    0U,	// CMP_AF_S_MMR6
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_D_MMR6
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_S
    0U,	// CMP_EQ_S_MMR6
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_D_MMR6
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_S
    0U,	// CMP_LE_S_MMR6
    0U,	// CMP_LT_D
    0U,	// CMP_LT_D_MMR6
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_S
    0U,	// CMP_LT_S_MMR6
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_D_MMR6
    0U,	// CMP_SAF_S
    0U,	// CMP_SAF_S_MMR6
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_D_MMR6
    0U,	// CMP_SEQ_S
    0U,	// CMP_SEQ_S_MMR6
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_D_MMR6
    0U,	// CMP_SLE_S
    0U,	// CMP_SLE_S_MMR6
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_D_MMR6
    0U,	// CMP_SLT_S
    0U,	// CMP_SLT_S_MMR6
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_D_MMR6
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SUEQ_S_MMR6
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_D_MMR6
    0U,	// CMP_SULE_S
    0U,	// CMP_SULE_S_MMR6
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_D_MMR6
    0U,	// CMP_SULT_S
    0U,	// CMP_SULT_S_MMR6
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_D_MMR6
    0U,	// CMP_SUN_S
    0U,	// CMP_SUN_S_MMR6
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_D_MMR6
    0U,	// CMP_UEQ_S
    0U,	// CMP_UEQ_S_MMR6
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_D_MMR6
    0U,	// CMP_ULE_S
    0U,	// CMP_ULE_S_MMR6
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_D_MMR6
    0U,	// CMP_ULT_S
    0U,	// CMP_ULT_S_MMR6
    0U,	// CMP_UN_D
    0U,	// CMP_UN_D_MMR6
    0U,	// CMP_UN_S
    0U,	// CMP_UN_S_MMR6
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    17U,	// COPY_S_B
    17U,	// COPY_S_D
    17U,	// COPY_S_H
    17U,	// COPY_S_W
    17U,	// COPY_U_B
    17U,	// COPY_U_H
    17U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_L_MMR6
    0U,	// CVT_D_S_MM
    0U,	// CVT_D_S_MMR6
    0U,	// CVT_D_W_MMR6
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_D_MMR6
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_L_S_MMR6
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_D_MMR6
    0U,	// CVT_S_L
    0U,	// CVT_S_L_MMR6
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_S_W_MMR6
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_D_MMR6
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// CVT_W_S_MMR6
    0U,	// C_EQ_D32
    0U,	// C_EQ_D64
    0U,	// C_EQ_S
    0U,	// C_F_D32
    0U,	// C_F_D64
    0U,	// C_F_S
    0U,	// C_LE_D32
    0U,	// C_LE_D64
    0U,	// C_LE_S
    0U,	// C_LT_D32
    0U,	// C_LT_D64
    0U,	// C_LT_S
    0U,	// C_NGE_D32
    0U,	// C_NGE_D64
    0U,	// C_NGE_S
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_S
    0U,	// C_NGL_D32
    0U,	// C_NGL_D64
    0U,	// C_NGL_S
    0U,	// C_NGT_D32
    0U,	// C_NGT_D64
    0U,	// C_NGT_S
    0U,	// C_OLE_D32
    0U,	// C_OLE_D64
    0U,	// C_OLE_S
    0U,	// C_OLT_D32
    0U,	// C_OLT_D64
    0U,	// C_OLT_S
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_S
    0U,	// C_SF_D32
    0U,	// C_SF_D64
    0U,	// C_SF_S
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_S
    0U,	// C_ULE_D32
    0U,	// C_ULE_D64
    0U,	// C_ULE_S
    0U,	// C_ULT_D32
    0U,	// C_ULT_D64
    0U,	// C_ULT_S
    0U,	// C_UN_D32
    0U,	// C_UN_D64
    0U,	// C_UN_S
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    0U,	// DAHI
    0U,	// DAHI_MM64R6
    8U,	// DALIGN
    8U,	// DALIGN_MM64R6
    0U,	// DATI
    0U,	// DATI_MM64R6
    0U,	// DAUI
    0U,	// DAUI_MM64R6
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DDIVU_MM64R6
    0U,	// DDIV_MM64R6
    0U,	// DERET
    0U,	// DERET_MM
    0U,	// DERET_MMR6
    10U,	// DEXT
    10U,	// DEXTM
    10U,	// DEXTM_MM64R6
    10U,	// DEXTU
    10U,	// DEXTU_MM64R6
    10U,	// DEXT_MM64R6
    0U,	// DI
    42U,	// DINS
    42U,	// DINSM
    42U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    0U,	// DI_MMR6
    8U,	// DLSA
    8U,	// DLSA_R6
    2U,	// DMFC0
    0U,	// DMFC1
    2U,	// DMFC2
    0U,	// DMFC2_OCTEON
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMODU_MM64R6
    0U,	// DMOD_MM64R6
    0U,	// DMTC0
    0U,	// DMTC1
    0U,	// DMTC2
    0U,	// DMTC2_OCTEON
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    4U,	// DPADD_S_D
    4U,	// DPADD_S_H
    4U,	// DPADD_S_W
    4U,	// DPADD_U_D
    4U,	// DPADD_U_H
    4U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_MMR2
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_MMR2
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_MM
    0U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_MM
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_MM
    0U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_MM
    0U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_MMR2
    0U,	// DPA_W_PH
    0U,	// DPA_W_PH_MMR2
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_MMR2
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_MMR2
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_MM
    0U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_MM
    4U,	// DPSUB_S_D
    4U,	// DPSUB_S_H
    4U,	// DPSUB_S_W
    4U,	// DPSUB_U_D
    4U,	// DPSUB_U_H
    4U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_MM
    0U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_MM
    0U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_MMR2
    0U,	// DPS_W_PH
    0U,	// DPS_W_PH_MMR2
    0U,	// DROL
    0U,	// DROLImm
    0U,	// DROR
    0U,	// DRORImm
    2U,	// DROTR
    2U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSDivMacro
    0U,	// DSHD
    2U,	// DSLL
    2U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    2U,	// DSRA
    2U,	// DSRA32
    0U,	// DSRAV
    2U,	// DSRL
    2U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DUDivMacro
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    0U,	// ERet
    10U,	// EXT
    2U,	// EXTP
    2U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPDPV_MM
    2U,	// EXTPDP_MM
    0U,	// EXTPV
    0U,	// EXTPV_MM
    2U,	// EXTP_MM
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_RS_W_MM
    0U,	// EXTRV_R_W
    0U,	// EXTRV_R_W_MM
    0U,	// EXTRV_S_H
    0U,	// EXTRV_S_H_MM
    0U,	// EXTRV_W
    0U,	// EXTRV_W_MM
    2U,	// EXTR_RS_W
    2U,	// EXTR_RS_W_MM
    2U,	// EXTR_R_W
    2U,	// EXTR_R_W_MM
    2U,	// EXTR_S_H
    2U,	// EXTR_S_H_MM
    2U,	// EXTR_W
    2U,	// EXTR_W_MM
    10U,	// EXTS
    10U,	// EXTS32
    10U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    5U,	// FADD_D_MMR6
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    5U,	// FADD_S_MMR6
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    5U,	// FDIV_D_MMR6
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    5U,	// FDIV_S_MMR6
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_D_MMR6
    0U,	// FLOOR_L_S
    0U,	// FLOOR_L_S_MMR6
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_D_MMR6
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FLOOR_W_S_MMR6
    4U,	// FMADD_D
    4U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_D_MMR6
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMOV_S_MMR6
    4U,	// FMSUB_D
    4U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    5U,	// FMUL_D_MMR6
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    5U,	// FMUL_S_MMR6
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_D_MMR6
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FNEG_S_MMR6
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    5U,	// FSUB_D_MMR6
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    5U,	// FSUB_S_MMR6
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    42U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    0U,	// INSV_MM
    42U,	// INS_MM
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRC16_MMR6
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JRC16_MMR6
    0U,	// JRCADDIUSP_MMR6
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBE
    0U,	// LBE_MM
    0U,	// LBE_MMR6
    0U,	// LBU16_MM
    0U,	// LBUE_MMR6
    0U,	// LBUX
    0U,	// LBUX_MM
    0U,	// LBU_MMR6
    0U,	// LB_MM
    0U,	// LB_MMR6
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBuE
    0U,	// LBuE_MM
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHE
    0U,	// LHE_MM
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LHX_MM
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHuE
    0U,	// LHuE_MM
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LI16_MMR6
    0U,	// LL
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LLE
    0U,	// LLE_MM
    0U,	// LLE_MMR6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    8U,	// LSA
    0U,	// LSA_MMR6
    8U,	// LSA_R6
    0U,	// LUI_MMR6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWE
    0U,	// LWE_MM
    0U,	// LWE_MMR6
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWLE
    0U,	// LWLE_MM
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM16_MMR6
    0U,	// LWM32_MM
    0U,	// LWM_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWRE
    0U,	// LWRE_MM
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LWX_MM
    0U,	// LW_MM
    0U,	// LW_MMR6
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    4U,	// MADDF_D
    4U,	// MADDF_D_MMR6
    4U,	// MADDF_S
    4U,	// MADDF_S_MMR6
    4U,	// MADDR_Q_H
    4U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_DSP_MM
    0U,	// MADDU_MM
    4U,	// MADDV_B
    4U,	// MADDV_D
    4U,	// MADDV_H
    4U,	// MADDV_W
    40U,	// MADD_D32
    40U,	// MADD_D32_MM
    40U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_DSP_MM
    0U,	// MADD_MM
    4U,	// MADD_Q_H
    4U,	// MADD_Q_W
    40U,	// MADD_S
    40U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_MM
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_MM
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_MM
    0U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_MM
    0U,	// MAXA_D
    0U,	// MAXA_D_MMR6
    0U,	// MAXA_S
    0U,	// MAXA_S_MMR6
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    1U,	// MAXI_U_B
    1U,	// MAXI_U_D
    1U,	// MAXI_U_H
    1U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_D_MMR6
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_MMR6
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    2U,	// MFC0
    0U,	// MFC1
    0U,	// MFC1_MM
    2U,	// MFC2
    0U,	// MFHC1_D32
    0U,	// MFHC1_D64
    0U,	// MFHC1_MM
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_DSP_MM
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_DSP_MM
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_D_MMR6
    0U,	// MINA_S
    0U,	// MINA_S_MMR6
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    1U,	// MINI_U_B
    1U,	// MINI_U_D
    1U,	// MINI_U_H
    1U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_D_MMR6
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_MMR6
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE16_MMR6
    0U,	// MOVEP_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    4U,	// MSUBF_D
    4U,	// MSUBF_D_MMR6
    4U,	// MSUBF_S
    4U,	// MSUBF_S_MMR6
    4U,	// MSUBR_Q_H
    4U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_MM
    0U,	// MSUBU_MM
    4U,	// MSUBV_B
    4U,	// MSUBV_D
    4U,	// MSUBV_H
    4U,	// MSUBV_W
    40U,	// MSUB_D32
    40U,	// MSUB_D32_MM
    40U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_DSP_MM
    0U,	// MSUB_MM
    4U,	// MSUB_Q_H
    4U,	// MSUB_Q_W
    40U,	// MSUB_S
    40U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC2
    0U,	// MTHC1_D32
    0U,	// MTHC1_D64
    0U,	// MTHC1_MM
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_DSP_MM
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTHLIP_MM
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_DSP_MM
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHL_MM
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEQ_S_W_PHR_MM
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBL_MM
    0U,	// MULEU_S_PH_QBR
    0U,	// MULEU_S_PH_QBR_MM
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_PH_MM
    0U,	// MULQ_RS_W
    0U,	// MULQ_RS_W_MMR2
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_PH_MMR2
    0U,	// MULQ_S_W
    0U,	// MULQ_S_W_MMR2
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSA_W_PH
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULTU_DSP_MM
    0U,	// MULT_DSP
    0U,	// MULT_DSP_MM
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_PH_MMR2
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// MUL_S_PH_MMR2
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    40U,	// NMADD_D32
    40U,	// NMADD_D32_MM
    40U,	// NMADD_D64
    40U,	// NMADD_S
    40U,	// NMADD_S_MM
    40U,	// NMSUB_D32
    40U,	// NMSUB_D32_MM
    40U,	// NMSUB_D64
    40U,	// NMSUB_S
    40U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    1U,	// NORI_B
    0U,	// NORImm
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NOT16_MMR6
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR16_MMR6
    0U,	// OR64
    1U,	// ORI_B
    0U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    2U,	// ORi
    2U,	// ORi64
    2U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PACKRL_PH_MM
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PAUSE_MMR6
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_PH_MM
    0U,	// PICK_QB
    0U,	// PICK_QB_MM
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBLA_MM
    0U,	// PRECEQU_PH_QBL_MM
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQU_PH_QBRA_MM
    0U,	// PRECEQU_PH_QBR_MM
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHL_MM
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEQ_W_PHR_MM
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBLA_MM
    0U,	// PRECEU_PH_QBL_MM
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECEU_PH_QBRA_MM
    0U,	// PRECEU_PH_QBR_MM
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQU_S_QB_PH_MM
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_PH_W_MM
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_QB_PH_MM
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECRQ_RS_PH_W_MM
    0U,	// PRECR_QB_PH
    0U,	// PRECR_QB_PH_MMR2
    2U,	// PRECR_SRA_PH_W
    2U,	// PRECR_SRA_PH_W_MMR2
    2U,	// PRECR_SRA_R_PH_W
    2U,	// PRECR_SRA_R_PH_W_MMR2
    0U,	// PREF
    0U,	// PREFE
    0U,	// PREFE_MM
    0U,	// PREFE_MMR6
    0U,	// PREFX_MM
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    2U,	// PREPEND
    2U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RADDU_W_QB_MM
    0U,	// RDDSP
    0U,	// RDDSP_MM
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    2U,	// RDHWR_MMR6
    0U,	// RDPGPR_MMR6
    0U,	// RECIP_D_MMR6
    0U,	// RECIP_S_MMR6
    0U,	// REPLV_PH
    0U,	// REPLV_PH_MM
    0U,	// REPLV_QB
    0U,	// REPLV_QB_MM
    0U,	// REPL_PH
    0U,	// REPL_PH_MM
    0U,	// REPL_QB
    0U,	// REPL_QB_MM
    0U,	// RINT_D
    0U,	// RINT_D_MMR6
    0U,	// RINT_S
    0U,	// RINT_S_MMR6
    0U,	// ROL
    0U,	// ROLImm
    0U,	// ROR
    0U,	// RORImm
    2U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    2U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_D_MMR6
    0U,	// ROUND_L_S
    0U,	// ROUND_L_S_MMR6
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_D_MMR6
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// ROUND_W_S_MMR6
    0U,	// RSQRT_D_MMR6
    0U,	// RSQRT_S_MMR6
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    2U,	// SAT_S_B
    2U,	// SAT_S_D
    2U,	// SAT_S_H
    2U,	// SAT_S_W
    2U,	// SAT_U_B
    2U,	// SAT_U_D
    2U,	// SAT_U_H
    2U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB16_MMR6
    0U,	// SB64
    0U,	// SBE
    0U,	// SBE_MM
    0U,	// SBE_MMR6
    0U,	// SB_MM
    0U,	// SB_MMR6
    0U,	// SC
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SCE
    0U,	// SCE_MM
    0U,	// SCE_MMR6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP16_MMR6
    0U,	// SDBBP_MM
    0U,	// SDBBP_MMR6
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SDivMacro
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEB_MMR6
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SEH_MMR6
    0U,	// SELENZ_D_MMR6
    0U,	// SELENZ_S_MMR6
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_D_MMR6
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELEQZ_S_MMR6
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    4U,	// SEL_D
    4U,	// SEL_D_MMR6
    4U,	// SEL_S
    4U,	// SEL_S_MMR6
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH16_MMR6
    0U,	// SH64
    0U,	// SHE
    0U,	// SHE_MM
    0U,	// SHE_MMR6
    2U,	// SHF_B
    2U,	// SHF_H
    2U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHILOV_MM
    0U,	// SHILO_MM
    0U,	// SHLLV_PH
    0U,	// SHLLV_PH_MM
    0U,	// SHLLV_QB
    0U,	// SHLLV_QB_MM
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_PH_MM
    0U,	// SHLLV_S_W
    0U,	// SHLLV_S_W_MM
    2U,	// SHLL_PH
    2U,	// SHLL_PH_MM
    2U,	// SHLL_QB
    2U,	// SHLL_QB_MM
    2U,	// SHLL_S_PH
    2U,	// SHLL_S_PH_MM
    2U,	// SHLL_S_W
    2U,	// SHLL_S_W_MM
    0U,	// SHRAV_PH
    0U,	// SHRAV_PH_MM
    0U,	// SHRAV_QB
    0U,	// SHRAV_QB_MMR2
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_PH_MM
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_QB_MMR2
    0U,	// SHRAV_R_W
    0U,	// SHRAV_R_W_MM
    2U,	// SHRA_PH
    2U,	// SHRA_PH_MM
    2U,	// SHRA_QB
    2U,	// SHRA_QB_MMR2
    2U,	// SHRA_R_PH
    2U,	// SHRA_R_PH_MM
    2U,	// SHRA_R_QB
    2U,	// SHRA_R_QB_MMR2
    2U,	// SHRA_R_W
    2U,	// SHRA_R_W_MM
    0U,	// SHRLV_PH
    0U,	// SHRLV_PH_MMR2
    0U,	// SHRLV_QB
    0U,	// SHRLV_QB_MM
    2U,	// SHRL_PH
    2U,	// SHRL_PH_MMR2
    2U,	// SHRL_QB
    2U,	// SHRL_QB_MM
    0U,	// SH_MM
    0U,	// SH_MMR6
    6U,	// SLDI_B
    6U,	// SLDI_D
    6U,	// SLDI_H
    6U,	// SLDI_W
    20U,	// SLD_B
    20U,	// SLD_D
    20U,	// SLD_H
    20U,	// SLD_W
    2U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL16_MMR6
    0U,	// SLL64_32
    0U,	// SLL64_64
    1U,	// SLLI_B
    1U,	// SLLI_D
    1U,	// SLLI_H
    1U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    2U,	// SLL_MM
    2U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    17U,	// SPLATI_B
    17U,	// SPLATI_D
    17U,	// SPLATI_H
    17U,	// SPLATI_W
    16U,	// SPLAT_B
    16U,	// SPLAT_D
    16U,	// SPLAT_H
    16U,	// SPLAT_W
    0U,	// SQRT_D_MMR6
    0U,	// SQRT_S_MMR6
    2U,	// SRA
    1U,	// SRAI_B
    1U,	// SRAI_D
    1U,	// SRAI_H
    1U,	// SRAI_W
    2U,	// SRARI_B
    2U,	// SRARI_D
    2U,	// SRARI_H
    2U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    2U,	// SRA_MM
    0U,	// SRA_W
    2U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRL16_MMR6
    1U,	// SRLI_B
    1U,	// SRLI_D
    1U,	// SRLI_H
    1U,	// SRLI_W
    2U,	// SRLRI_B
    2U,	// SRLRI_D
    2U,	// SRLRI_H
    2U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    2U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// SSNOP_MMR6
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_PH_MMR2
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_PH_MMR2
    0U,	// SUBQH_R_W
    0U,	// SUBQH_R_W_MMR2
    0U,	// SUBQH_W
    0U,	// SUBQH_W_MMR2
    0U,	// SUBQ_PH
    0U,	// SUBQ_PH_MM
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_PH_MM
    0U,	// SUBQ_S_W
    0U,	// SUBQ_S_W_MM
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBU16_MMR6
    0U,	// SUBUH_QB
    0U,	// SUBUH_QB_MMR2
    0U,	// SUBUH_R_QB
    0U,	// SUBUH_R_QB_MMR2
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_PH_MMR2
    0U,	// SUBU_QB
    0U,	// SUBU_QB_MM
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_PH_MMR2
    0U,	// SUBU_S_QB
    0U,	// SUBU_S_QB_MM
    1U,	// SUBVI_B
    1U,	// SUBVI_D
    1U,	// SUBVI_H
    1U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW16_MMR6
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWE
    0U,	// SWE_MM
    0U,	// SWE_MMR6
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWLE
    0U,	// SWLE_MM
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM16_MMR6
    0U,	// SWM32_MM
    0U,	// SWM_MM
    0U,	// SWP_MM
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWRE
    0U,	// SWRE_MM
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWSP_MMR6
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNCI_MMR6
    0U,	// SYNC_MM
    0U,	// SYNC_MMR6
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    0U,	// SelTBtneZCmp
    0U,	// SelTBtneZCmpi
    0U,	// SelTBtneZSlt
    0U,	// SelTBtneZSlti
    0U,	// SelTBtneZSltiu
    0U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    2U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    2U,	// SraX16
    0U,	// SravRxRy16
    2U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    2U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    2U,	// TEQ_MM
    2U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    2U,	// TGEU
    2U,	// TGEU_MM
    2U,	// TGE_MM
    0U,	// TLBINV
    0U,	// TLBINVF
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    2U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    2U,	// TLTU
    2U,	// TLTU_MM
    2U,	// TLT_MM
    2U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    2U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_D_MMR6
    0U,	// TRUNC_L_S
    0U,	// TRUNC_L_S_MMR6
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_D_MMR6
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TRUNC_W_S_MMR6
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// UDivMacro
    0U,	// Ulh
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    4U,	// VSHF_B
    4U,	// VSHF_D
    4U,	// VSHF_H
    4U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WAIT_MMR6
    0U,	// WRDSP
    0U,	// WRDSP_MM
    0U,	// WRPGPR_MMR6
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// WSBH_MMR6
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR16_MMR6
    0U,	// XOR64
    1U,	// XORI_B
    0U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    2U,	// XORi
    2U,	// XORi64
    2U,	// XORi_MM
    0U,	// XorRxRxRy16
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, CONSTPOOL_EN...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W, ABSQ_S_W...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, DAHI, DAHI_MM64R6, DATI, DATI_MM64R6, DMTC0...
    printOperand(MI, 1, O);
    O << ", ";
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, MTHC1_D32, MTHC1_D64, MTHC1_MM, OR16_M...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 4:
    // BREAK, BREAK16_MM, BREAK16_MMR6, BREAK_MM, BREAK_MMR6, SDBBP16_MM, SDB...
    printUnsignedImm(MI, 0, O);
    break;
  case 5:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printUnsignedImm(MI, 2, O);
    O << ", ";
    break;
  case 6:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O);
    break;
  case 7:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, MOVEP_MM, SWM16_MM, SWM16_MMR6...
    printRegisterList(MI, 0, O);
    O << ", ";
    break;
  case 8:
    // LWP_MM, SWP_MM
    printRegisterPair(MI, 0, O);
    O << ", ";
    printMemOperand(MI, 2, O);
    return;
    break;
  case 9:
    // SYNCI, SYNCI_MMR6
    printMemOperand(MI, 0, O);
    return;
    break;
  case 10:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O);
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W, ABSQ_S_W...
    O << ", ";
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DAHI_MM64R6, DATI, DATI_MM64R6, MOVEP_MM, MultRxRyRz...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, B16_MM, BAL, BALC, BALC_MMR6, BC, BC16_MMR6...
    return;
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, OR16_MM, OR16_MMR6, PREFX_MM, XOR16_MM...
    printOperand(MI, 1, O);
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst";
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst";
    return;
    break;
  case 7:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printMemOperand(MI, 0, O);
    return;
    break;
  case 8:
    // CTC1, CTC1_MM, DMTC0, DMTC1, DMTC2, MTC0, MTC1, MTC1_MM, MTC2, MTHC1_D...
    printOperand(MI, 0, O);
    break;
  case 9:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 11:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '[';
    break;
  case 12:
    // Jal16
    O << "\n\tnop";
    return;
    break;
  case 13:
    // JalB16
    O << "\t# branch\n\tnop";
    return;
    break;
  case 14:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, SWM16_MM, SWM16_MMR6, SWM32_MM...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 15:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t";
    printOperand(MI, 1, O);
    O << "\n2:";
    return;
    break;
  case 16:
    // SC, SCD, SCD_R6, SCE, SCE_MM, SC_MM, SC_R6
    printMemOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 23) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W, ABSQ_S_W...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDIUS5_MM, AND16_MM, AND16_MMR6, CTC1, CTC1_MM, DAHI, DAHI_MM64R6, DA...
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O);
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O);
    return;
    break;
  case 4:
    // BBIT0, BBIT032, BBIT1, BBIT132, BREAK, BREAK_MM, BREAK_MMR6, DMFC2_OCT...
    printUnsignedImm(MI, 1, O);
    break;
  case 5:
    // DMTC0, DMTC2, LSA_MMR6, MOVEP_MM, MTC0, MTC2
    O << ", ";
    break;
  case 6:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W
    printUnsignedImm8(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 7:
    // INSVE_B, INSVE_D, INSVE_H, INSVE_W
    printUnsignedImm(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUnsignedImm(MI, 4, O);
    O << ']';
    return;
    break;
  case 8:
    // LB, LB64, LBE, LBE_MM, LBE_MMR6, LBU16_MM, LBUE_MMR6, LBU_MMR6, LB_MM,...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 9:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t";
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // PREFX_MM
    O << '(';
    printOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 11:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O);
    break;
  case 12:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t";
    printOperand(MI, 0, O);
    O << ", $t8";
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 27) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W, ABSQ_S_W...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    O << ", ";
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst";
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst";
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << '[';
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst";
    return;
    break;
  case 8:
    // DMTC0, DMTC2, MTC0, MTC2
    printUnsignedImm(MI, 2, O);
    return;
    break;
  case 9:
    // DSLL64_32
    O << ", 32";
    return;
    break;
  case 10:
    // GotPrologue16
    O << "\n\taddiu\t";
    printOperand(MI, 1, O);
    O << ", $pc, ";
    printOperand(MI, 3, O);
    O << "\n ";
    return;
    break;
  case 11:
    // LBUX, LBUX_MM, LDXC1, LDXC164, LHX, LHX_MM, LUXC1, LUXC164, LUXC1_MM, ...
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 12:
    // LSA_MMR6
    printOperand(MI, 0, O);
    O << ", ";
    printUnsignedImm(MI, 3, O);
    return;
    break;
  case 13:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( ";
    printOperand(MI, 1, O);
    O << " ); ";
    return;
    break;
  case 14:
    // MOVEP_MM
    printOperand(MI, 3, O);
    return;
    break;
  case 15:
    // SLL64_32, SLL64_64
    O << ", 0";
    return;
    break;
  case 16:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 32) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, ANDI_B, BCLRI_B, BCLRI_D, BCLRI_H,...
    printUnsignedImm8(MI, 2, O);
    break;
  case 2:
    // ANDi, ANDi64, ANDi_MM, APPEND, BALIGN, CINS, CINS32, DEXT, DEXTM, DEXT...
    printUnsignedImm(MI, 2, O);
    break;
  case 3:
    // BINSLI_B, BINSLI_D, BINSLI_H, BINSLI_W, BINSRI_B, BINSRI_D, BINSRI_H, ...
    printUnsignedImm8(MI, 3, O);
    return;
    break;
  case 4:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O);
    break;
  case 5:
    // FADD_D_MMR6, FADD_S_MMR6, FDIV_D_MMR6, FDIV_S_MMR6, FMUL_D_MMR6, FMUL_...
    printOperand(MI, 1, O);
    return;
    break;
  case 6:
    // SLDI_B, SLDI_D, SLDI_H, SLDI_W
    printUnsignedImm(MI, 3, O);
    O << ']';
    return;
    break;
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 35) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DALIGN_MM64R6, DEXT, DEXTM, D...
    O << ", ";
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // DINS, DINSM, DINSU, INS, INS_MM, MADD_D32, MADD_D32_MM, MADD_D64, MADD...
    printOperand(MI, 3, O);
    return;
  } else {
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DALIGN_MM64R6, DEXT, DEXTM, D...
    printUnsignedImm(MI, 3, O);
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\xFF\x01\x01";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MM ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MMR6 ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR_MMR6 GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_MMR6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYNC_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC_MMR6 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TEQ_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  case Mips::WRDSP:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::WRDSP_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP_MM GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printUnsignedImm(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
